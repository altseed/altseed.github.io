{
  "index.html": {
    "href": "index.html",
    "title": "Altseed2 | Altseed2",
    "keywords": ""
  },
  "Manual/CLITool.html": {
    "href": "Manual/CLITool.html",
    "title": "Altseed2.Tools (.NETツール) | Altseed2",
    "keywords": "Altseed2.Tools (.NETツール) Altseed2で使えるツールをまとめたものです。 # globalの場合 dotnet tool install -g Altseed2.Tools # localの場合 dotnet new tool-manifeset dotnet tool install Altseed2.Tools でインストールして、 dotnet altseed2 <subcommand> コマンドで実行できます。 利用可能なコマンド file ファイルパッケージを作成するコマンドです。 dotnet altseed2 file -s {リソースフォルダ} -o {出力先ファイル名} [-p {パスワード}] font 静的フォントを作成するコマンドです。 dotnet altseed2 font -s {フォントファイル} -o {出力先a2f名} -c {使用したい文字列} [--size {サンプリングサイズ}] gui ファイルパッケージの生成や静的フォントファイルの生成をGUI上で行うことができます。 dotnet altseed2 gui"
  },
  "Manual/Engine/Engine.html": {
    "href": "Manual/Engine/Engine.html",
    "title": "エンジン | Altseed2",
    "keywords": "エンジン Engine は Altseed2 の基本的な機能を提供します。初期化・終了をはじめとする、Altseed2 のほとんどの機能は Engine を通して使用します。 エンジンでできること Engine は次の機能を提供します。 Altseed2 の初期化・更新処理・終了処理 Node の登録・削除・更新 各モジュール Sound ：サウンドの再生 基本的な実行手順 Altseed2 を使用するプログラムの基本構造は次のようになります。 using Altseed2; class Empty { static void Main(string[] args) { // Altseed2 を起動する前にいくつかの設定ができます。 var config = new Configuration() { // 垂直同期信号を待つかどうかを取得または設定します。 WaitVSync = true, }; // Altseed2 を初期化します。 Engine.Initialize(\"Empty\", 640, 480, config); // ここで画像などのデータを読み込んだりノードツリーを作成したりすることができます。 // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // ここに挙動をべた書きすることも可能です。 // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } Caution Initialize 、 Terminate 、 DoEvents 、 Update のメソッドはこのサンプルのように必ず使用します。 また Altseed2 のすべての機能は Initialize してから Terminate するまでの間に実行されるようにしてください。 Initialize の前や、 Terminate の後で、Altseed2 の機能を使用すると予期せぬエラーが発生することがあります。 Configuration について Altseed2 の一部機能は、初期化時に Initialize の引数として渡す Configuration を用いて設定します。 設定項目の詳細については Configuration のリファレンス をご覧ください。 ポーズ（一時停止） ゲームのプレイ中に、ゲームを一時中断して設定を変更したり休憩したりすることがあります。このような機能を実装するときは、各 Node の毎フレームの更新を停止する必要があります。しかし、一部のメニューやアニメーションなどは停止せず、更新し続ける必要があります。 Altseed2 では、ゲームの一時停止は Pause メソッドで、ゲームの再開は Resume メソッドによって実現できます。 なお、 Pause メソッドの引数にメニュー画面などの Node を渡すことにより、その Node を一時停止の対象から除外することができます。 Note 初代 Altseed では、ゲームのシーンにメニュー画面のレイヤーを追加したうえで、メニュー画面のレイヤー以外のすべてのレイヤーの IsUpdated プロパティを false にすることで実現していました。Altseed2 では上記のような方法でゲームのポーズ（一時停止）を実現します。 フレームレート Altseed2 は固定フレームレート、可変フレームレート両方に対応しています。初期値では可変フレームレートに設定されています。どちらの場合でも、1秒間の更新回数は TargetFPS で指定されている値に近づくように調整されます。 Node の OnUpdate メソッドの実行や描画処理などの更新処理は、毎秒およそこの値の回数実行されます。 <!-- TODO:残り書く --> Caution ホ ン マ か ？ ？"
  },
  "Manual/File/file.html": {
    "href": "Manual/File/file.html",
    "title": "ファイル | Altseed2",
    "keywords": "ファイル ファイル操作に関する機能を提供します。 Engine.File では、ファイルを読み込む先のディレクトリ・パッケージの指定やディレクトリのパッケージ化が可能です。 そして、ファイルを読み込むことができ、 StaticFile.Create メソッドを用いて StaticFile インスタンスを作成するか、 StreamFile.Create メソッドを用いて StreamFile インスタンスを作成する方法の2種類があります。 Engine.File Engine.File.AddRootDirectory メソッドでファイルを読み込む時のルートを指定します。 一切ルートを指定していないと、カレントディレクトリから相対的にファイルを読み込みます。 ルートディレクトリが指定されていると、ルートディレクトリから相対的にファイルを読み込みます。 また、 Engine.File.AddRootPackage メソッドで複数のファイルを1つにまとめたパッケージをルートに指定することが可能で、パッケージ内からファイルを読み込みます。 パスワード付きのパッケージをルートに指定する場合、 Engine.File.AddRootPackageWithPassword メソッドを使用してください。 StaticFile StaticFile は、ファイルを一括で全て読み込むクラスです。 ファイルを読み込んで StaticFile インスタンスを生成するには Create メソッドを使います。 読み込んだファイルの内容は、 Buffer で、Byte配列として得られます。 Tip 一度、 Create するとキャッシュされます。 よって、同じパスでファイルを Create した場合、キャッシュから読み込まれるため、読み込み時間が小さくなります。 StreamFile StreamFile は、ファイルを部分的に読み込むクラスです。 ファイルを読み込んで StreamFile インスタンスを生成するには Create メソッドを使います。 Read メソッドによって、指定されたサイズの分だけ、ファイルに格納されているデータを読み込みます。 読み込んだ内容は、 TempBuffer で、Byte配列として得られます。 また、現在読み込まれているデータのサイズは、 TempBufferSize で得られます。 サンプル StaticFileによるファイル読み込み using System; using System.Text; using Altseed2; namespace Sample { class FileStaticFile { [STAThread] static void Main(string[] args) { // Altseed2 を初期化します。 if (!Engine.Initialize(\"StaticFile\", 640, 480)) return; // ファイルを読み込みます。 var staticFile = StaticFile.Create(@\"TestData/IO/test.txt\"); // バイト配列をUTF8として、string型に変換します。 var text = Encoding.UTF8.GetString(staticFile.Buffer); // コンソールに出力します。 Console.WriteLine(text); // Altseed の終了処理をします。 Engine.Terminate(); } } } StreamFileによるファイル読み込み using System; using System.Text; using Altseed2; namespace Sample { class FileStreamFile { [STAThread] static void Main(string[] args) { // Altseed2 を初期化します。 if (!Engine.Initialize(\"StaticFile\", 640, 480)) return; // ファイルを読み込みます。 var streamFile = StreamFile.Create(@\"TestData/IO/test.txt\"); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseedを更新します。 Engine.Update(); // 1バイト読み込む var size = streamFile.Read(1); // バイト配列をUTF8として、string型に変換します。 var text = Encoding.UTF8.GetString(streamFile.TempBuffer); // コンソールに出力します。 Console.WriteLine(text); // 新たに読み込んだデータが0なら終了させます。 if (size == 0) break; } // Altseed の終了処理をします。 Engine.Terminate(); } } }"
  },
  "Manual/File/Package.html": {
    "href": "Manual/File/Package.html",
    "title": "ファイルパッケージ | Altseed2",
    "keywords": "ファイルパッケージ ファイルパッケージングとは、Altseed2で使用するファイルを一つのファイルにまとめる機能を指します。 この機能を使用することで、Altseed2で使用するリソースデータを、ユーザから簡単に見られないようにすることができます。 パッケージの作り方 ツールを利用して生成する（推奨） Altseed2.Tools (.NETツール) を利用して、CLIコマンドまたはGUIを用いてパッケージを作成することができます。 ソースコード上から生成する Altseed2を用いてソースコード上から生成する方法を説明します。 パッケージの作成は、 Engine.File.Pack メソッドで、パッケージ化するディレクトリとパッケージのパスを指定することでできます。 また、 Engine.File.PackWithPassword メソッドによって、パスワード付きでパッケージ化することが可能です。 パスワード付きのパッケージにすることで、パッケージ化されたリソースデータをユーザから抽出されるのを防ぐことができます。 パッケージの使い方 Engine.File.AddRootPackage メソッドでパッケージをルートに指定することが可能で、パッケージ内からファイルを読み込みます。 そして、ルートディレクトリやパッケージは複数指定できます。 ファイルを読み込む時に複数のファイルが見つかった時、後から追加されたルートディレクトリやパッケージから読み込みます。 絶対パスを指定した場合、ルートの指定関係なく絶対パスで指定された先を読み込みます。 パスワード付きのパッケージをルートに指定する場合、 Engine.File.AddRootPackageWithPassword メソッドを使用してください。 Tip 複数のパッケージを読み込んだ時の優先順位を利用することでアップデートパッチを容易に実装できます。 例えば、製品の最初でパッケージXに格納されているファイルAがあるとします。ファイルAに不具合が存在することが発覚し、ファイルAを差し替えることになりました。 このとき、更新した新しいファイルAをパッケージYに格納します。そして、プログラム側ではパッケージX, パッケージYの順に追加するようにしておきます。 すると同じ名前のファイルAを読み込むときにパッケージXからでなく、後から追加したパッケージYから読み込むようになります。 このように更新したファイルのみを別のパッケージにまとめることで、 実際に読み込む際のファイルのパス指定を変更することなく容易にファイルの更新を行えます。 Note Altseed2のパッケージング機能の内部実装は、Zip圧縮になっています。 したがって、任意のZipファイルをパッケージとして読み込むことができます。 サンプル パッケージの作成・読み込み using System; using Altseed2; namespace Sample { class Package { [STAThread] static void Main(string[] args) { // Altseed を初期化します。 if (!Engine.Initialize(\"SpriteNode\", 640, 480)) return; // TestData ディレクトリからファイルパッケージを生成します。 Engine.File.Pack(\"TestData\", \"Package.pack\"); // Package.pack をルートパッケージにします。 Engine.File.AddRootPackage(\"Package.pack\"); // パッケージに含まれる画像データをロードします。 var texture = Texture2D.Load(@\"TestData/IO/AltseedPink256.png\"); // 画像を描画するノードを生成・登録します。 var node = new SpriteNode(); node.Texture = texture; Engine.AddNode(node); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } } パスワード付きパッケージの作成・読み込み using System; using Altseed2; namespace Sample { class PackageWithPassword { [STAThread] static void Main(string[] args) { // Altseed を初期化します。 if (!Engine.Initialize(\"SpriteNode\", 640, 480)) return; // TestData ディレクトリからファイルパッケージを生成します。 // パスワードを ALTSEED とします。 Engine.File.PackWithPassword(\"TestData\", \"Package.pack\", \"ALTSEED\"); // Package.pack をルートパッケージにします。 Engine.File.AddRootPackageWithPassword(\"Package.pack\", \"ALTSEED\"); // パッケージに含まれる画像データをロードします。 var texture = Texture2D.Load(@\"TestData/IO/AltseedPink256.png\"); // 画像を描画するノードを生成・登録します。 var node = new SpriteNode(); node.Texture = texture; Engine.AddNode(node); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } } Zipファイルをパッケージとして読み込み using System; using Altseed2; namespace Sample { class PackageFromZip { [STAThread] static void Main(string[] args) { // Altseed を初期化します。 if (!Engine.Initialize(\"SpriteNode\", 640, 480)) return; // Package.zip をルートパッケージにします。 Engine.File.AddRootPackage(\"Package.zip\"); // パッケージに含まれる画像データをロードします。 var texture = Texture2D.Load(@\"TestData/IO/AltseedPink256.png\"); // 画像を描画するノードを生成・登録します。 var node = new SpriteNode(); node.Texture = texture; Engine.AddNode(node); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } }"
  },
  "Manual/Graphics/Camera.html": {
    "href": "Manual/Graphics/Camera.html",
    "title": "カメラ | Altseed2",
    "keywords": "カメラ CameraNode は指定の領域の描画結果を写し撮るノードです。既定では写し撮った領域は画面に描画されます。 CameraNode が撮影する領域は Angle 、 CenterPosition 、 Position 、 Scale プロパティを用いることで設定できます。 Note 既定では、 CameraNode が撮影する領域は、点 (0, 0) を左上とする、 ウインドウサイズ と同じ大きさ（ TargetTexture を設定した場合はその 大きさ ）の長方形の領域です。上記の各種プロパティを設定してこの長方形を変形することで、撮影する領域を調整すると考えるとよいです。 描画結果を RenderTexure として取り出して再利用することもできます。 Material などを付けて再描画することができます。 Important エンジンにカメラが一つも登録されていない場合は、暗黙的に存在するデフォルトカメラによって登録されている描画できる全てのノードが描画されます。しかし エンジンにカメラが一つでも登録した場合は、デフォルトカメラが無効化されるため、下記の CameraGroup プロパティを適切に設定していないノードは描画されません。 クリア IsColorCleared プロパティを設定することで、 CameraNode が描画を開始する前、描画領域をクリアすることができます。その際の色は ClearColor プロパティで設定できます。クリアを行わないと、前のフレームの描画結果に上書きして描画した結果が得られます。 Note 複数のカメラの描画結果を画面に出力する場合、透明な色でクリアすることによって、より下に（先に）出力されるカメラの描画結果も表示することができます。 グループ SpriteNode や PostEffectNode のような描画できるノードが持っている CameraGroup プロパティは、どのカメラの描画によって描画されるかを指定するものです。 描画の対象となる CameraGroup は、 CameraNode クラスが持つ Group プロパティと、 CameraGroup プロパティの AND 演算の結果が 0 以外である場合、描画します。 Note CameraNode は Group プロパティの値に従い 降順 に描画結果を生成します。これはペイントソフトなどにおけるレイヤーの重ね順のように機能します。 Important 上記の通り、画面もしくは RenderTexure への描画は Group プロパティの値に従い 降順 に行われます。 RenderTexure への描画結果を SpriteNode などで再利用する場合、その SpriteNode は RenderTexure への描画を行った CameraGroup よりも Group プロパティの値がより大きい CameraGroup によって撮影する場合のみ正常に描画されます。 Group プロパティの値が同じか、より小さい CameraNode によって撮影しようとした場合、 RenderTexure への描画がその時点でまだ行われていないため、何も描画されていないか1フレーム前の描画結果を使用して描画が行われます。 サンプル カメラ using System; using Altseed2; namespace Sample { class Camera { [STAThread] static void Main(string[] args) { const ulong cameraGroup = 0b1; // Altseed2 を初期化します。 if (!Engine.Initialize(\"Camera\", 640, 480)) return; // SpriteNode を作成します。 // 詳しくは SpriteNode のサンプルを参照してください。 var sprite = new SpriteNode(); // テクスチャを設定します。 sprite.Texture = Texture2D.Load(@\"TestData/IO/AltseedPink256.png\"); sprite.CameraGroup = cameraGroup; Engine.AddNode(sprite); // sprite の座標を設定します。 sprite.Position = new Vector2F(100, 100); // カメラノードを作成します。 var camera = new CameraNode(); // カメラが映す対象とするグループを設定します。 camera.Group = cameraGroup; // カメラが映す箇所の座標を設定します。 camera.Position = new Vector2F(100, 100); // カメラノードを登録します。 Engine.AddNode(camera); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } } RenderTexture using System; using Altseed2; namespace Sample { class Camera_RenderTexture { [STAThread] static void Main(string[] args) { const ulong cameraGroup = 0b1; const ulong cameraGroup2 = 0b10; // Altseed2 を初期化します。 if (!Engine.Initialize(\"RenderTexture\", 640, 480)) return; // SpriteNode を作成します。 // 詳しくは SpriteNode のサンプルを参照してください。 var sprite = new SpriteNode(); sprite.Texture = Texture2D.Load(@\"TestData/IO/AltseedPink256.png\"); sprite.CameraGroup = cameraGroup; sprite.Scale = new Vector2F(200, 200) / sprite.Texture.Size; Engine.AddNode(sprite); // スクリーンのように描画先にできるテクスチャを作成します。 var renderTexture = RenderTexture.Create(new Vector2I(200, 200), TextureFormat.R8G8B8A8_UNORM); // sprite を写してrenderTexture に出力する CameraNode を作成します。 // 詳しくは CameraNode のサンプルを参照してください。 var camera = new CameraNode(); camera.Group = cameraGroup; Engine.AddNode(camera); // カメラの描画先を設定します。 // null のとき出力先はスクリーンになります。 camera.TargetTexture = renderTexture; // 描画する前に TargetTexture を指定色で塗りつぶすかどうかを設定します。 camera.IsColorCleared = true; // 塗りつぶす色を設定します。 camera.ClearColor = new Color(100, 100, 100); // renderTexture をスクリーンに描画するための SpriteNode を作成します。 var sprite2 = new SpriteNode(); sprite2.Texture = renderTexture; sprite2.CameraGroup = cameraGroup2; Engine.AddNode(sprite2); // sprite2 を写してスクリーンに出力するカメラを作成します。 var camera2 = new CameraNode(); camera2.Group = cameraGroup2; Engine.AddNode(camera2); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } }"
  },
  "Manual/Graphics/Material.html": {
    "href": "Manual/Graphics/Material.html",
    "title": "マテリアル | Altseed2",
    "keywords": "マテリアル Altseed2では描画方法をマテリアルにより拡張できます。 例えば、画像をそのまま表示するのではなく、反転させたり合成されたりスクロールしたりして表示できます。 マテリアルを使用するためには、シェーダーを先に用意する必要があります。 シェーダーはHLSLというプログラミング言語で描画方法を記述して、そのソースコードを元に生成します。 HLSLには制約があります。 頂点シェーダーとピクセルシェーダー間のデータ受け渡し用の構造体の定義は完全に一致する必要があります。 サンプラーとテクスチャは隙間なく敷き詰める必要があります。 頂点シェーダーでテクスチャを使用する場合、ピクセルシェーダーでも同じテクスチャとサンプラーの定義を書く必要があります。 includeはファイルからシェーダーのソースコードを読み込んだ場合のみ有効です。 シェーダーを作成し、マテリアルに設定します。 そうすると、設定されたシェーダーをマテリアルで使用して描画します。 作成したマテリアルは様々なクラスに割り当てられます。 シェーダーは、直接Altseed2が動いているプログラミング言語の文字列をソースコードとして作成する方法と、テキストファイルを読み込んで作成する方法の2種類があります。 テキストファイルを作成する手間はありますが、includeを使用できるメリットがあります。 マテリアルにはアルファブレンドを設定できます。 描画される先と描画する画像の間で、画像同士をどのように合成するかを指定できます。 下図の画像は、標準で提供されているOpacity, Normal, Add, Subtract, Multiplyの合成結果です。 これら以外にも自由に合成方法を指定できます。 using System; using Altseed2; namespace Sample { public class MaterialSample { const string _HlslCode = @\" struct PS_INPUT { float4 Position : SV_POSITION; float4 Color : COLOR0; float2 UV1 : UV0; float2 UV2 : UV1; }; Texture2D mainTex : register(t0); SamplerState mainSamp : register(s0); float4 main(PS_INPUT input) : SV_TARGET { // 入力画像のUV画像に対応するピクセルの色を取得します。 float4 color = mainTex.Sample(mainSamp, input.UV1); // RGBの値を反転します。 color.xyz = float3(1.0) - color.xyz; // 算出した値を返します。 return color; } \"; [STAThread] static void Main(string[] args) { // Altseed2 を初期化します。 if (!Engine.Initialize(\"TextNode\", 640, 480)) return; // テクスチャを読み込みます。 var texture = Texture2D.Load(@\"TestData/IO/AltseedPink256.png\"); // マテリアルを作成します。 var material = Material.Create(); // マテリアルに使用するシェーダを作成します。 var shader = Shader.Create(\"Negative\", _HlslCode, ShaderStage.Pixel); // マテリアルにシェーダを割り当てます。 material.SetShader(shader); // 必要な場合、アルファブレンドの種類を割り当てます。 material.AlphaBlend = AlphaBlend.Normal; // スプライトを描画するノードを作成します。 var node = new SpriteNode(); // テクスチャを設定します。 node.Texture = texture; // マテリアルを設定します。 node.Material = material; // ノードを登録します。 Engine.AddNode(node); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } }"
  },
  "Manual/Graphics/PostEffect.html": {
    "href": "Manual/Graphics/PostEffect.html",
    "title": "ポストエフェクト | Altseed2",
    "keywords": "ポストエフェクト PostEffectNode は画面やカメラに対し何らかの効果を加えて表示される映像を変化させるノードです。 組み込みポストエフェクト グレースケール PostEffectGrayScaleNode は画面をグレースケール化するポストエフェクトです。 using System; using Altseed2; namespace Sample { public class PostEffectGrayScale { [STAThread] static void Main(string[] args) { // Altseed2 を初期化します。 if (!Engine.Initialize(\"PostEffect - GrayScale\", 640, 480)) return; // 画像を表示するノードを作成して登録します。 // 詳しくはSpriteのサンプルを参照してください。 var node = new SpriteNode { Texture = Texture2D.Load(@\"TestData/Graphics/flower.png\"), Scale = new Vector2F(0.5f, 0.5f) }; Engine.AddNode(node); // グレースケールを適用するポストエフェクトを作成して登録します。 var postEffect = new PostEffectGrayScaleNode(); Engine.AddNode(postEffect); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } } セピアカラー PostEffectSepiaNode は画面をセピア調にするポストエフェクトです。 using System; using Altseed2; namespace Sample { public class PostEffectSepia { [STAThread] static void Main(string[] args) { // Altseed2 を初期化します。 if (!Engine.Initialize(\"PostEffect - Sepia\", 640, 480)) return; // 画像を表示するノードを作成して登録します。 // 詳しくはSpriteのサンプルを参照してください。 var node = new SpriteNode { Texture = Texture2D.Load(@\"TestData/Graphics/flower.png\"), Scale = new Vector2F(0.5f, 0.5f) }; Engine.AddNode(node); // セピアを適用するポストエフェクトを作成して登録します。 var postEffect = new PostEffectSepiaNode(); Engine.AddNode(postEffect); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } } ガウスぼかし PostEffectGaussianBlurNode は画面にぼかしを書けるポストエフェクトです。画面が一様にぼけます。 using System; using Altseed2; namespace Sample { public class PostEffectGaussianBlur { [STAThread] static void Main(string[] args) { // Altseed2 を初期化します。 if (!Engine.Initialize(\"PostEffect - GaussianBur\", 640, 480)) return; // 画像を表示するノードを作成して登録します。 // 詳しくはSpriteのサンプルを参照してください。 var node = new SpriteNode { Texture = Texture2D.Load(@\"TestData/Graphics/flower.png\"), Scale = new Vector2F(0.5f, 0.5f) }; Engine.AddNode(node); // ガウスぼかしを適用するポストエフェクトを作成して登録します。 var postEffect = new PostEffectGaussianBlurNode { // ガウスぼかしの強さを設定します。 Intensity = 3.0f }; Engine.AddNode(postEffect); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } } ライトブルーム PostEffectLightBloomNode は画面で一定以上明るい画素をぼかして加算することで、光が溢れているような表現を与えるポストエフェクトです。 具体的な処理としては元の画像から閾値を超えた画素を抽出し、閾値を超えた分の輝度をぼかして元の画像に加算しています。 using System; using Altseed2; namespace Sample { public class PostEffectLightBloom { [STAThread] static void Main(string[] args) { // Altseed2 を初期化します。 if (!Engine.Initialize(\"PostEffect - LightBloom\", 640, 480)) return; // 画像を表示するノードを作成して登録します。 // 詳しくはSpriteのサンプルを参照してください。 var node = new SpriteNode { Texture = Texture2D.Load(@\"TestData/Graphics/flower.png\"), Scale = new Vector2F(0.5f, 0.5f) }; Engine.AddNode(node); // ライトブルームを適用するポストエフェクトを作成して登録します。 var postEffect = new PostEffectLightBloomNode { // ライトブルームの強さを設定します。 Intensity = 5.0f, Threshold = 0.5f }; Engine.AddNode(postEffect); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } } 自作ポストエフェクト PostEffectNode , Shader , Material のクラスを使用して、自作ポストエフェクトを実装できます。下記のサンプルでは、階調を反転させています。 HLSLのコードを記述すれば、Altseedが内部で適切に変換するため、自動的にマルチプラットフォーム対応になります。 using System; using Altseed2; namespace Sample { public class CustomPostEffect { [STAThread] static void Main(string[] args) { // Altseed2 を初期化します。 if (!Engine.Initialize(\"PostEffect - Custom\", 640, 480)) return; // 画像を表示するノードを作成して登録します。 // 詳しくはSpriteのサンプルを参照してください。 var node = new SpriteNode { Texture = Texture2D.Load(@\"TestData/Graphics/flower.png\"), Scale = new Vector2F(0.5f, 0.5f) }; Engine.AddNode(node); // 自作のポストエフェクトを描画するノードを作成して登録します。 var postEffect = new MyPostEffectNode(); Engine.AddNode(postEffect); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } class MyPostEffectNode : PostEffectNode { const string _HlslCode = @\" struct PS_INPUT { float4 Position : SV_POSITION; float4 Color : COLOR0; float2 UV1 : UV0; float2 UV2 : UV1; }; Texture2D mainTex : register(t0); SamplerState mainSamp : register(s0); float4 main(PS_INPUT input) : SV_TARGET { // 入力画像のUV画像に対応するピクセルの色を取得します。 float4 color = mainTex.Sample(mainSamp, input.UV1); // RGBの値を反転します。 color.xyz = float3(1.0, 1.0, 1.0) - color.xyz; // 算出した値を返します。 return color; }\"; // ポストエフェクトに使用するマテリアル private readonly Material _Material; public MyPostEffectNode() { // マテリアルに使用するシェーダを作成します。 var shader = Shader.Create(\"Negative\", _HlslCode, ShaderStage.Pixel); // スプライトを描画するノードを作成します。 _Material = Material.Create(); // マテリアルにシェーダを割り当てます。 _Material.SetShader(shader); } protected override void Draw(RenderTexture src, Color clearColor) { // マテリアルを入力画像を設定します。 _Material.SetTexture(\"mainTex\", src); // マテリアルを適用します。 Engine.Graphics.CommandList.RenderToRenderTarget(_Material); } } } }"
  },
  "Manual/Graphics/Sprite.html": {
    "href": "Manual/Graphics/Sprite.html",
    "title": "画像 | Altseed2",
    "keywords": "画像 画像を描画するには、 画像を格納する Texture2D Texture2Dを描画する SpriteNode を使用します。 Texture2D 画像情報を格納するクラスです。 Load メソッドを用いて画像ファイルを読み込み Texture2D インスタンスを作成します。 現在、読み込み可能なフォーマットは、以下の通りです。 JPEG PNG TGA BMP PSD GIF HDR PIC PNM Tip フォーマットによっては、アルファチャンネルに対応していない場合があります。 また、 LoadAsync メソッドを用いて、非同期的に画像を読み込むことができます。 非同期読み込みによって、読み込みを待たずに描画処理を行うことができます。 SpriteNode 描画するテクスチャやそれに適用するオプションを設定可能にしたノードです。描画するテクスチャ、そのテクスチャの切り出し範囲、反転描画のフラグなどを設定することができます。 サンプル 画像の描画 using System; using Altseed2; namespace Sample { class Sprite { [STAThread] static void Main(string[] args) { // Altseed2 を初期化します。 if (!Engine.Initialize(\"SpriteNode\", 640, 480)) return; // テクスチャを読み込みます。 var texture = Texture2D.Load(@\"TestData/IO/AltseedPink256.png\"); // スプライトを描画するノードを作成します。 var node = new SpriteNode(); // テクスチャを設定します。 node.Texture = texture; // ノードを登録します。 Engine.AddNode(node); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } }"
  },
  "Manual/Graphics/Text.html": {
    "href": "Manual/Graphics/Text.html",
    "title": "文字 | Altseed2",
    "keywords": "文字 文字を描画するには、 フォントデータを格納する Font Fontを使って文字列を描画する TextNode を使用します。 Font フォント情報を格納するクラスです。 実行時にフォント情報を作成する動的フォントと、事前にフォント情報を作成する静的フォントの二種類があります。 動的フォント メリット 事前に使用する文字を指定せず、必要に応じて文字情報をフォントファイルから読み込んで追加できる。 デメリット 新しい文字を読み込む際に負荷が発生する。 フォントの規約によってはゲームに直接フォントファイルを同梱できない場合が多い。 静的フォント メリット 文字を読み込む負荷が発生しない。 フォントファイルを事前に画像に変換するため、フォントファイルを直接同梱する必要がない。 デメリット 事前に使用したい文字を指定して静的フォントファイルを生成する必要がある。 フォントのサイズ Altseed2 では、フォントの描画に MSDF を利用しています。 Altseed 初代では利用したいフォントサイズごとに Font クラスのインスタンスを作成する必要がありましたが、Altseed2 では読み込み時のサンプリングサイズをある程度大きく指定すれば、好きなサイズでの文字列の描画に利用することができます。 サンプリングサイズとしては、通常は 64 程度、複雑な形状の文字を利用する場合にはそれ以上の値を指定すると良さそうです。 対応フォーマット Freetypeが対応している以下のフォーマットを利用することができます。 TrueType fonts (TTF) and TrueType collections (TTC) CFF fonts WOFF fonts OpenType fonts (OTF, both TrueType and CFF variants) and OpenType collections (OTC) Type 1 fonts (PFA and PFB) CID-keyed Type 1 fonts SFNT-based bitmap fonts, including color Emoji X11 PCF fonts Windows FNT fonts BDF fonts (including anti-aliased ones) PFR fonts Type 42 fonts (limited support) https://www.freetype.org/freetype2/docs/index.html 動的フォント LoadDynamicFont 静的メソッドを用いてフォントファイルを読み込み Font インスタンスを作成します。 // 動的フォントを読み込む (デフォルトのサンプリングサイズは64) var font = Font.LoadDynamicFont(\"path/to/dynamicfont.ttf\"); // サンプリングサイズを指定してフォントファイルを読み込む var fontWithSamplingSize = Font.LoadDynamicFont(\"path/to/dynamicfont.otf\", 96); 静的フォント 静的フォントを使用する場合は、事前にa2fファイルを作成する必要があります。 ツールを利用して生成する（推奨） Altseed2.Tools (.NETツール) を利用して、CLIコマンドまたはGUIを用いて静的フォントを作成することができます。 ソースコード上から生成する Altseed2 から直接呼び出したい場合は、 GenerateFontFile 静的メソッドを利用して、a2fファイルを生成することができます。 その後、 LoadStaticFont 静的メソッドを用いてa2fファイルを読み込み Font インスタンスを作成します。 // 事前に生成したa2fファイルから静的フォントを読み込む var font = Font.LoadStaticFont(\"path/to/staticfont.a2f\"); // コード上から静的フォントを生成したい場合 Font.GenerateFontFile(\"font.ttf\", \"font.a2f\", \"使いたい文字を指定\"); // コード上から静的フォントを生成したい場合（サンプリングサイズの指定） Font.GenerateFontFile(\"font.ttf\", \"font96.a2f\", \"使いたい文字を指定\", 96); a2fファイル font.a2f を出力先として指定した場合、以下のようなファイルとフォルダが生成されます。 font.a2f font/ ├── Texture0.png ├── Texture1.png ├── ... └── TextureN.png このa2fファイルを使いたい場合は、この相対位置を保って font.a2f ファイルと font フォルダを同じフォルダに配置する必要があります。 TextNode 描画する文字列やそれに適用するオプションなどを設定可能にしたノードです。 描画する文字列、文字列の大きさなどを設定することができます。 サンプル 文字の描画 using System; using Altseed2; namespace Sample { public class TextSample { [STAThread] static void Main(string[] args) { // Altseed2 を初期化します。 if (!Engine.Initialize(\"TextNode\", 640, 480)) return; // フォントファイルを読み込みます。 var font = Font.LoadDynamicFont(@\"TestData/Font/mplus-1m-regular.ttf\", 64); // テキストを描画するノードを作成します。 var node = new TextNode(); // フォントを設定します。 node.Font = font; // フォントサイズ node.FontSize = 48; // 描画する文字列を設定します。 node.Text = \"Hello World!\"; // ノードを登録します。 Engine.AddNode(node); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } }"
  },
  "Manual/index.html": {
    "href": "Manual/index.html",
    "title": "Altseed2 機能解説 | Altseed2",
    "keywords": "Altseed2 機能解説"
  },
  "Manual/Input/Cursor.html": {
    "href": "Manual/Input/Cursor.html",
    "title": "カーソル | Altseed2",
    "keywords": "カーソル Cursor は カーソルの画像を設定するためのクラスです。 基本的な使い方 Altseed2の Create を呼び出し、カーソルインスタンスを生成します。 生成したカーソルインスタンスを、Mouseの Create に入れてカーソルをセットすると、カーソル画像が変更されます。 Note ホットスポットとは、カーソルのクリック判定の出る座標のことです。 座標は画像の中の相対座標で指定してください。 画像はホットスポットが中心となります。 Create サンプル using System; using Altseed2; namespace Sample { class MouseCursor { static void Main(string[] args) { // Altseed2 を初期化します。 Engine.Initialize(\"MouseCursor\", 640, 480); // まず、カーソルオブジェクトを生成します。画像の読み込みに失敗するとnullが返ります。 // 引数は、string(png画像のパス), Altseed2.Vector2I(クリック判定の相対座標) です。 var cursor = Cursor.Create(\"../../Core/TestData/Input/altseed_logo.png\", new Vector2I(16, 16)); if (cursor != null) { // マウスにカーソルをセットします。 Engine.Mouse.CursorImage = cursor; } while (Engine.DoEvents()) { Engine.Update(); } Engine.Terminate(); } } } カーソルインスタンスを生成するメソッドです。 第一引数にカーソルの画像、第二引数にホットスポットを指定します。 戻り値は ButtonState です。 画像のロードに失敗したときは null を返します。"
  },
  "Manual/Input/Joystick.html": {
    "href": "Manual/Input/Joystick.html",
    "title": "ジョイスティック | Altseed2",
    "keywords": "ジョイスティック Joystick クラスはジョイスティックコントローラーについての機能を提供します。 コントローラーの検出やコントローラー情報の取得、ボタンやスティックの入力の取得が可能です。 SDL GameControllerDB に対応しているコントローラー（およそ数百種類）では、 JoystickButton や JoystickAxis を利用して抽象化されたコントローラーへのアクセスが可能です。 基本的な呼び出し手順 Altseed2の Initialize を呼び出した後、 Engine.Joystick という形でJoystickの各種メソッドを呼び出してください。 Joystickを接続・取り外しした際には、自動的にインデックスが更新されます。 ジョイスティックの情報の取得 Engine.Joystick.GetJoystickInfo(int joystickIndex) を利用して、指定したインデックスのジョイスティックの情報を取得できます。 返り値は JoystickInfo です。 ジョイスティックが接続されていない場合は null を返します。 JoystickInfo を通して、ジョイスティックの情報を取得できます。 IsGamepad : ジョイスティックがGameControllerDBに登録された製品かどうかを取得できます。 GamepadName : IsGamepad が true の場合にのみ使えます。GameControllerDBに登録された、わかりやすい名前を取得できます。 Name : IsGamepad が false の場合はこちらを利用してください。 また、 Engine.Joystick.IsPresent(int joystickIndex) を利用しても、指定したインデックスにジョイスティックが接続されているかどうかを取得できます。 ボタン入力の取得 ボタンの取得は以下のメソッドを用いて行います。 第一引数に取得したいジョイスティックコントローラーのインデックスを指定します。 戻り値は ButtonState です。 GetButtonState(int joystickIndex, JoystickButton button) 第2引数に JoystickButton を指定します。 JoystickInfo の IsGamepad が true の時のみ利用できます。 GetButtonState(int joystickIndex, int buttonIndex) 第2引数にボタンのインデックスを指定します。 using System; using Altseed2; using System.Linq; namespace Sample { class JoystickButtonSample { static void Main(string[] args) { // Altseed2 を初期化します。 Engine.Initialize(\"JoystickButton\", 640, 480); // 状態を出力するための TextNode を作成します。 // 詳細は TextNode のサンプルを参照してください。 var font = Font.LoadDynamicFont(\"./mplus-1m-regular.ttf\", 64); var textNode = new TextNode(); textNode.Font = font; textNode.FontSize = 20; Engine.AddNode(textNode); while (Engine.DoEvents()) { var displayText = \"\"; var info = Engine.Joystick.GetJoystickInfo(0); // 指定したインデックスのジョイスティックが接続しているかどうかを確認します。 // Joystick.IsPresentも利用できます。(こちらの方が高速) if (info is null) { displayText = \"コントローラーが接続されていません。\\n\"; } else { displayText += $\"コントローラー名: {info.Name}\\n\"; displayText += $\"プロダクトID: {info.Product}\\n\"; displayText += $\"ベンダーID: {info.Vendor}\\n\"; if (info.IsGamepad) { // ゲームパッドとして登録されているJoystickの場合 // Nameよりもわかりやすい名前を取得可能です。 displayText += $\"ゲームパッド名: {info.GamepadName}\\n\"; foreach (var buttonType in Enum.GetValues(typeof(JoystickButton)).Cast<JoystickButton>()) { // ジョイスティックコントローラーのボタン入力を取得します。 // ジョイスティックのインデックスと確認したいジョイスティックボタンを指定します。 // 第一引数: ジョイスティックのインデックス // 第二引数: ジョイスティックボタンの種類(対応しているコントローラーでのみ利用可能) var state = Engine.Joystick.GetButtonState(0, buttonType); var buttonName = buttonType.ToString(); displayText += state switch { ButtonState.Free => $\"{buttonName}が離されています\\n\", ButtonState.Hold => $\"{buttonName}が押されています\\n\", ButtonState.Release => $\"{buttonName}が離されました！\\n\", ButtonState.Push => $\"{buttonName}が押されました！\\n\", _ => $\"{buttonName}が想定されていない状態({(int)state})です\\n\", }; } } else { // ゲームパッドとして登録されていないJoystickの場合 displayText += $\"ゲームパッドとして登録されていません。\\n\"; for (int buttonIndex = 0; buttonIndex < info.ButtonCount; buttonIndex++) { // ジョイスティックコントローラーのボタン入力を取得します。 // ジョイスティックのインデックスと確認したいボタンインデックスを指定します。 // 第一引数: ジョイスティックのインデックス // 第二引数: ジョイスティックのボタンのインデックス var state = Engine.Joystick.GetButtonState(0, buttonIndex); displayText += state switch { ButtonState.Free => $\"{buttonIndex}番目のボタンが離されています\\n\", ButtonState.Hold => $\"{buttonIndex}番目のボタンが押されています\\n\", ButtonState.Release => $\"{buttonIndex}番目のボタンが離されました！\\n\", ButtonState.Push => $\"{buttonIndex}番目のボタンが押されました！\\n\", _ => $\"{buttonIndex}番目のボタンが想定されていない状態({(int)state})です\\n\", }; } } } textNode.Text = displayText; // Altseed2 の各種更新処理を行います。 Engine.Update(); } // Altseedの終了処理をします。 Engine.Terminate(); } } } スティック入力の取得 スティックの取得には以下のメソッドを用います。 第一引数に取得したいジョイスティックコントローラーのインデックスを指定します。 戻り値は-1から1の間のfloatです。 取得できる値は、左右スティックの水平方向(LeftX, RightX), 垂直方向(LeftY, RightY)、左右のトリガー(LeftTrigger, RightTrigger)です。 GetAxisState(int joystickIndex, JoystickAxis axis) 第２引数に JoystickAxis を指定します。 JoystickInfo の IsGamepad が true の時のみ利用できます。 GetAxisState(int joystickIndex, int axisIndex) 第２引数にスティックのインデックスを指定します。 using System; using Altseed2; using System.Linq; namespace Sample { class JoystickAxisSample { static void Main(string[] args) { // Altseed2 を初期化します。 Engine.Initialize(\"JoystickAxis\", 640, 480); // 状態を出力するための TextNode を作成します。 // 詳細は TextNode のサンプルを参照してください。 var font = Font.LoadDynamicFont(\"./mplus-1m-regular.ttf\", 64); var textNode = new TextNode(); textNode.Font = font; textNode.FontSize = 30; Engine.AddNode(textNode); // ゲームのメインループ while (Engine.DoEvents()) { var displayText = \"\"; var info = Engine.Joystick.GetJoystickInfo(0); if (info is null) { displayText = \"コントローラーが接続されていません。\\n\"; } else { displayText += $\"コントローラー名: {info.Name}\\n\"; displayText += $\"プロダクトID: {info.Product}\\n\"; displayText += $\"ベンダーID: {info.Vendor}\\n\"; if (info.IsGamepad) { // ゲームパッドとして登録されているJoystickの場合 displayText += $\"ゲームパッド名: {info.GamepadName}\\n\"; foreach (var axisType in Enum.GetValues(typeof(JoystickAxis)).Cast<JoystickAxis>()) { // ジョイスティックコントローラーの軸入力を取得します。 // ジョイスティックのインデックスと確認したい軸の種類を指定します。 // 第一引数: ジョイスティックのインデックス // 第二引数: ジョイスティック軸の種類(対応しているコントローラーでのみ利用可能) var state = Engine.Joystick.GetAxisState(0, axisType); displayText += $\"{axisType} : {state} \\n\"; } } else { // ゲームパッドとして登録されていないJoystickの場合 displayText += $\"ゲームパッドとして登録されていません。\\n\"; for (int axisIndex = 0; axisIndex < info.AxisCount; axisIndex++) { // ジョイスティックコントローラーの軸入力を取得します。 // ジョイスティックのインデックスと確認したい軸のインデックスを指定します。 // 第一引数: ジョイスティックのインデックス // 第二引数: ジョイスティックの軸のインデックス var state = Engine.Joystick.GetAxisState(0, axisIndex); displayText += $\"{axisIndex}番目のスティック : {state} \\n\"; } } } textNode.Text = displayText; // Altseed2 の各種更新処理を行います。 Engine.Update(); } // Altseedの終了処理をします。 Engine.Terminate(); } } } <!-- ## 振動 サンプル [!code-csharp[Main](../../Src/Samples/Input/JoystickVibrate.cs)] ジョイスティックコントローラーを振動させるには以下のメソッドを使用します。 * [Vibrate](xref:Altseed2.Joystick.Vibrate(System.Int32,System.Single,System.Single)) 第1引数は振動させたいジョイスティックコントローラーのインデックスです。 第2引数では振動の周波数を指定します。(40.0 ~ 1252.0) 第3引数では振動の振幅を指定します。(0.0 ~ 1.0) 一度このメソッドを実行すると、5秒程度コントローラーが振動します。 > [!TIP] > 振動をキャンセルしたい場合は、振幅に0を指定してこのメソッドを実行してください。 [!CAUTION] * 周波数は 40.0 から 1252.0 の間に収めてください。これを超える範囲の値は、前述の範囲内の一番近い値に書き換えられます。 * 振幅は 0.0 から 1.0 の範囲内に収めてください。これを超える範囲の値は、前述の範囲内に一番近い値に書き換えられます。 -->"
  },
  "Manual/Input/Keyboard.html": {
    "href": "Manual/Input/Keyboard.html",
    "title": "キーボード | Altseed2",
    "keywords": "キーボード Keyboard は キーボード入力に関する機能を提供します。 Keyboard Keyboard では次の機能を提供します。 キーボード入力の取得 基本的な呼び出し手順 Altseed2の Initialize を呼び出した後、Engine.Keyboard という形でKeyboardの各種メソッドを呼び出してください。 キー入力 サンプル using System; using Altseed2; namespace Sample { class Keyboard { static void Main(string[] args) { // Altseed2 を初期化します。 Engine.Initialize(\"Keyboard\", 640, 480); // 状態を出力するための TextNode を作成します。 // 詳細は TextNode のサンプルを参照してください。 var font = Font.LoadDynamicFont(\"./mplus-1m-regular.ttf\", 64); var textNode = new TextNode(); textNode.Font = font; textNode.FontSize = 40; while (Engine.DoEvents()) { var zState = Engine.Keyboard.GetKeyState(Key.Z); // Zキーが押されているかどうかを取得します。 if (zState == ButtonState.Free) { textNode.Text = \"Zキーを離しています。\"; } else if (zState == ButtonState.Hold) { textNode.Text = \"Zキーを押しています。\"; } else if (zState == ButtonState.Push) { textNode.Text = \"Zキーを押しました！\"; } else if (zState == ButtonState.Release) { textNode.Text = \"Zキーを離しました！\"; } Engine.Update(); } Engine.Terminate(); } } } カーソルの座標の取得・設定は以下のプロパティを通して行います。 GetKeyState 戻り値は ButtonState です。 CursorMode Normal ... デフォルト値 Hidden ... カーソル非表示の状態 Disable ... カーソルの入力が無効の状態。カーソルがウィンドウ中央にロックされます。"
  },
  "Manual/Input/Mouse.html": {
    "href": "Manual/Input/Mouse.html",
    "title": "マウス | Altseed2",
    "keywords": "マウス Mouse は マウス入力に関する基本的な機能を提供します。 Mouse Mouse では次の機能を提供します。 マウスカーソルの座標を取得・設定 マウスボタンの状態を取得 マウスホイールの回転量を取得を取得 カーソルモードの取得または設定 基本的な呼び出し手順 Altseed2の Initialize を呼び出した後、Engine.Mouse という形でMouseの各種メソッドを呼び出してください。 Note MouseButton や ButtonState は Mouseには含まれていません。 カーソル座標 サンプル using System; using Altseed2; namespace Sample { class Mouse { static void Main(string[] args) { // Altseed2 を初期化します。 Engine.Initialize(\"Mouse\", 640, 480); // 状態を出力するための TextNode を作成します。 // 詳細は TextNode のサンプルを参照してください。 var font = Font.LoadDynamicFont(\"./mplus-1m-regular.ttf\", 64); var textNode = new TextNode(); textNode.Font = font; textNode.FontSize = 40; Engine.AddNode(textNode); while (Engine.DoEvents()) { // マウスの左ボタンが押されているかどうかを取得します。 if (Engine.Mouse.GetMouseButtonState(MouseButton.ButtonLeft) == ButtonState.Hold) { textNode.Text = \"左ボタンが押されています。\"; } else { textNode.Text = \"左ボタンが押されていません。\"; } // マウスの座標を取得します。 Vector2F position = Engine.Mouse.Position; textNode.Text += $\"\\nポジション(x/y): {position.X} / {position.Y}\"; // マウスホイールの値を取得します。 textNode.Text += $\"\\nホイール : {Engine.Mouse.Wheel}\"; // マウスモードを取得します。 textNode.Text += $\"\\nモード : {Engine.Mouse.CursorMode}\"; Engine.Update(); } Engine.Terminate(); } } } カーソルの座標の取得・設定は以下のプロパティを通して行います。 [Position](xref:Altseed2.Mouse.Position 戻り値は Vector2F です。 マウスボタン サンプル using System; using Altseed2; namespace Sample { class Mouse { static void Main(string[] args) { // Altseed2 を初期化します。 Engine.Initialize(\"Mouse\", 640, 480); // 状態を出力するための TextNode を作成します。 // 詳細は TextNode のサンプルを参照してください。 var font = Font.LoadDynamicFont(\"./mplus-1m-regular.ttf\", 64); var textNode = new TextNode(); textNode.Font = font; textNode.FontSize = 40; Engine.AddNode(textNode); while (Engine.DoEvents()) { // マウスの左ボタンが押されているかどうかを取得します。 if (Engine.Mouse.GetMouseButtonState(MouseButton.ButtonLeft) == ButtonState.Hold) { textNode.Text = \"左ボタンが押されています。\"; } else { textNode.Text = \"左ボタンが押されていません。\"; } // マウスの座標を取得します。 Vector2F position = Engine.Mouse.Position; textNode.Text += $\"\\nポジション(x/y): {position.X} / {position.Y}\"; // マウスホイールの値を取得します。 textNode.Text += $\"\\nホイール : {Engine.Mouse.Wheel}\"; // マウスモードを取得します。 textNode.Text += $\"\\nモード : {Engine.Mouse.CursorMode}\"; Engine.Update(); } Engine.Terminate(); } } } スティックの取得には以下のメソッドを用います。 GetMouseButtonState 戻り値は ButtonState です。 マウスホイール サンプル using System; using Altseed2; namespace Sample { class Mouse { static void Main(string[] args) { // Altseed2 を初期化します。 Engine.Initialize(\"Mouse\", 640, 480); // 状態を出力するための TextNode を作成します。 // 詳細は TextNode のサンプルを参照してください。 var font = Font.LoadDynamicFont(\"./mplus-1m-regular.ttf\", 64); var textNode = new TextNode(); textNode.Font = font; textNode.FontSize = 40; Engine.AddNode(textNode); while (Engine.DoEvents()) { // マウスの左ボタンが押されているかどうかを取得します。 if (Engine.Mouse.GetMouseButtonState(MouseButton.ButtonLeft) == ButtonState.Hold) { textNode.Text = \"左ボタンが押されています。\"; } else { textNode.Text = \"左ボタンが押されていません。\"; } // マウスの座標を取得します。 Vector2F position = Engine.Mouse.Position; textNode.Text += $\"\\nポジション(x/y): {position.X} / {position.Y}\"; // マウスホイールの値を取得します。 textNode.Text += $\"\\nホイール : {Engine.Mouse.Wheel}\"; // マウスモードを取得します。 textNode.Text += $\"\\nモード : {Engine.Mouse.CursorMode}\"; Engine.Update(); } Engine.Terminate(); } } } マウスホイールの回転量を取得するには以下のプロパティを使用します。 Wheel 戻り値は-1~1の範囲の float です。 カーソルモード CursorModeを取得・設定するには、以下のプロパティを使用します。 CursorMode カーソルモードの設定は CursorMode の中から行ってください。 CursorMode Normal ... デフォルト値 Hidden ... カーソル非表示の状態 Disable ... カーソルの入力が無効の状態。カーソルがウィンドウ中央にロックされます。 カーソル画像 カーソル画像を指定するには、以下のメソッドを使います。 SetCursorImage 第一引数に、設定したい画像を読み込んだ カーソル オブジェクトを渡します。"
  },
  "Manual/Log/Log.html": {
    "href": "Manual/Log/Log.html",
    "title": "ログ | Altseed2",
    "keywords": "ログ Log クラスは、コンソールやファイルにログを出力する機能です。 Altseedの内部で発生したエラーなどはこの機能でコンソールやファイルへ出力されます。 以下のように記述して使用します。 Engine.Debug(LogCategory.User, \"\"); LogLevel 列挙体の名前に応じたメソッドが用意されています。 Log クラスの SetLevel メソッドを利用して、 LogCategory 別にログを出力時の最低レベルを指定することができます。 コンソールへのログやファイルへのログを有効化するには、 Engine の初期化時に渡す Configuration のプロパティを指定します。 ConsoleLoggingEnabled : コンソールへのログ出力を有効にするかどうか FileLoggingEnabled : ファイルへのログ出力を有効にするかどうか LogFileName : ログ出力する際のファイル名"
  },
  "Manual/Media/MediaPlayer.html": {
    "href": "Manual/Media/MediaPlayer.html",
    "title": "MediaPlayer | Altseed2",
    "keywords": "MediaPlayer MediaPlayer クラスは、映像を再生する機能です。 h264の映像を読み込み、テクスチャに出力します。 パッケージ機能には対応しておらず、映像はパッケージの外に置く必要があります。 以下のように記述して映像を出力します。 using System; using Altseed2; namespace Sample { class Movie { [STAThread] static void Main(string[] args) { // Altseed2 を初期化します。 if (!Engine.Initialize(\"Movie\", 640, 480)) return; // 空のテクスチャを読み込みます。 var texture = RenderTexture.Create(new Vector2I(640, 480), TextureFormat.R8G8B8A8_UNORM); // 映像を読み込みます。 var mediaPlayer = MediaPlayer.Load(@\"TestData/Movie/Test1.mp4\"); // 映像を再生します。 mediaPlayer.Play(false); // スプライトを描画するノードを作成します。 var node = new SpriteNode(); // テクスチャを設定します。 node.Texture = texture; // ノードを登録します。 Engine.AddNode(node); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // 現在の映像を画像に書き込みます。 mediaPlayer.WriteToRenderTexture(texture); // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } }"
  },
  "Manual/Node.html": {
    "href": "Manual/Node.html",
    "title": "ノード | Altseed2",
    "keywords": "ノード Altseed2では、ゲームに登場する キャラクター等のオブジェクト 、及び オブジェクトが持つ機能 等をノードとして管理します。 例えばゲームに画像を表示する際には、描画機能を持ったノード( SpriteNode )をエンジンに追加します。 ノードは親子関係の階層構造を持ちます。また、ノードはエンジンに実装されているものを使うだけでなく、独自に継承・拡張して利用することができます。 Note 初代Altseedにおけるシーンやレイヤーはノード機能にまとめられました。 同様の感覚で利用したい場合、Nodeクラスを継承したSceneクラスやLayerクラスを自作すると良いでしょう。 また、Unity等でも用いられているコンポーネントの機能もノードによって実現できます。 Tip 便宜上ノードの追加・削除という表現をしていますが、ノードインスタンスの作成・削除とは直接関係が有りません。 必要に応じて、登録・登録解除と読み替えてください。 Node Node は全てのノードの基本です。全てのノードはこのNodeを継承する必要があります（もちろん SpriteNode 等のNodeを継承したクラスをさらに継承しても構いません）。 使い道は主に以下の二つです。 ノードを自作する場合に、継承して使う。 複数のノードをまとめて管理したい場合に、親ノードとして利用する。 エンジンへの追加は Engine.AddNode メソッドを使います。逆に削除したい場合は、 Engine.RemoveNode メソッドを使います。 親子関係の追加・削除も同様に、 AddChildNode メソッド、 RemoveChildNode メソッドを使います。 Important ノードは作成だけしても、エンジンに登録されていなければ 更新されません 。 また、親ノードがエンジンに追加されている場合、子ノードも自動的に更新対象になります。 Note Nodeを新たに追加しても、親子構造が反映されるのは次の更新処理時（＝1フレーム後）になります。 サンプル Nodeの作成と親子関係の構築 <!-- [!code-csharp[Main](../../Src/Samples/CreatingNode.cs)] -->"
  },
  "Manual/Physics/Collision.html": {
    "href": "Manual/Physics/Collision.html",
    "title": "衝突判定 | Altseed2",
    "keywords": "衝突判定 Altseed2では物理演算を用いて，2Dの衝突判定を行う機構が備わっています。 Collider クラス Collider クラスは自身のメンバの情報をもとに他 Collider のインスタンスとの衝突の有無を判定します。 Collider と衝突判定の種類は以下の通りです。 Collider 衝突判定のタイプ 使用するメンバ CircleCollider 円形 中心 ， 半径 PolygonCollider 多角形 各頂点の座標 RectangleCollider 短形 左上の座標 ， サイズ(縦・横) EdgeCollider 線分 端点1 ， 端点2 Collider との衝突判定は GetIsCollidedWith(Collider) メソッドを使用します。 指定したコライダと衝突していたらtrue，衝突していなかったらfalseを返します。 ColliderNode クラスと CollisionManagerNode クラス この2つのクラスによって，コライダの衝突判定を自動で行う事が出来ます。 ColliderNode クラス このクラスは Collider クラスを内部に持っています。 また，この派生クラスに CircleColliderNode ， PolygonColliderNode ， RectangleColliderNode , EdgeColliderNode クラスがあり，それぞれ CircleCollider ， PolygonCollider ， RectangleCollider , EdgeCollider クラスのインスタンスを内部に持っています。 これらのクラスのプロパティを通して，内部コライダのメンバの操作を行う事が出来ます。 Important このクラスは，衝突判定を行いたいノード(シューティングゲームで言う自機や弾となるノード)の 子ノードとして 使用される必要があります。 CollisionManagerNode クラス このクラスでは ColliderNode クラスのインスタンスが自動的に登録され， GetIsCollidedWith(Collider) メソッドを自動的に実行します。 Tip GetIsCollidedWith(Collider) メソッドによる衝突判定は，同じ ColliderNode の組み合わせに対して1フレームにつき1度しか行われません。 Important このクラスは衝突判定を行いたいノードの 親ノードの子として 使用される必要があります。 また，1つのノードに対して， CollisionManagerNode クラスのインスタンスは1つしか子として持つ事が出来ません。(登録しようとした場合は例外がスローされます。) 実装の形式 ColliderNode クラスと CollisionManagerNode クラスはそれぞれ以下の図のような関係でなければなりません。 Caution ColliderNode の自動登録には，シーンとなるノードに対して， CollisionManagerNode が子ノードであり，かつ ColliderNode が孫ノードである 事が重要です。 それ以外の場合における ColliderNode の自動的な追加/削除は発生しません。 Note 衝突判定を行うノードが ICollisionEventReceiver インターフェイスを実装している場合， 衝突の開始 衝突の継続 衝突の終了 においてそれぞれ対応したメソッドが呼び出されます。 以上の点を踏まえた実装は以下のサンプルコードの通りです。 using Altseed2; using System; namespace Sample { class Collision { static void Main(string[] args) { // Altseed2 を初期化します。 Engine.Initialize(\"Collision\", 640, 480); // 衝突判定が行われるノードの親ノードを作成します。 var scene = new Node(); // コライダを自動処理するノードをシーンに登録します。 scene.AddChildNode(new CollisionManagerNode()); // 衝突判定を持つスプライトノードを生成します。 var node1 = new CollidableSprite() { Position = new Vector2F(0, 100) }; // 衝突時のイベントを実行する衝突判定を持つスプライトノードを生成します。 var node2 = new EventRaisedCollidableSprite() { Position = new Vector2F(300, 100) }; // エンジンにノードを追加します。 scene.AddChildNode(node1); scene.AddChildNode(node2); Engine.AddNode(scene); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // 右側に移動させる node1.Position += new Vector2F(5, 0); // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } // 衝突判定が行われるノードのクラス class CollidableSprite : SpriteNode { // 円形コライダを持つノード private readonly CircleColliderNode colliderNode = new CircleColliderNode(); // コンストラクタ public CollidableSprite() { // テクスチャを読み込みます。 Texture = Texture2D.Load(@\"TestData/IO/AltseedPink256.png\"); // 半径を設定します。 colliderNode.Radius = Texture.Size.X / 2; // 中心を設定します。 CenterPosition = Texture.Size / 2; // コライダを登録します。 AddChildNode(colliderNode); } } // 衝突時の内容を実装できるクラス class EventRaisedCollidableSprite : CollidableSprite, ICollisionEventReceiver { // 衝突が開始された時に実行されます。 void ICollisionEventReceiver.OnCollisionEnter(CollisionInfo info) { Color = new Color(255, 50, 50); } // 衝突が継続している時に実行されます。 void ICollisionEventReceiver.OnCollisionStay(CollisionInfo info) { Angle++; } // 衝突が解除された時に実行されます。 void ICollisionEventReceiver.OnCollisionExit(CollisionInfo info) { Color = new Color(255, 255, 255); } } } 結果 衝突を開始したときに色が赤くなり，以降衝突している間回転します。 衝突終了時には色が戻ります。 衝突範囲の描画 ColliderVisualizeNodeFactory.Create(ColliderNode) を使用することで，衝突領域を描画できるノードを取得できます。 Important 得られたノードを， Node.AddChildNode(Node) で登録しなければ衝突判定の視覚化は行われません。 生成元の ColliderNode を CollisionManagerNode の子にすることで，描画範囲を衝突範囲に同期することが出来ます。 Caution 衝突範囲の描画の同期は，元となる ColliderNode が CollisionManagerNode の管理下にある必要があります。 使い方は以下のサンプルコードを参考にしてください。 using Altseed2; namespace Sample { class ColliderVisualization { static void Main(string[] args) { // Altseed2 を初期化します。 Engine.Initialize(\"Collision\", 640, 480); // 衝突判定が行われるノードの親ノードを作成します。 var scene = new Node(); // コライダを自動処理するノードをシーンに登録します。 scene.AddChildNode(new CollisionManagerNode()); // 衝突判定を持つSpriteNodeを生成します。 var texture = Texture2D.Load(@\"TestData/IO/AltseedPink256.png\"); var sprite = new SpriteNode() { Position = new Vector2F(200f, 200f), Scale = new Vector2F(0.5f, 0.5f), Texture = texture, CenterPosition = texture.Size / 2, }; // 円形コライダノードを生成します。 var collider = new CircleColliderNode() { Radius = texture.Size.X / 2, }; // colliderの衝突判定を視覚化できるノードを生成します。 var visualizer = ColliderVisualizeNodeFactory.Create(collider); // エンジンにノードを追加します。 scene.AddChildNode(sprite); sprite.AddChildNode(collider); collider.AddChildNode(visualizer); Engine.AddNode(scene); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } } このコードを実行すると以下のように円形の当たり判定が赤色で示されます。"
  },
  "Manual/Profiler/Profiler.html": {
    "href": "Manual/Profiler/Profiler.html",
    "title": "プロファイラ | Altseed2",
    "keywords": "プロファイラ Profiler クラスは、処理時間を測定する機能です。 指定した範囲の処理が実行された時間及びタイミングを取得します。 この機能は easy_profiler を使用します。 以下のように記述して情報を出力します。 Engine.Profiler.StartCapture(); { using var block1 = new ProfilerBlock(\"Block1\", new Color(255, 0, 0)); System.Threading.Thread.Sleep(500); { using var block2 = new ProfilerBlock(\"Block2\", new Color(0, 255, 0)); System.Threading.Thread.Sleep(500); } } Engine.Profiler.DumpToFileAndStopCapture(\"Profiler.prof\"); それをeasy_profilerのReleaseからエディタをダウンロードし、出力されたファイルを読み込みます。 ファイルに出力しなくとも、リモートからネットワーク経由で情報を取得することもできます。 以下のコードでネットワークを有効にし、easy_profilerのエディタから接続します。 Engine.Profiler.StartListen(28077);"
  },
  "Manual/Serialization/Serialization.html": {
    "href": "Manual/Serialization/Serialization.html",
    "title": "シリアライズ | Altseed2",
    "keywords": "シリアライズ Altseed2では一部を除き，殆どのクラス・構造体がバイナリシリアライズに対応しています。 Warning XMLシリアライズやJsonシリアライズには対応していません。 Important Altseed2のバージョンが変わってシリアライズ内容やフィールド情報が変わった場合，デシリアライズに失敗する可能性があります。 Altseed2のバージョンを差し替えるときはご注意ください。 シリアライズ非対応のクラス 以下のクラスはシリアライズに対応していません。 これらは Engine クラスにてシングルトンとしてインスタンスが提供されているクラスです。 BuiltinShader CommandList Easing File Glyph Graphics JoyStick JoyStickInfo KeyBoard Log Mouse SoundMixer Tool 使い道 Altseed2を用いたアプリケーションを制作する際にデータの保存や読み込み UIのノードを予め作っておいて読み込む 等があります。 サンプル(シリアライズの手順) シリアライズには System.Runtime.Serialization.Formatters.Binary.BinaryFormatter を使用します。 以下に， StaticFile のシリアライズを例にシリアライズ/デシリアライズの手順を示します。 using System; using System.IO; using System.Runtime.Serialization.Formatters.Binary; using System.Text; using Altseed2; namespace Sample { class Serialization { [STAThread] static void Main(string[] args) { // Altseed2 を初期化します。 if (!Engine.Initialize(\"Serialization\", 640, 480)) return; // シリアライズ結果を保存するファイルのパス var path = \"SerializeSample.bin\"; // StaticFileを生成。 var file1 = StaticFile.Create(@\"TestData/IO/test.txt\"); // fileをシリアライズします。 Serialize(path, file1); // シリアライズされたfileをデシリアライズします。 var file2 = (StaticFile)DeSerialize(path); // バイト配列をUTF8として、string型に変換します。 var text1 = Encoding.UTF8.GetString(file1.Buffer); var text2 = Encoding.UTF8.GetString(file2.Buffer); // テキストをコンソールに出力します。 Console.WriteLine(\"text1 : {0}\", text1); Console.WriteLine(\"text2 : {0}\", text2); // Altseed の終了処理をします。 Engine.Terminate(); } // シリアライズを行うメソッド static void Serialize(string path, object value) { // バイナリシリアライズに使用するフォーマッターを生成。 var formatter = new BinaryFormatter(); // シリアライズに使用するストリームを生成。 using var stream = new FileStream(path, FileMode.Create); // valueをシリアライズする。 formatter.Serialize(stream, value); } // デシリアライズを行うメソッド static object DeSerialize(string path) { // バイナリデシリアライズに使用するフォーマッターを生成。 var formatter = new BinaryFormatter(); // デシリアライズに使用するストリームを生成。 using var stream = new FileStream(path, FileMode.Open); // デシリアライズを実行 var result = formatter.Deserialize(stream); // デシリアライズの結果を返す。 return result; } } } 結果は以下のようになります。 text1 : Test text2 : Test"
  },
  "Manual/ShapeNode/ShapeNode.html": {
    "href": "Manual/ShapeNode/ShapeNode.html",
    "title": "図形ノード | Altseed2",
    "keywords": "図形ノード Altseed2には図形を描画するノードが存在します。 描画できる図形は円弧，円，直線，短形，三角形があります。 円の描画 円の描画は CircleNode で行う事が出来ます。 設定できる情報と対応するプロパティは以下の通りです。 設定できる情報 対応するプロパティ 備考 中心座標 Position 半径 Radius 頂点の数 VertNum 3以上にしなければならない。 VertNum を調整する事で，三角形や五角形など正多角形を描画出来ます。 円にしたければ頂点の数を増やすと良いでしょう。 円弧の描画 円弧の描画は ArcNode で行う事が出来ます。 ArcNode では CircleNode の内容に加えて，描画をする角度の範囲を設定できます。 設定できる情報と対応するプロパティは以下の通りです。 設定できる情報 対応するプロパティ 備考 中心座標 Position 半径 Radius 頂点の数 VertNum 3以上にしなければならない。 描画開始角度 StartDegree 描画終了角度 EndDegree Note StartDegree と EndDegree の値はそれぞれ-360～360の間に自動的に修正されます， その差も360までに自動的に修正されます。 StartDegree と EndDegree の大小に指定はありません。 直線の描画 直線の描画は LineNode で行う事が出来ます。 設定できる情報と対応するプロパティは以下の通りです。 設定できる情報 対応するプロパティ 端点1 Point1 端点2 Point2 太さ Thickness 短形の描画 短形の描画は RectangleNode で行う事が出来ます。 設定できる情報と対応するプロパティは以下の通りです。 設定できる情報 対応するプロパティ 備考 左上頂点の座標 Position サイズ RectangleSize Texture.Sizeに関係なくこのプロパティの値で決定。 三角形の描画 三角形の描画は TriangleNode で行う事が出来ます。 設定できる情報と対応するプロパティは以下の通りです。 設定できる情報 対応するプロパティ 頂点1 Point1 頂点2 Point2 頂点3 Point3 サンプルコード サンプルコードは以下の通りです。 using Altseed2; namespace Sample { class ShapeNode { static void Main(string[] args) { // Altseed2 を初期化します。 Engine.Initialize(\"ShapeNode\", 640, 480); // 円を描画するノード var circle = new CircleNode() { Color = new Color(255, 100, 100), Radius = 30f, Position = new Vector2F(100f, 300f), VertNum = 30 }; // 円弧を描画するノード var arc = new ArcNode() { Color = new Color(100, 255, 100), Radius = 25f, Position = new Vector2F(300f, 100f), StartDegree = 30f, EndDegree = 150f, VertNum = 30 }; // 直線を描画するノード var line = new LineNode() { Color = new Color(100, 100, 255), Point1 = new Vector2F(200f, 150f), Point2 = new Vector2F(400f, 350f), Thickness = 5f }; // 短形を描画するノード var rectangle = new RectangleNode() { Color = new Color(255, 255, 100), Position = new Vector2F(300f, 400f), RectangleSize = new Vector2F(50f, 50f) }; // 三角形を描画するノード var triangle = new TriangleNode() { Color = new Color(255, 100, 255), Point1 = new Vector2F(50f, 50f), Point2 = new Vector2F(100f, 50f), Point3 = new Vector2F(50f, 100f), }; // エンジンにノードを追加します。 Engine.AddNode(circle); Engine.AddNode(arc); Engine.AddNode(line); Engine.AddNode(rectangle); Engine.AddNode(triangle); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseed を更新します。 Engine.Update(); } // Altseed の終了処理をします。 Engine.Terminate(); } } } これを実行するとこのように図形が描画されます。"
  },
  "Manual/Sound/Sound.html": {
    "href": "Manual/Sound/Sound.html",
    "title": "サウンド | Altseed2",
    "keywords": "サウンド サウンドを再生するには、 Load メソッドを用いてサウンドファイルを読み込み Sound インスタンスを作成します。次に Engine.Sound.Play メソッドを用いて Sound インスタンスを再生します。 このとき返される ID や、ID を用いて再生中のサウンドを操作する機能について解説します。 Sound Sound はサウンドファイルを読み込んで生成される音源の情報を表すデータです。 サウンドファイルを読み込んで Sound インスタンスを生成するには Load メソッドを使います。 この時、事前に音のデータを解凍するかどうかを指定できます。 OGG等のフォーマットでは、音のデータが圧縮された状態で格納されているため、音を再生前にデータを解凍しなければなりません。 読み込み時に音のデータを解凍しなかった場合、再生しながらリアルタイムに解凍することになります。 Important 音のデータをを事前に解凍するか、再生中にリアルタイムに解凍するかによって、消費するメモリやCPUへの負荷が異なります。 事前に解凍する場合、読み込み時間は長くなりメモリも消費しますが再生時のCPUへの負荷は小さくなります。 一方、再生中にリアルタイムに解凍する場合は、読み込み時間もメモリも小さくなりますが、再生時に若干CPUの処理を必要とします。 基本的に、音が長い BGMは圧縮したまま 、音が短くたくさん鳴らす 効果音は事前に解凍 して読み込みます。 サウンドはループさせることが可能です。サウンドをループさせるには IsLoopingMode を true にします。 ループする範囲は LoopStartingPoint や LoopEndPoint を設定することでを設定でき、 ループする範囲を設定していない場合、音を最後まで再生したら最初に戻ってループします。 LoopStartingPoint や LoopEndPoint を設定すると、先頭から音を再生し、 LoopEndPoint に到達したら LoopStartingPoint の位置に戻ることを繰り返します。 SoundMixer 音の再生・停止・その他操作を行う機能を提供します。音を再生する際に使用します。 音を再生するには Play メソッドを使用します。このメソッドを実行すると、再生される音に対応するIDが返されます。 SoundMixer クラスの各メソッドに、このIDを渡すことで再生されている音に対して操作をすることができます。 SoundMixer クラスで行える操作は次の通りです。 音の停止・一時停止・再開 音量の変更・フェードイン/アウト 再生速度・パン位置・再生位置の取得・変更 スペクトル情報の取得 Tip Altseedでは、再生されている音に対する操作をIDを通して行っています。これは、音のデータそのものとは別に、音の再生情報に関するデータを管理するためです。 音のデータが再生情報を含んでいる場合、同じ音を二重に再生することができません。 Tip BGMなどを除き、再生中に停止などの操作を行うことは稀です。そのため再生の度に、再生情報を含むインスタンスを生成することは無駄が大きいため、都度IDを用いて操作する仕組みになっています。 スペクトル情報の取得 SoundMixer クラスにはメディアアートのための機能として、スペクトルアナライザが実装されています。 GetSpectrumData メソッドを使用することで、再生中の音声のスペクトル情報を取得し、それを使って独自のサウンドビジュアライザを作ることができます。 Tip 音は波としての性質を持ちます。スペクトルアナライザでは、その波のデータに対して、どの周波数の成分の波形がどれくらいの量含まれているかを解析します。解析する手法としてフーリエ変換が用いられています。 サンプル 効果音の再生 using System; using Altseed2; namespace Sample { class SoundSE { static void Main(string[] args) { // Altseed2 を初期化します。 Engine.Initialize(\"Sound_SE\", 640, 480); // 音ファイルを読み込みます。 // 効果音の場合は第2引数を true に設定して事前にファイルを解凍することが推奨されている。 var se = Sound.Load(@\"TestData\\Sound\\se1.wav\", true); // 音を再生します。 var id = Engine.Sound.Play(se); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseedを更新します。 Engine.Update(); // 音の再生が終了しているか調べる。 if (!Engine.Sound.GetIsPlaying(id)) { break; } } // Altseed の終了処理をします。 Engine.Terminate(); } } } BGMの再生 using System; using Altseed2; namespace Sample { class SoundBGM { static void Main(string[] args) { // Altseed2 を初期化します。 Engine.Initialize(\"Sound_BGM\", 640, 480); // 音ファイルを読み込みます。 // 効果音の場合は第2引数を true に設定して再生しながら解凍することが推奨されている。 var bgm = Sound.Load(@\"TestData\\Sound\\bgm1.ogg\", false); // 音を再生します。 var id = Engine.Sound.Play(bgm); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseedを更新します。 Engine.Update(); // 音の再生が終了しているか調べる。 if (!Engine.Sound.GetIsPlaying(id)) { break; } } // Altseed の終了処理をします。 Engine.Terminate(); } } } BGMのループ再生 using System; using Altseed2; namespace Sample { class SoundLoop { static void Main(string[] args) { // Altseed2 を初期化します。 Engine.Initialize(\"Sound_Loop\", 640, 480); // 音ファイルを読み込みます。 // 効果音の場合は第2引数を true に設定して再生しながら解凍することが推奨されている。 var bgm = Sound.Load(@\"TestData\\Sound\\bgm1.ogg\", false); // 音のループモードを有効にします。 bgm.IsLoopingMode = true; // ループの始端を1秒に、終端を2.5秒にします。 bgm.LoopStartingPoint = 1.0f; bgm.LoopEndPoint = 2.5f; // 音を再生します。 var id = Engine.Sound.Play(bgm); // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseedを更新します。 Engine.Update(); // 音の再生が終了しているか調べる。 if (!Engine.Sound.GetIsPlaying(id)) { break; } } // Altseed の終了処理をします。 Engine.Terminate(); } } } スペクトル情報の取得 using System; using Altseed2; namespace Sample { class SoundSpectrum { static void Main(string[] args) { // Altseed2 を初期化します。 Engine.Initialize(\"Sound_BGM\", 640, 480); // 音ファイルを読み込みます。 // 効果音の場合は第2引数を true に設定して再生しながら解凍することが推奨されている。 var bgm = Sound.Load(@\"TestData\\Sound\\bgm1.ogg\", false); // 音を再生します。 var id = Engine.Sound.Play(bgm); // スペクトルバーのインスタンスを1024個作成します。 var spectrumBars = new PolygonNode[1024]; for (int i = 0; i < 1024; ++i) { // ※ 640 / 1024 = 0.625 var spectrumBar = new PolygonNode(); spectrumBar.Position = new Vector2F(i * 0.625f, 1.0f); Span<Vector2F> vertexes = stackalloc Vector2F[4] { new Vector2F(0.0f, 480.0f), new Vector2F(0.0f, 480.0f), new Vector2F(0.625f, 480.0f), new Vector2F(0.625f, 480.0f), }; spectrumBar.SetVertexes(vertexes, new Color(255, 255, 255)); spectrumBars[i] = spectrumBar; Engine.AddNode(spectrumBar); } // メインループ。 // Altseed のウインドウが閉じられると終了します。 while (Engine.DoEvents()) { // Altseedを更新します。 Engine.Update(); // 再生されている音のスペクトル情報を取得します。 // データの長さは2のn乗でなくてはなりません。 var spectrum = Engine.Sound.GetSpectrum(id, 1024, FFTWindow.Rectangular); // 取得したスペクトル情報をスペクトルバーに反映させます。 for (int i = 0; i < 1024; ++i) { Span<Vector2F> vertexes = stackalloc Vector2F[] { new Vector2F(0.0f, 480.0f), new Vector2F(0.0f, 480.0f - spectrum[i]), new Vector2F(0.625f, 480.0f - spectrum[i]), new Vector2F(0.625f, 480.0f), }; spectrumBars[i].SetVertexes(vertexes, new Color(255, 255, 255)); } // 音の再生が終了しているか調べる。 if (!Engine.Sound.GetIsPlaying(id)) { break; } } // Altseed の終了処理をします。 Engine.Terminate(); } } }"
  },
  "Manual/Transition/Transition.html": {
    "href": "Manual/Transition/Transition.html",
    "title": "トランジション | Altseed2",
    "keywords": "トランジション トランジションとは、画面効果を演出しながら時間をかけて画面を切り替える機能を指します。 トランジションは、例えばフェードアウト・フェードインといった画面効果を与えます。 TransitionNode を使用することで、トランジションを導入することができます。 TransitionNode トランジションを担当するノードです。 このノードは、トランジション効果を演出するとともに、指定されたノードの入れ替えを行います。 コンストラクタの引数には、削除するノードと新しく追加するノード、そしてノードが入れ替わる前後の期間を指定します。 TransitionNode がエンジンに追加されると、 自動的にトランジションが開始されます。 また、トランジションが終了すると、 自動的にエンジンから削除されます。 ノードの入れ替えでは、下図のように、削除されたノードの親に新しくノードを追加するような形で行われます。 TransitionNode を継承する事で、独自のトランジションを作成する事ができます。 継承したクラスでは、以下の処理をオーバーライドできます。 トランジションが開始した瞬間の処理( OnTransitionBegin メソッド) ノードが入れ替わるまでに継続して行われる処理( OnClosing メソッド) ノードが入れ替わる瞬間の処理( OnNodeSwapped メソッド) トランジションが終了するまでに継続して行われる処理( OnOpening メソッド) トランジションが終了した瞬間の処理( OnTransitionEnd メソッド) なお、ノードの入れ替えは TransitionNode が自動で行う為、これらのメソッドの中にノードを入れ替える処理を記述する必要はありません。 Important TransitionNode をエンジンに追加しても、すぐにノードが入れ替わるわけではありません。 トランジションが実行されている間にノードの入れ替えをすると、予期せぬ挙動が発生する可能性があります。 Important TransitionNode を、削除予定のノードの子孫ノードにしないでください。 ノードは入れ替わりますが、その瞬間トランジションの演出が停止します。 RuledTransitionNode 画面遷移演出を自作する手間を省きたい場合は、こちらを使用します。 このノードは、ルール画像を用いたトランジション機能を提供します。 ルール画像とは、その名の通りトランジションのルールを規定するものです。 一般的には白黒の画像であり、適用すると白い部分から先に画面が切り替わります。 コンストラクタの引数には、 RuledTransitionState クラスのインスタンスを2つ、そして任意で上から被せるテクスチャを指定します。 上から被せるテクスチャを指定しなかった場合、代わりにノードが追加されたときのの描画情報が、テクスチャとして渡されます。 RuledTransitionNode がエンジンに追加されると、まず画面が指定されたテクスチャの画像に置き換わります。 完全に置き換わった瞬間、指定されたノードが入れ替わります。 その後、テクスチャの画像が少しずつ消えていき、最後にノードが入れ替わった後の新しい描画情報が画面に表示されます。 RuledTransitionState RuledTransitionNode のコンストラクタの引数に指定するインスタンスのクラスです。 RuledTransitionState クラスは、以下をプロパティに持ちます。 TargetNode : 操作を加えるノードを表します。 1つ目の引数にするときは 削除するノード を、2つ目の引数にするときは 新しく追加するノード を指定してください。 Duration : ノードが入れ替わる前後の期間を表します。 1つ目の引数にするときは ノードが入れ替わるまでの期間 を、2つ目の引数にするときは ノードが入れ替わった後の期間 を指定してください。 RuleTexture : トランジションに使用するルール画像を指定します。 Softness : 画面の変化がどれだけ柔らかくなるかを指定します。 この値が0に近ければ近いほど、画面がシャープに切り替わります。"
  },
  "References/Altseed2.AlphaBlend.html": {
    "href": "References/Altseed2.AlphaBlend.html",
    "title": "AlphaBlend 構造体 | Altseed2",
    "keywords": "AlphaBlend 構造体 アルファブレンドの方法を表す構造体 メンバー フィールド BlendDstFunc BlendDstFuncAlpha BlendEquationAlpha BlendEquationRGB BlendSrcFunc BlendSrcFuncAlpha IsBlendEnabled プロパティ Add 加算のアルファブレンドを表すインスタンスを取得します。 Multiply 乗算のアルファブレンドを表すインスタンスを取得します。 Normal 通常のアルファブレンドを表すインスタンスを取得します。 Opacity 不透明のアルファブレンドを表すインスタンスを取得します。 Substract 減算のアルファブレンドを表すインスタンスを取得します。 フィールド BlendDstFunc <!-- <h5 class=\"decalaration\">宣言</h5> --> public BlendFunction BlendDstFunc BlendDstFuncAlpha <!-- <h5 class=\"decalaration\">宣言</h5> --> public BlendFunction BlendDstFuncAlpha BlendEquationAlpha <!-- <h5 class=\"decalaration\">宣言</h5> --> public BlendEquation BlendEquationAlpha BlendEquationRGB <!-- <h5 class=\"decalaration\">宣言</h5> --> public BlendEquation BlendEquationRGB BlendSrcFunc <!-- <h5 class=\"decalaration\">宣言</h5> --> public BlendFunction BlendSrcFunc BlendSrcFuncAlpha <!-- <h5 class=\"decalaration\">宣言</h5> --> public BlendFunction BlendSrcFuncAlpha IsBlendEnabled <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsBlendEnabled プロパティ Add 加算のアルファブレンドを表すインスタンスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static AlphaBlend Add { get; } Multiply 乗算のアルファブレンドを表すインスタンスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static AlphaBlend Multiply { get; } Normal 通常のアルファブレンドを表すインスタンスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static AlphaBlend Normal { get; } Opacity 不透明のアルファブレンドを表すインスタンスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static AlphaBlend Opacity { get; } Substract 減算のアルファブレンドを表すインスタンスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static AlphaBlend Substract { get; } <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.IEquatable`1\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.AnchorMode.html": {
    "href": "References/Altseed2.AnchorMode.html",
    "title": "AnchorMode 列挙体 | Altseed2",
    "keywords": "AnchorMode 列挙体 アンカー機能の計算方法を指定します。 メンバー ContentSize ContentSizeのまま表示します Fill Size いっぱいに描画されるよう拡大率を計算します。ContentSize の縦横比は保持されません。 KeepAspect ContentSize の縦横比は保持しつつ、Size に収まって描画されるよう拡大率を計算します。"
  },
  "References/Altseed2.AnchorTransformerNode.html": {
    "href": "References/Altseed2.AnchorTransformerNode.html",
    "title": "AnchorTransformerNode クラス | Altseed2",
    "keywords": "AnchorTransformerNode クラス アンカーによって変形するノードのクラス 継承関係 Object Altseed2.Registerable < Node > Node TransformerNode AnchorTransformerNode 継承したメンバー TransformerNode.TransformerNodeInfo 情報表示 Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ AnchorTransformerNode() プロパティ AbsoluteTransform 先祖の変形および AnchorMode を加味した最終的な変形行列を取得します。 AnchorMax アンカー(右下)を取得または設定します。 AnchorMin アンカー(左上)を取得または設定します。 AnchorMode サイズとコンテンツの関係を取得または設定します。 Angle 角度(度数法)を取得または設定します。 CenterPosition 中心となる座標をピクセル単位で取得または設定します。 HorizontalAlignment 水平方向の配置 HorizontalFlip 左右を反転するかどうかを取得または設定します。 InheritedTransform 先祖の変形を加味した変形行列を取得します。 LeftTop Size の左上から親ノードの Size の左上までの距離 Pivot 中心となる座標を[0, 1]で取得または設定します。 Position 座標を取得または設定します。 RightBottom Size の右下から親ノードの Size の右下までの距離 Scale 拡大率を取得または設定します。 Size 描画サイズを取得または設定します。 Transform 親ノードにおける変形行列を取得します。 VerticalAlignment 垂直方向の配置 VerticalFlip 上下を反転するかどうかを取得または設定します。 コンストラクタ AnchorTransformerNode() <!-- <h5 class=\"decalaration\">宣言</h5> --> public AnchorTransformerNode() プロパティ AbsoluteTransform 先祖の変形および AnchorMode を加味した最終的な変形行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override Matrix44F AbsoluteTransform { get; } AnchorMax アンカー(右下)を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F AnchorMax { get; set; } AnchorMin アンカー(左上)を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F AnchorMin { get; set; } AnchorMode サイズとコンテンツの関係を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public AnchorMode AnchorMode { get; set; } Angle 角度(度数法)を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Angle { get; set; } CenterPosition 中心となる座標をピクセル単位で取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F CenterPosition { get; set; } HorizontalAlignment 水平方向の配置 <!-- <h5 class=\"decalaration\">宣言</h5> --> public HorizontalAlignment HorizontalAlignment { get; set; } HorizontalFlip 左右を反転するかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool HorizontalFlip { get; set; } InheritedTransform 先祖の変形を加味した変形行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override Matrix44F InheritedTransform { get; set; } LeftTop Size の左上から親ノードの Size の左上までの距離 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F LeftTop { get; set; } Pivot 中心となる座標を[0, 1]で取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Pivot { get; set; } Position 座標を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Position { get; set; } RightBottom Size の右下から親ノードの Size の右下までの距離 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F RightBottom { get; set; } Scale 拡大率を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Scale { get; set; } Size 描画サイズを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Size { get; set; } Transform 親ノードにおける変形行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override Matrix44F Transform { get; } VerticalAlignment 垂直方向の配置 <!-- <h5 class=\"decalaration\">宣言</h5> --> public VerticalAlignment VerticalAlignment { get; set; } VerticalFlip 上下を反転するかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool VerticalFlip { get; set; } <!-- -->"
  },
  "References/Altseed2.AnchorTransformerNodeInfo.html": {
    "href": "References/Altseed2.AnchorTransformerNodeInfo.html",
    "title": "AnchorTransformerNodeInfo クラス | Altseed2",
    "keywords": "AnchorTransformerNodeInfo クラス 継承関係 Object TransformerNodeInfo AnchorTransformerNodeInfo メンバー コンストラクタ AnchorTransformerNodeInfo(AnchorTransformerNode) プロパティ AnchorTransformerNode メソッド Draw() SetLine(RenderedPolygon, Vector2F, Vector2F, Color) SetPoint(RenderedPolygon, Vector2F, Single, Color) Update() UpdateAnchor() UpdatePositionBox() UpdateSizeBox() コンストラクタ AnchorTransformerNodeInfo(AnchorTransformerNode) <!-- <h5 class=\"decalaration\">宣言</h5> --> public AnchorTransformerNodeInfo(AnchorTransformerNode transformerNode) パラメータ transformerNode プロパティ AnchorTransformerNode <!-- <h5 class=\"decalaration\">宣言</h5> --> AnchorTransformerNode AnchorTransformerNode { } メソッド Draw() <!-- <h5 class=\"decalaration\">宣言</h5> --> protected override void Draw() SetLine(RenderedPolygon, Vector2F, Vector2F, Color) <!-- <h5 class=\"decalaration\">宣言</h5> --> void SetLine(RenderedPolygon renderedPolygon, Vector2F point1, Vector2F point2, Color color) パラメータ renderedPolygon point1 point2 color SetPoint(RenderedPolygon, Vector2F, Single, Color) <!-- <h5 class=\"decalaration\">宣言</h5> --> void SetPoint(RenderedPolygon renderedPolygon, Vector2F point, float size, Color color) パラメータ renderedPolygon point size color Update() <!-- <h5 class=\"decalaration\">宣言</h5> --> protected override void Update() UpdateAnchor() <!-- <h5 class=\"decalaration\">宣言</h5> --> void UpdateAnchor() UpdatePositionBox() <!-- <h5 class=\"decalaration\">宣言</h5> --> void UpdatePositionBox() UpdateSizeBox() <!-- <h5 class=\"decalaration\">宣言</h5> --> void UpdateSizeBox() <!-- -->"
  },
  "References/Altseed2.ArcNode.html": {
    "href": "References/Altseed2.ArcNode.html",
    "title": "ArcNode クラス | Altseed2",
    "keywords": "ArcNode クラス 円弧を描画するノードのクラス 継承関係 Object Altseed2.Registerable < Node > Node TransformNode ShapeNode ArcNode 継承したメンバー ShapeNode.CameraGroup カメラグループを取得または設定します。 ShapeNode.ZOrder 描画時の重ね順を取得または設定します。 ShapeNode.IsDrawn このノードを描画するかどうかを取得または設定します。 ShapeNode.IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 ShapeNode.FlushQueue() 予約されている追加・削除を直ちに実行します。 ShapeNode.AlphaBlend ブレンドモードを取得または設定します。 ShapeNode.Src Texture を切り出す範囲を取得または設定します。 ShapeNode.Texture 描画するテクスチャを取得または設定します。 ShapeNode.Material 描画に適用するマテリアルを取得または設定します。 ShapeNode.InheritedTransform 先祖の変形を加味した変形行列を取得します。 ShapeNode.ContentSize コンテンツのサイズを取得します。 TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ ArcNode() ArcNode の新しいインスタンスを生成します。 プロパティ Color 色を取得または設定します。 EndDegree 描画を終了する角度を取得または設定します。 Radius 半径を取得または設定します。 StartDegree 描画を開始する頂点を取得または設定します。 VertNum 頂点の個数を取得または設定します。 コンストラクタ ArcNode() ArcNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ArcNode() プロパティ Color 色を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Color Color { get; set; } EndDegree 描画を終了する角度を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float EndDegree { get; set; } Radius 半径を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Radius { get; set; } StartDegree 描画を開始する頂点を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float StartDegree { get; set; } VertNum 頂点の個数を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int VertNum { get; set; } <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.ICullableDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.BlendEquation.html": {
    "href": "References/Altseed2.BlendEquation.html",
    "title": "BlendEquation 列挙体 | Altseed2",
    "keywords": "BlendEquation 列挙体 メンバー Add Max Min ReverseSub Sub"
  },
  "References/Altseed2.BlendFunction.html": {
    "href": "References/Altseed2.BlendFunction.html",
    "title": "BlendFunction 列挙体 | Altseed2",
    "keywords": "BlendFunction 列挙体 メンバー DstAlpha DstColor One OneMinusDstAlpha OneMinusDstColor OneMinusSrcAlpha OneMinusSrcColor SrcAlpha SrcColor Zero"
  },
  "References/Altseed2.BuiltinShader.html": {
    "href": "References/Altseed2.BuiltinShader.html",
    "title": "BuiltinShader クラス | Altseed2",
    "keywords": "BuiltinShader クラス 組み込みシェーダの取得を行うクラス 継承関係 Object BuiltinShader メンバー プロパティ DownsampleShader GaussianBlurShader GrayScaleShader HighLuminanceShader LightBloomShader SepiaShader TextureMixShader メソッド Create(BuiltinShaderType) シェーダを取得します。 プロパティ DownsampleShader <!-- <h5 class=\"decalaration\">宣言</h5> --> string DownsampleShader { } GaussianBlurShader <!-- <h5 class=\"decalaration\">宣言</h5> --> string GaussianBlurShader { } GrayScaleShader <!-- <h5 class=\"decalaration\">宣言</h5> --> string GrayScaleShader { } HighLuminanceShader <!-- <h5 class=\"decalaration\">宣言</h5> --> string HighLuminanceShader { } LightBloomShader <!-- <h5 class=\"decalaration\">宣言</h5> --> string LightBloomShader { } SepiaShader <!-- <h5 class=\"decalaration\">宣言</h5> --> string SepiaShader { } TextureMixShader <!-- <h5 class=\"decalaration\">宣言</h5> --> string TextureMixShader { } メソッド Create(BuiltinShaderType) シェーダを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Shader Create(BuiltinShaderType type) パラメータ type シェーダの種類 戻り値 <!-- -->"
  },
  "References/Altseed2.BuiltinShaderType.html": {
    "href": "References/Altseed2.BuiltinShaderType.html",
    "title": "BuiltinShaderType 列挙体 | Altseed2",
    "keywords": "BuiltinShaderType 列挙体 ビルド済みシェーダの種類を表します メンバー FontUnlitPS SpriteUnlitPS SpriteUnlitVS"
  },
  "References/Altseed2.ButtonState.html": {
    "href": "References/Altseed2.ButtonState.html",
    "title": "ButtonState 列挙体 | Altseed2",
    "keywords": "ButtonState 列挙体 ボタンの押下状態を表します。 メンバー Free Hold Push Release"
  },
  "References/Altseed2.CameraNode.html": {
    "href": "References/Altseed2.CameraNode.html",
    "title": "CameraNode クラス | Altseed2",
    "keywords": "CameraNode クラス カメラとして機能するノードのクラス 継承関係 Object Altseed2.Registerable < Node > Node TransformNode CameraNode 継承したメンバー TransformNode.InheritedTransform 先祖の変形を加味した変形行列を取得します。 TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.ContentSize コンテンツのサイズを取得します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ CameraNode() CameraNode 新しいインスタンスを生成します。 プロパティ ClearColor 何も描画されていない部分の色を取得または設定します。 Group 描画対象のグループを取得または設定します。 IsColorCleared 描画開始時に ClearColor で描画先を塗りつぶすかどうかを取得または設定します。 TargetTexture 描画先のテクスチャを取得または設定します。 コンストラクタ CameraNode() CameraNode 新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public CameraNode() 例外 型 Condition InvalidOperationException Graphics機能が初期化されていない。 プロパティ ClearColor 何も描画されていない部分の色を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Color ClearColor { get; set; } Group 描画対象のグループを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ulong Group { get; set; } IsColorCleared 描画開始時に ClearColor で描画先を塗りつぶすかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsColorCleared { get; set; } TargetTexture 描画先のテクスチャを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public RenderTexture TargetTexture { get; set; } <!-- -->"
  },
  "References/Altseed2.CircleCollider.html": {
    "href": "References/Altseed2.CircleCollider.html",
    "title": "CircleCollider クラス | Altseed2",
    "keywords": "CircleCollider クラス 円形コライダのクラス 継承関係 Object Collider CircleCollider 継承したメンバー Collider.Position 座標を取得または設定します。 Collider.Rotation 回転(弧度法)を取得または設定します。 Collider.Transform 変形行列を取得または設定します。 Collider.GetIsCollidedWith(Collider) 指定したコライダとの衝突判定を行います。 メンバー コンストラクタ CircleCollider() CircleCollider の新しいインスタンスを生成します。 プロパティ Radius 円形コライダの半径を取得または設定します。 メソッド Create() 円形コライダを作成します。 コンストラクタ CircleCollider() CircleCollider の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public CircleCollider() プロパティ Radius 円形コライダの半径を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Radius { get; set; } メソッド Create() 円形コライダを作成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static CircleCollider Create() 戻り値 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.CircleColliderNode.html": {
    "href": "References/Altseed2.CircleColliderNode.html",
    "title": "CircleColliderNode クラス | Altseed2",
    "keywords": "CircleColliderNode クラス 円形コライダを管理するノード 継承関係 Object Altseed2.Registerable < Node > Node TransformNode ColliderNode CircleColliderNode 継承したメンバー TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ CircleColliderNode() 既定の CircleCollider を使用して CircleColliderNode の新しいインスタンスを生成します。 プロパティ ContentSize コンテンツのサイズを取得します。 InheritedTransform 先祖の変形を加味した変形行列を取得します。 Radius 衝突半径を取得または設定します。 ScaleType 拡大率の計算方法を取得または設定します。 コンストラクタ CircleColliderNode() 既定の CircleCollider を使用して CircleColliderNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public CircleColliderNode() プロパティ ContentSize コンテンツのサイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed Vector2F ContentSize { get; } InheritedTransform 先祖の変形を加味した変形行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed Matrix44F InheritedTransform { get; } Radius 衝突半径を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Radius { get; set; } ScaleType 拡大率の計算方法を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public CircleColliderNode.ScaleCalcType ScaleType { get; set; } Remarks 既定値： AbsMax <!-- -->"
  },
  "References/Altseed2.CircleColliderNode.ScaleCalcType.html": {
    "href": "References/Altseed2.CircleColliderNode.ScaleCalcType.html",
    "title": "CircleColliderNode.ScaleCalcType 列挙体 | Altseed2",
    "keywords": "CircleColliderNode.ScaleCalcType 列挙体 拡大率を適用する方法を表します。 メンバー AbsMax X，Yの絶対値の最大値で計算します。 AbsMin X，Yの絶対値の最小値で計算します。 Length Scale.Lengthで計算します。 Max X，Yの最大値で計算します。 Min X，Yの最小値で計算します。 X Scale.Xで計算します。 Y Scale.Yで計算します。"
  },
  "References/Altseed2.CircleColliderVisualizeNode.html": {
    "href": "References/Altseed2.CircleColliderVisualizeNode.html",
    "title": "CircleColliderVisualizeNode クラス | Altseed2",
    "keywords": "CircleColliderVisualizeNode クラス 継承関係 Object Altseed2.Registerable < Node > Node TransformNode ShapeNode CircleNode CircleColliderVisualizeNode 継承したメンバー CircleNode.Color 色を取得または設定します。 CircleNode.Radius 半径を取得または設定します。 CircleNode.VertNum 頂点の個数を取得または設定します。 ShapeNode.CameraGroup カメラグループを取得または設定します。 ShapeNode.ZOrder 描画時の重ね順を取得または設定します。 ShapeNode.IsDrawn このノードを描画するかどうかを取得または設定します。 ShapeNode.IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 ShapeNode.FlushQueue() 予約されている追加・削除を直ちに実行します。 ShapeNode.AlphaBlend ブレンドモードを取得または設定します。 ShapeNode.Src Texture を切り出す範囲を取得または設定します。 ShapeNode.Texture 描画するテクスチャを取得または設定します。 ShapeNode.Material 描画に適用するマテリアルを取得または設定します。 ShapeNode.InheritedTransform 先祖の変形を加味した変形行列を取得します。 ShapeNode.ContentSize コンテンツのサイズを取得します。 TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.ICullableDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.CircleNode.html": {
    "href": "References/Altseed2.CircleNode.html",
    "title": "CircleNode クラス | Altseed2",
    "keywords": "CircleNode クラス 円を描画するノードのクラス 継承関係 Object Altseed2.Registerable < Node > Node TransformNode ShapeNode CircleNode CircleColliderVisualizeNode 継承したメンバー ShapeNode.CameraGroup カメラグループを取得または設定します。 ShapeNode.ZOrder 描画時の重ね順を取得または設定します。 ShapeNode.IsDrawn このノードを描画するかどうかを取得または設定します。 ShapeNode.IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 ShapeNode.FlushQueue() 予約されている追加・削除を直ちに実行します。 ShapeNode.AlphaBlend ブレンドモードを取得または設定します。 ShapeNode.Src Texture を切り出す範囲を取得または設定します。 ShapeNode.Texture 描画するテクスチャを取得または設定します。 ShapeNode.Material 描画に適用するマテリアルを取得または設定します。 ShapeNode.InheritedTransform 先祖の変形を加味した変形行列を取得します。 ShapeNode.ContentSize コンテンツのサイズを取得します。 TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ CircleNode() CircleNode の新しいインスタンスを生成します。 プロパティ Color 色を取得または設定します。 Radius 半径を取得または設定します。 VertNum 頂点の個数を取得または設定します。 コンストラクタ CircleNode() CircleNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public CircleNode() プロパティ Color 色を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Color Color { get; set; } Radius 半径を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Radius { get; set; } VertNum 頂点の個数を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int VertNum { get; set; } 例外 型 Condition ArgumentException 設定しようとした値が 3 未満 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.ICullableDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Collider.html": {
    "href": "References/Altseed2.Collider.html",
    "title": "Collider クラス | Altseed2",
    "keywords": "Collider クラス コライダの抽象基本クラスです 継承関係 Object Collider CircleCollider EdgeCollider PolygonCollider ShapeCollider メンバー プロパティ Position 座標を取得または設定します。 Rotation 回転(弧度法)を取得または設定します。 Transform 変形行列を取得または設定します。 メソッド GetIsCollidedWith(Collider) 指定したコライダとの衝突判定を行います。 プロパティ Position 座標を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Position { get; set; } Rotation 回転(弧度法)を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Rotation { get; set; } Transform 変形行列を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Matrix44F Transform { get; set; } メソッド GetIsCollidedWith(Collider) 指定したコライダとの衝突判定を行います。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public virtual bool GetIsCollidedWith(Collider collider) パラメータ collider 衝突判定を行うコライダ 戻り値 このインスタンスと collider が衝突していたらtrue，それ以外でfalse <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.ColliderNode.html": {
    "href": "References/Altseed2.ColliderNode.html",
    "title": "ColliderNode クラス | Altseed2",
    "keywords": "ColliderNode クラス コライダを管理するノード 継承関係 Object Altseed2.Registerable < Node > Node TransformNode ColliderNode CircleColliderNode EdgeColliderNode PolygonColliderNode RectangleColliderNode 継承したメンバー TransformNode.InheritedTransform 先祖の変形を加味した変形行列を取得します。 TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.ContentSize コンテンツのサイズを取得します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ ColliderNode() ColliderNode の新しいインスタンスを生成します。 コンストラクタ ColliderNode() ColliderNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> ColliderNode() <!-- -->"
  },
  "References/Altseed2.ColliderVisualizeNodeFactory.html": {
    "href": "References/Altseed2.ColliderVisualizeNodeFactory.html",
    "title": "ColliderVisualizeNodeFactory クラス | Altseed2",
    "keywords": "ColliderVisualizeNodeFactory クラス ColliderNode の当たり判定範囲として描画されるノードを提供するクラス 継承関係 Object ColliderVisualizeNodeFactory メンバー メソッド Create(ColliderNode) 指定した ColliderNode の当たり判定領域を表示するノードを生成します。 メソッド Create(ColliderNode) 指定した ColliderNode の当たり判定領域を表示するノードを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Node Create(ColliderNode colliderNode) パラメータ colliderNode 使用するコライダノード 戻り値 colliderNode の当たり領域を表示するノード 例外 型 Condition ArgumentException colliderNode の型がサポートされていない型である ( CircleColliderNode ， PolygonColliderNode ， RectangleColliderNode 若しくはそれらから派生した型ではない) InvalidOperationException Graphics機能が初期化されていない。 ArgumentNullException colliderNode がnull <!-- -->"
  },
  "References/Altseed2.CollisionInfo.html": {
    "href": "References/Altseed2.CollisionInfo.html",
    "title": "CollisionInfo クラス | Altseed2",
    "keywords": "CollisionInfo クラス 衝突判定に関する情報を格納したクラス 継承関係 Object CollisionInfo メンバー プロパティ CollisionType 衝突の種類を取得します。 SelfCollider 自身の ColliderNode を取得します。 TheirsCollider 衝突相手の ColliderNode を取得します。 プロパティ CollisionType 衝突の種類を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public CollisionType CollisionType { get; } SelfCollider 自身の ColliderNode を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ColliderNode SelfCollider { get; } TheirsCollider 衝突相手の ColliderNode を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ColliderNode TheirsCollider { get; } <!-- -->"
  },
  "References/Altseed2.CollisionManagerNode.html": {
    "href": "References/Altseed2.CollisionManagerNode.html",
    "title": "CollisionManagerNode クラス | Altseed2",
    "keywords": "CollisionManagerNode クラス 衝突判定を制御するノード 継承関係 Object Altseed2.Registerable < Node > Node CollisionManagerNode 継承したメンバー Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ CollisionManagerNode() CollisionManagerNode の新しいインスタンスを生成します。 プロパティ ColliderCount 格納されているコライダの個数を取得します。 Colliders 登録されているコライダを取得します。 メソッド ContainsCollider(ColliderNode) 指定した ColliderNode が格納されているかどうかを返します。 コンストラクタ CollisionManagerNode() CollisionManagerNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public CollisionManagerNode() プロパティ ColliderCount 格納されているコライダの個数を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int ColliderCount { get; } Colliders 登録されているコライダを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public IEnumerable<ColliderNode> Colliders { get; } メソッド ContainsCollider(ColliderNode) 指定した ColliderNode が格納されているかどうかを返します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool ContainsCollider(ColliderNode node) パラメータ node 検索する ColliderNode 戻り値 node が格納されていたらtrue，それ以外でfalse <!-- -->"
  },
  "References/Altseed2.CollisionType.html": {
    "href": "References/Altseed2.CollisionType.html",
    "title": "CollisionType 列挙体 | Altseed2",
    "keywords": "CollisionType 列挙体 衝突のタイプ メンバー Enter 前フレームでは衝突しておらず，このフレームで衝突している Exit 前フレームでは衝突しており，このフレームで衝突していない Stay 前フレームでは衝突しており，このフレームでも衝突している"
  },
  "References/Altseed2.Color.html": {
    "href": "References/Altseed2.Color.html",
    "title": "Color 構造体 | Altseed2",
    "keywords": "Color 構造体 色を表す構造体 メンバー コンストラクタ Color(Byte, Byte, Byte) Color の新しいインスタンスを生成します。 Color(Byte, Byte, Byte, Byte) Color の新しいインスタンスを生成します。 Color(Int32, Int32, Int32, Int32) Color の新しいインスタンスを生成します。 フィールド A A値 B B値 G G値 R R値 メソッド Convert(Int32) ToString() このインスタンスを表す文字列を取得する コンストラクタ Color(Byte, Byte, Byte) Color の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Color(byte r, byte g, byte b) パラメータ r R値 g G値 b B値 Color(Byte, Byte, Byte, Byte) Color の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Color(byte r, byte g, byte b, byte a) パラメータ r R値 g G値 b B値 a A値 Color(Int32, Int32, Int32, Int32) Color の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Color(int r, int g, int b, int a) パラメータ r R値 g G値 b B値 a A値 フィールド A A値 <!-- <h5 class=\"decalaration\">宣言</h5> --> public byte A B B値 <!-- <h5 class=\"decalaration\">宣言</h5> --> public byte B G G値 <!-- <h5 class=\"decalaration\">宣言</h5> --> public byte G R R値 <!-- <h5 class=\"decalaration\">宣言</h5> --> public byte R メソッド Convert(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> static byte Convert(int value) パラメータ value 戻り値 ToString() このインスタンスを表す文字列を取得する <!-- <h5 class=\"decalaration\">宣言</h5> --> public override string ToString() 戻り値 このインスタンスを表す文字列 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.IEquatable`1\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.CommandList.html": {
    "href": "References/Altseed2.CommandList.html",
    "title": "CommandList クラス | Altseed2",
    "keywords": "CommandList クラス コマンドリストのクラス 継承関係 Object CommandList メンバー プロパティ ScreenTexture ScreenTextureFormat GetScreenTextureで取得するテクスチャのフォーマットを取得または設定します。 メソッド CopyTexture(RenderTexture, RenderTexture) テクスチャの内容をコピーします。 Create() RenderToRenderTarget(Material) 設定されたターゲットに描画を行います。 RenderToRenderTexture(Material, RenderTexture, RenderPassParameter) 指定したテクスチャに描画を行います。 SaveRenderTexture(String, RenderTexture) SetRenderTarget(RenderTexture, RenderPassParameter) 描画する対象のテクスチャを設定します。 プロパティ ScreenTexture <!-- <h5 class=\"decalaration\">宣言</h5> --> public RenderTexture ScreenTexture { get; } ScreenTextureFormat GetScreenTextureで取得するテクスチャのフォーマットを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public TextureFormat ScreenTextureFormat { get; set; } メソッド CopyTexture(RenderTexture, RenderTexture) テクスチャの内容をコピーします。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void CopyTexture(RenderTexture src, RenderTexture dst) パラメータ src コピーするテクスチャ dst コピー先のテクスチャ 例外 型 Condition ArgumentNullException src , dst のいずれかがnull Create() <!-- <h5 class=\"decalaration\">宣言</h5> --> public static CommandList Create() 戻り値 RenderToRenderTarget(Material) 設定されたターゲットに描画を行います。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void RenderToRenderTarget(Material material) パラメータ material 描画に使用するマテリアル RenderToRenderTexture(Material, RenderTexture, RenderPassParameter) 指定したテクスチャに描画を行います。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void RenderToRenderTexture(Material material, RenderTexture target, RenderPassParameter renderPassParameter) パラメータ material 描画に使用するマテリアル target 描画先のテクスチャ renderPassParameter SaveRenderTexture(String, RenderTexture) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SaveRenderTexture(string path, RenderTexture texture) パラメータ path texture SetRenderTarget(RenderTexture, RenderPassParameter) 描画する対象のテクスチャを設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetRenderTarget(RenderTexture target, RenderPassParameter renderPassParameter) パラメータ target 描画先のテクスチャ renderPassParameter 描画に使用する設定 <!-- -->"
  },
  "References/Altseed2.Configuration.html": {
    "href": "References/Altseed2.Configuration.html",
    "title": "Configuration クラス | Altseed2",
    "keywords": "Configuration クラス Altseed2 の設定を表すクラス 継承関係 Object Configuration メンバー コンストラクタ Configuration() Configuration の新しいインスタンスを生成します。 プロパティ ConsoleLoggingEnabled ログをコンソールに出力するかどうかを取得または設定します。 DeviceType 描画方法を取得または設定します。 EnabledCoreModules 初期化するモジュールを指定します。 FileLoggingEnabled ログをファイルに出力するかどうかを取得または設定します。 IsFullscreen 全画面モードかどうかを取得または設定します。 IsResizable 画面サイズ可変かどうかを取得または設定します。 LogFileName ログファイル名を取得または設定します。 ToolSettingFileName VisibleTransformInfo 変形に関する情報の表示を取得または設定します。 WaitVSync 垂直同期信号を待つかどうかを取得または設定します。 コンストラクタ Configuration() Configuration の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Configuration() プロパティ ConsoleLoggingEnabled ログをコンソールに出力するかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool ConsoleLoggingEnabled { get; set; } DeviceType 描画方法を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public GraphicsDevice DeviceType { get; set; } EnabledCoreModules 初期化するモジュールを指定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public CoreModules EnabledCoreModules { get; set; } FileLoggingEnabled ログをファイルに出力するかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool FileLoggingEnabled { get; set; } IsFullscreen 全画面モードかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsFullscreen { get; set; } IsResizable 画面サイズ可変かどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsResizable { get; set; } LogFileName ログファイル名を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public string LogFileName { get; set; } ToolSettingFileName <!-- <h5 class=\"decalaration\">宣言</h5> --> public string ToolSettingFileName { get; set; } VisibleTransformInfo 変形に関する情報の表示を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool VisibleTransformInfo { get; set; } WaitVSync 垂直同期信号を待つかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool WaitVSync { get; set; } <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Cursor.html": {
    "href": "References/Altseed2.Cursor.html",
    "title": "Cursor クラス | Altseed2",
    "keywords": "Cursor クラス カーソルを表します。 継承関係 Object Cursor メンバー メソッド Create(String, Vector2I) 指定したpng画像を読み込んだ Cursor のインスタンスを生成します。 メソッド Create(String, Vector2I) 指定したpng画像を読み込んだ Cursor のインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Cursor Create(string path, Vector2I hot) パラメータ path 読み込むpng画像のパス hot カーソルのクリック判定座標を指定します。カーソル画像はここが中心となります。 戻り値 例外 型 Condition ArgumentNullException path がnull <!-- -->"
  },
  "References/Altseed2.CursorMode.html": {
    "href": "References/Altseed2.CursorMode.html",
    "title": "CursorMode 列挙体 | Altseed2",
    "keywords": "CursorMode 列挙体 カーソルの状態を表します。 メンバー Disable Hidden Normal"
  },
  "References/Altseed2.Easing.html": {
    "href": "References/Altseed2.Easing.html",
    "title": "Easing クラス | Altseed2",
    "keywords": "Easing クラス 継承関係 Object Easing メンバー メソッド GetEasing(EasingType, Single) メソッド GetEasing(EasingType, Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float GetEasing(EasingType easing, float t) パラメータ easing イージングの種類 t イージング過程の変数 戻り値 <!-- -->"
  },
  "References/Altseed2.EasingType.html": {
    "href": "References/Altseed2.EasingType.html",
    "title": "EasingType 列挙体 | Altseed2",
    "keywords": "EasingType 列挙体 イージングの種類を表します。 メンバー InBack InBounce InCirc InCubic InElastic InExpo InOutBack InOutBounce InOutCirc InOutCubic InOutElastic InOutExpo InOutQuad InOutQuart InOutQuint InOutSine InQuad InQuart InQuint InSine Linear OutBack OutBounce OutCirc OutCubic OutElastic OutExpo OutQuad OutQuart OutQuint OutSine"
  },
  "References/Altseed2.EdgeCollider.html": {
    "href": "References/Altseed2.EdgeCollider.html",
    "title": "EdgeCollider クラス | Altseed2",
    "keywords": "EdgeCollider クラス 線分コライダのクラス 継承関係 Object Collider EdgeCollider 継承したメンバー Collider.Position 座標を取得または設定します。 Collider.Rotation 回転(弧度法)を取得または設定します。 Collider.Transform 変形行列を取得または設定します。 Collider.GetIsCollidedWith(Collider) 指定したコライダとの衝突判定を行います。 メンバー コンストラクタ EdgeCollider() EdgeCollider の新しいインスタンスを生成します。 プロパティ Point1 線分コライダの端点1を取得または設定します。 Point2 線分コライダの端点2を取得または設定します。 メソッド Create() 線分コライダを作成します。 コンストラクタ EdgeCollider() EdgeCollider の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public EdgeCollider() プロパティ Point1 線分コライダの端点1を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Point1 { get; set; } Point2 線分コライダの端点2を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Point2 { get; set; } メソッド Create() 線分コライダを作成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static EdgeCollider Create() 戻り値 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.EdgeColliderNode.html": {
    "href": "References/Altseed2.EdgeColliderNode.html",
    "title": "EdgeColliderNode クラス | Altseed2",
    "keywords": "EdgeColliderNode クラス 線分コライダを管理するノード 継承関係 Object Altseed2.Registerable < Node > Node TransformNode ColliderNode EdgeColliderNode 継承したメンバー TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ EdgeColliderNode() 既定の EdgeCollider を使用して EdgeColliderNode の新しいインスタンスを生成します。 プロパティ ContentSize コンテンツのサイズを取得します。 InheritedTransform 先祖の変形を加味した変形行列を取得します。 Point1 線分の始点を取得または設定します。 Point2 線分の終点を取得または設定します。 コンストラクタ EdgeColliderNode() 既定の EdgeCollider を使用して EdgeColliderNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public EdgeColliderNode() プロパティ ContentSize コンテンツのサイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed Vector2F ContentSize { get; } InheritedTransform 先祖の変形を加味した変形行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed Matrix44F InheritedTransform { get; } Point1 線分の始点を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Point1 { get; set; } Point2 線分の終点を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Point2 { get; set; } <!-- -->"
  },
  "References/Altseed2.EdgeColliderVisualizeNode.html": {
    "href": "References/Altseed2.EdgeColliderVisualizeNode.html",
    "title": "EdgeColliderVisualizeNode クラス | Altseed2",
    "keywords": "EdgeColliderVisualizeNode クラス 継承関係 Object Altseed2.Registerable < Node > Node TransformNode ShapeNode LineNode EdgeColliderVisualizeNode 継承したメンバー LineNode.Color 色を取得または設定します。 LineNode.Point1 描画の始点を取得または設定します。 LineNode.Point2 描画の終点を取得または設定します。 LineNode.Thickness 直線の太さを取得または設定します。 ShapeNode.CameraGroup カメラグループを取得または設定します。 ShapeNode.ZOrder 描画時の重ね順を取得または設定します。 ShapeNode.IsDrawn このノードを描画するかどうかを取得または設定します。 ShapeNode.IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 ShapeNode.FlushQueue() 予約されている追加・削除を直ちに実行します。 ShapeNode.AlphaBlend ブレンドモードを取得または設定します。 ShapeNode.Src Texture を切り出す範囲を取得または設定します。 ShapeNode.Texture 描画するテクスチャを取得または設定します。 ShapeNode.Material 描画に適用するマテリアルを取得または設定します。 ShapeNode.InheritedTransform 先祖の変形を加味した変形行列を取得します。 ShapeNode.ContentSize コンテンツのサイズを取得します。 TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.ICullableDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Engine.html": {
    "href": "References/Altseed2.Engine.html",
    "title": "Engine クラス | Altseed2",
    "keywords": "Engine クラス Altseed2 のエンジンを表します。 継承関係 Object Engine メンバー フィールド MaxCameraGroupCount カメラグループの個数の最大値 プロパティ ClearColor スクリーンのクリア色を取得または設定します。 CurrentFPS 現在のFPSを取得します。 DeltaSecond 前のフレームからの経過時間(秒)を取得します。 File ファイルを管理するクラスを取得します。 FramerateMode フレームレートの制御方法を取得または設定します。 Graphics グラフィックのクラスを取得します。 Joystick ジョイスティックを管理するクラスを取得します。 Keyboard キーボードを管理するクラスを取得します。 Log ログを管理するクラスを取得します。 Mouse マウスを管理するクラスを取得します。 Profiler プロファイラを管理するクラスを取得します。 Sound 音を管理するクラスを取得します。 TargetFPS 目標フレームレートを取得または設定します。 Tool ツールを管理するクラスを取得します。 WindowSize ウィンドウのサイズを取得または設定します。 WindowTitle ウインドウのタイトルを取得または設定します。 メソッド AddNode(Node) エンジンにノードを追加します。 DoEvents() システムイベントを処理します。 FindNodes<T>() エンジンに登録されている T 型のノードを列挙します。 FindNodes<T>(Func<T, Boolean>) エンジンに登録されている T 型のノードのうち condition を満たすものを列挙します。 GetNodes() エンジンに登録されているノードの列挙子を返します。 Initialize(String, Int32, Int32, Configuration) エンジンを初期化します。 Pause(Node) ノードの更新を一時停止します。 RemoveNode(Node) エンジンからノードを削除します。 Resume() ノードの更新を再開します。 Terminate() エンジンを終了します。 Update() エンジンを更新します。 フィールド MaxCameraGroupCount カメラグループの個数の最大値 <!-- <h5 class=\"decalaration\">宣言</h5> --> const int MaxCameraGroupCount = 64 プロパティ ClearColor スクリーンのクリア色を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Color ClearColor { get; set; } CurrentFPS 現在のFPSを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float CurrentFPS { get; } DeltaSecond 前のフレームからの経過時間(秒)を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float DeltaSecond { get; } File ファイルを管理するクラスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static File File { get; } 例外 型 Condition InvalidOperationException File機能が初期されていなかったり終了していて操作を実行できなかった FramerateMode フレームレートの制御方法を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static FramerateMode FramerateMode { get; set; } Graphics グラフィックのクラスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Graphics Graphics { get; } 例外 型 Condition InvalidOperationException Graphics機能が初期されていなかったり終了していて操作を実行できなかった Joystick ジョイスティックを管理するクラスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Joystick Joystick { get; } 例外 型 Condition InvalidOperationException Joystick機能が初期されていなかったり終了していて操作を実行できなかった Keyboard キーボードを管理するクラスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Keyboard Keyboard { get; } 例外 型 Condition InvalidOperationException Keyboard機能が初期されていなかったり終了していて操作を実行できなかった Log ログを管理するクラスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Log Log { get; } 例外 型 Condition InvalidOperationException Log機能が初期されていなかったり終了していて操作を実行できなかった Mouse マウスを管理するクラスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Mouse Mouse { get; } 例外 型 Condition InvalidOperationException Mouse機能が初期されていなかったり終了していて操作を実行できなかった Profiler プロファイラを管理するクラスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Profiler Profiler { get; } 例外 型 Condition InvalidOperationException Profiler機能が初期されていなかったり終了していて操作を実行できなかった Sound 音を管理するクラスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static SoundMixer Sound { get; } 例外 型 Condition InvalidOperationException Sound機能が初期されていなかったり終了していて操作を実行できなかった TargetFPS 目標フレームレートを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float TargetFPS { get; set; } Tool ツールを管理するクラスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Tool Tool { get; } 例外 型 Condition InvalidOperationException Tool機能が初期されていなかったり終了していて操作を実行できなかった WindowSize ウィンドウのサイズを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Vector2I WindowSize { get; set; } WindowTitle ウインドウのタイトルを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static string WindowTitle { get; set; } メソッド AddNode(Node) エンジンにノードを追加します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static void AddNode(Node node) パラメータ node 追加されるノード DoEvents() システムイベントを処理します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static bool DoEvents() 戻り値 FindNodes<T>() エンジンに登録されている T 型のノードを列挙します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static IEnumerable<T> FindNodes<T>() where T : Node 戻り値 Type Parameters 名前 説明 T 検索するノードの型 FindNodes<T>(Func<T, Boolean>) エンジンに登録されている T 型のノードのうち condition を満たすものを列挙します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static IEnumerable<T> FindNodes<T>(Func<T, bool> condition) where T : Node パラメータ condition 検索するノードの条件 戻り値 Type Parameters 名前 説明 T 検索するノードの型 例外 型 Condition ArgumentNullException condition がnull GetNodes() エンジンに登録されているノードの列挙子を返します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static IEnumerable<Node> GetNodes() 戻り値 Initialize(String, Int32, Int32, Configuration) エンジンを初期化します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static bool Initialize(string title, int width, int height, Configuration config = null) パラメータ title ウィンドウタイトル width ウィンドウの横幅 height ウィンドウの縦幅 config 設定 戻り値 初期化に成功したらtrue、それ以外でfalse Pause(Node) ノードの更新を一時停止します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static void Pause(Node keepUpdated = null) パラメータ keepUpdated 一時停止の対象から除外するノード RemoveNode(Node) エンジンからノードを削除します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static void RemoveNode(Node node) パラメータ node 削除するノード Resume() ノードの更新を再開します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static void Resume() Terminate() エンジンを終了します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static void Terminate() Update() エンジンを更新します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static bool Update() 戻り値 <!-- -->"
  },
  "References/Altseed2.FFTWindow.html": {
    "href": "References/Altseed2.FFTWindow.html",
    "title": "FFTWindow 列挙体 | Altseed2",
    "keywords": "FFTWindow 列挙体 音のスペクトル解析に使用する窓関数 メンバー Blackman BlackmanHarris Hamming Hanning Rectangular Triangle"
  },
  "References/Altseed2.File.html": {
    "href": "References/Altseed2.File.html",
    "title": "File クラス | Altseed2",
    "keywords": "File クラス ファイル制御を行うクラス 継承関係 Object File メンバー メソッド AddRootDirectory(String) ファイル読み込み時に自動的に保管されるディレクトリを追加します。 AddRootPackage(String) ファイルパッケージをパスワード無しで読み込みます。 AddRootPackageWithPassword(String, String) ファイルパッケージをパスワード有りで読み込みます。 ClearRootDirectories() 追加されたディレクトリやファイルパッケージをすべて削除します。 Exists(String) 指定したファイルが存在するかどうかを検索します。 Pack(String, String) 指定したディレクトリのファイルをパックします。 PackWithPassword(String, String, String) 指定したディレクトリのファイルをパスワード付きでパックします。 メソッド AddRootDirectory(String) ファイル読み込み時に自動的に保管されるディレクトリを追加します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool AddRootDirectory(string path) パラメータ path 追加するディレクトリ 戻り値 例外 型 Condition ArgumentNullException path がnull AddRootPackage(String) ファイルパッケージをパスワード無しで読み込みます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool AddRootPackage(string path) パラメータ path 読み込むファイルパッケージのパス 戻り値 例外 型 Condition ArgumentNullException path がnull AddRootPackageWithPassword(String, String) ファイルパッケージをパスワード有りで読み込みます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool AddRootPackageWithPassword(string path, string password) パラメータ path 読み込むファイルパッケージのパス password 読み込むファイルパッケージのパスワード 戻り値 例外 型 Condition ArgumentNullException path , password のいずれかがnull ClearRootDirectories() 追加されたディレクトリやファイルパッケージをすべて削除します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void ClearRootDirectories() Exists(String) 指定したファイルが存在するかどうかを検索します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Exists(string path) パラメータ path 存在を確認するファイルのパス 戻り値 Pack(String, String) 指定したディレクトリのファイルをパックします。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Pack(string srcPath, string dstPath) パラメータ srcPath パックするファイルのディレクトリ dstPath パックされたファイル名 戻り値 例外 型 Condition ArgumentNullException srcPath , dstPath のいずれかがnull PackWithPassword(String, String, String) 指定したディレクトリのファイルをパスワード付きでパックします。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool PackWithPassword(string srcPath, string dstPath, string password) パラメータ srcPath パックするファイルのディレクトリ dstPath パックされたファイル名 password かけるパスワード 戻り値 例外 型 Condition ArgumentNullException srcPath , dstPath , password のいずれかがnull <!-- -->"
  },
  "References/Altseed2.Font.html": {
    "href": "References/Altseed2.Font.html",
    "title": "Font クラス | Altseed2",
    "keywords": "Font クラス フォント 継承関係 Object Font メンバー フィールド DefaultSamplingSize プロパティ Ascent フォントのベースラインからトップラインまでの距離を取得します。 Descent フォントのベースラインからボトムラインまでの距離を取得します。 EmSize IsStaticFont StaticFontかどうかを取得します。 LineGap フォントの行間の距離を取得します。 Path 読み込んだファイルのパスを取得します。 SamplingSize メソッド AddImageGlyph(Char, Texture2D) テクスチャ文字を追加します。 AddImageGlyph(Int32, TextureBase) テクスチャ文字を追加します。 CreateImageFont(Font) テクスチャ追加対応フォントを生成します。 GenerateFontFile(String, String, String, Int32) a2fフォントを生成します。 GetFontTexture(Int32) 指定した文字のテクスチャを取得します。 GetGlyph(Int32) 文字情報を取得します。 GetImageGlyph(Int32) テクスチャ文字を取得します。 GetKerning(Int32, Int32) カーニングを取得します。 LoadDynamicFont(String, Int32) フォントファイルを読み込んでFontの新しいインスタンスを生成します。 LoadDynamicFontStrict(String, Int32) フォントファイルを読み込んで Font の新しいインスタンスを生成します。 LoadStaticFont(String) FontGeneratorで生成したフォントを読み込んでFontの新しいインスタンスを生成します。 LoadStaticFontStrict(String) FontGeneratorで生成したフォントを読み込んでFontの新しいインスタンスを生成します。 Reload() フィールド DefaultSamplingSize <!-- <h5 class=\"decalaration\">宣言</h5> --> public const int DefaultSamplingSize = 64 プロパティ Ascent フォントのベースラインからトップラインまでの距離を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Ascent { get; } Descent フォントのベースラインからボトムラインまでの距離を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Descent { get; } EmSize <!-- <h5 class=\"decalaration\">宣言</h5> --> public float EmSize { get; } IsStaticFont StaticFontかどうかを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsStaticFont { get; } LineGap フォントの行間の距離を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float LineGap { get; } Path 読み込んだファイルのパスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public string Path { get; } SamplingSize <!-- <h5 class=\"decalaration\">宣言</h5> --> public int SamplingSize { get; } メソッド AddImageGlyph(Char, Texture2D) テクスチャ文字を追加します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void AddImageGlyph(char character, Texture2D texture) パラメータ character 文字 texture テクスチャ AddImageGlyph(Int32, TextureBase) テクスチャ文字を追加します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> void AddImageGlyph(int character, TextureBase texture) パラメータ character 文字 texture テクスチャ CreateImageFont(Font) テクスチャ追加対応フォントを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Font CreateImageFont(Font baseFont) パラメータ baseFont ベースとなるフォント 戻り値 例外 型 Condition ArgumentNullException baseFont がnull GenerateFontFile(String, String, String, Int32) a2fフォントを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static bool GenerateFontFile(string dynamicFontPath, string staticFontPath, string characters, int samplingSize = 64) パラメータ dynamicFontPath 読み込むtruetypeフォントのパス staticFontPath 生成するa2fフォントのパス characters フォント化させる文字列 samplingSize 戻り値 例外 型 Condition ArgumentNullException dynamicFontPath , staticFontPath , characters のいずれかがnull GetFontTexture(Int32) 指定した文字のテクスチャを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Texture2D GetFontTexture(int index) パラメータ index インデックス 戻り値 GetGlyph(Int32) 文字情報を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Glyph GetGlyph(int character) パラメータ character 文字 戻り値 GetImageGlyph(Int32) テクスチャ文字を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public TextureBase GetImageGlyph(int character) パラメータ character 文字 戻り値 GetKerning(Int32, Int32) カーニングを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int GetKerning(int c1, int c2) パラメータ c1 文字1 c2 文字2 戻り値 LoadDynamicFont(String, Int32) フォントファイルを読み込んでFontの新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Font LoadDynamicFont(string path, int samplingSize = 64) パラメータ path 読み込むフォントのパス samplingSize 戻り値 例外 型 Condition ArgumentNullException path がnull LoadDynamicFontStrict(String, Int32) フォントファイルを読み込んで Font の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Font LoadDynamicFontStrict(string path, int samplingSize = 64) パラメータ path フォントファイルのパス samplingSize MSDFのサンプリングサイズ 戻り値 path の指定するファイルから生成されたフォント 例外 型 Condition ArgumentException path が空白文字のみからなる又は使用できない文字を含む ArgumentNullException path がnull ArgumentOutOfRangeException samplingSize が0以下 FileNotFoundException path で指定したファイルが見つからない PathTooLongException path が長すぎる SystemException ファイルが破損していたまたは読み込みに失敗した LoadStaticFont(String) FontGeneratorで生成したフォントを読み込んでFontの新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Font LoadStaticFont(string path) パラメータ path 読み込むフォントのパス 戻り値 例外 型 Condition ArgumentNullException path がnull LoadStaticFontStrict(String) FontGeneratorで生成したフォントを読み込んでFontの新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Font LoadStaticFontStrict(string path) パラメータ path フォントファイルのパス 戻り値 path の指定するファイルから生成されたフォント 例外 型 Condition ArgumentException path が空白文字のみからなる又は使用できない文字を含む ArgumentNullException path がnull FileNotFoundException path で指定したファイルが見つからない PathTooLongException path が長すぎる SystemException ファイルが破損していたまたは読み込みに失敗した Reload() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Reload() 戻り値 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"System.Runtime.Serialization.IDeserializationCallback\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.FramerateMode.html": {
    "href": "References/Altseed2.FramerateMode.html",
    "title": "FramerateMode 列挙体 | Altseed2",
    "keywords": "FramerateMode 列挙体 フレームレートモード メンバー Constant Variable"
  },
  "References/Altseed2.Glyph.html": {
    "href": "References/Altseed2.Glyph.html",
    "title": "Glyph クラス | Altseed2",
    "keywords": "Glyph クラス 文字情報 継承関係 Object Glyph メンバー プロパティ Advance Offset 文字のオフセットを取得します。 Position 文字の座標を取得します。 Scale Size 文字のサイズを取得します。 TextureIndex 文字テクスチャのインデックスを取得します。 TextureSize 文字テクスチャのサイズを取得します。 プロパティ Advance <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Advance { get; } Offset 文字のオフセットを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Offset { get; } Position 文字の座標を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2I Position { get; } Scale <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Scale { get; } Size 文字のサイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2I Size { get; } TextureIndex 文字テクスチャのインデックスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int TextureIndex { get; } TextureSize 文字テクスチャのサイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2I TextureSize { get; } <!-- -->"
  },
  "References/Altseed2.HorizontalAlignment.html": {
    "href": "References/Altseed2.HorizontalAlignment.html",
    "title": "HorizontalAlignment 列挙体 | Altseed2",
    "keywords": "HorizontalAlignment 列挙体 水平方向の配置 メンバー Center 中央揃え Left 左揃え Right 右揃え"
  },
  "References/Altseed2.html": {
    "href": "References/Altseed2.html",
    "title": "Altseed2 名前空間 | Altseed2",
    "keywords": "Altseed2 名前空間 クラス AnchorTransformerNode アンカーによって変形するノードのクラス AnchorTransformerNodeInfo ArcNode 円弧を描画するノードのクラス BuiltinShader 組み込みシェーダの取得を行うクラス CameraNode カメラとして機能するノードのクラス CircleCollider 円形コライダのクラス CircleColliderNode 円形コライダを管理するノード CircleColliderVisualizeNode CircleNode 円を描画するノードのクラス Collider コライダの抽象基本クラスです ColliderNode コライダを管理するノード ColliderVisualizeNodeFactory ColliderNode の当たり判定範囲として描画されるノードを提供するクラス CollisionInfo 衝突判定に関する情報を格納したクラス CollisionManagerNode 衝突判定を制御するノード CommandList コマンドリストのクラス Configuration Altseed2 の設定を表すクラス Cursor カーソルを表します。 Easing EdgeCollider 線分コライダのクラス EdgeColliderNode 線分コライダを管理するノード EdgeColliderVisualizeNode Engine Altseed2 のエンジンを表します。 File ファイル制御を行うクラス Font フォント Glyph 文字情報 ImageFont Joystick ジョイスティックを表すクラス JoystickInfo ジョイスティックコントローラを表します。 Keyboard キーボードを表します。 LineNode 直線を描画するノードのクラス Log ログを出力するクラス Material マテリアル MaterialPropertyBlock MaterialPropertyBlockCollection MathHelper 数学の演算を補助するクラス MediaPlayer 映像を再生するクラス Mouse マウスを表します。 Node ゲームシーンを構成するノードを表します。 PolygonCollider 多角形コライダのクラス PolygonColliderNode ポリゴンコライダを管理するノード PolygonColliderVisualizeNode PolygonNode 図形を描画するノードを表します。 PostEffectGaussianBlurNode ガウスぼかしを適用するポストエフェクトのクラス PostEffectGrayScaleNode グレースケール化を適用するポストエフェクトのクラス PostEffectLightBloomNode ライトブルームを適用するポストエフェクトのクラス PostEffectNode ポストエフェクトを扱うノードの基底クラス PostEffectSepiaNode セピア調にするポストエフェクトのクラス Profiler プロファイラのクラス RectangleCollider 短形コライダのクラス RectangleColliderNode 短形コライダを管理するノード RectangleColliderVisualizeNode RectangleNode 短形を描画するノードのクラス RenderTexture ポストエフェクトやカメラにおける描画先のクラス RuledTransitionEffectNode RuledTransitionNode パラメータ制御可能な TransitionNode のクラス RuledTransitionState RuledTransitionNode の制御に用いる設定のクラス Shader シェーダ ShaderCompiler ShapeCollider 図形コライダのクラス ShapeNode 基本的な図形を描画するノードの基底クラスを表します。 Sound 音源のクラス SoundMixer 音源を操作するクラス SpriteNode テクスチャを描画するノードを表します。 StaticFile 一度でファイルを読み取るクラス StreamFile 段階的にファイルを読み取るクラス TextNode テキストを描画するノードのクラス Texture2D テクスチャのクラス TextureBase テクスチャのベースクラス Tool imguiのツール処理を行うクラス TransformerNode 親ノードの座標変形を制御するノード TransformerNodeInfo TransformNode 変形行列を備えたノードのクラス TransitionNode 画面遷移を行うノードのクラス TriangleNode 三角形を描画するノードのクラス 構造体 AlphaBlend アルファブレンドの方法を表す構造体 Color 色を表す構造体 Matrix33F Single 型の3x3行列を表す構造体 Matrix33I Int32 型の3x3行列を表す構造体 Matrix44F Single 型の4x4行列を表す構造体 Matrix44I Int32 型の4x4行列を表す構造体 ProfilerBlock プロファイラのブロックを簡単に使用できるようにするクラス RectF Single 型の矩形を表す構造体 RectI Int32 型の矩形を表す構造体 RenderPassParameter Vector2F Single 型の二次元ベクトルを表す構造体 Vector2I Int32 型の二次元ベクトルを表す構造体 Vector3F 3次元ベクトル Vector3I 3次元ベクトル Vector4F 4次元ベクトル Vector4I 4次元ベクトル Vertex 頂点の情報を格納する構造体 インタフェース ICollisionEventReceiver 衝突判定を感知するイベントを提供するインターフェイス ICullableDrawn カリング対象ノードインターフェース IDrawn 描画ノードインターフェース 列挙型 AnchorMode アンカー機能の計算方法を指定します。 BlendEquation BlendFunction BuiltinShaderType ビルド済みシェーダの種類を表します ButtonState ボタンの押下状態を表します。 CircleColliderNode.ScaleCalcType 拡大率を適用する方法を表します。 CollisionType 衝突のタイプ CursorMode カーソルの状態を表します。 EasingType イージングの種類を表します。 FFTWindow 音のスペクトル解析に使用する窓関数 FramerateMode フレームレートモード HorizontalAlignment 水平方向の配置 JoystickAxis ジョイスティックの軸の種類を表します。 JoystickButton ジョイスティックのボタンの種類を表します。 JoystickType ジョイスティックの種類を表します。 Key キーボードのキーの種類を表します。 LogCategory ログの範囲を表します。 LogLevel ログレベルを表します。 MouseButton マウスのボタンの種類を表します。 RegisteredStatus 登録状況を表します。 RenderTargetCareType ShaderStage TextureFilter テクスチャをフィルタリングする方法を表します。 TextureFormat TextureWrapMode テクスチャをサンプリングする方法を表します。 ToolBackendFlags ToolButtonFlags ToolCol ToolColorEditFlags ツール機能における色の設定を表します ToolComboFlags ツール機能のBeginComboに適用する設定を表します。 ToolCond バイナリ演算子を使用して複数の値を結合しないでください ToolConfigFlags ToolDataType ToolDir ツール機能で使用する方向 ToolDockNodeFlags ToolDragDropFlags ToolDrawCornerFlags ToolDrawListFlags ToolFocusedFlags ToolFontAtlasFlags ToolGlyphRange ツール機能を使ってフォントを読み込む際の範囲を指定します。ビット演算は行わないでください。 ToolHoveredFlags ToolInputTextFlags ツール機能においてインプットされるテキストの設定を表します ToolKey ToolKeyModFlags ToolMouseButton ToolMouseCursor ToolNavInput ToolPopupFlags ToolSelectableFlags ツール機能のSelectableに適用する設定を表します。 ToolSliderFlags ToolStyleVar ToolTabBarFlags ツール機能のタブバーにおける設定を表します ToolTabItemFlags ToolTreeNodeFlags ツール機能のTreeNodeに適用する設定を表します。 ToolUsage ツール機能の使用方法(描画位置) ToolViewportFlags ToolWindowFlags ツール機能のウィンドウにおける設定を表します VerticalAlignment 垂直方向の配置 WritingDirection テキストの描画方向"
  },
  "References/Altseed2.ICollisionEventReceiver.html": {
    "href": "References/Altseed2.ICollisionEventReceiver.html",
    "title": "ICollisionEventReceiver インタフェース | Altseed2",
    "keywords": "ICollisionEventReceiver インタフェース 衝突判定を感知するイベントを提供するインターフェイス メンバー メソッド OnCollisionEnter(CollisionInfo) 衝突を開始した時に呼び出されます。 OnCollisionExit(CollisionInfo) 衝突を終了した時に呼び出されます。 OnCollisionStay(CollisionInfo) 衝突が継続している時に呼び出されます。 メソッド OnCollisionEnter(CollisionInfo) 衝突を開始した時に呼び出されます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> void OnCollisionEnter(CollisionInfo info) パラメータ info 衝突に関する情報 OnCollisionExit(CollisionInfo) 衝突を終了した時に呼び出されます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> void OnCollisionExit(CollisionInfo info) パラメータ info 衝突に関する情報 OnCollisionStay(CollisionInfo) 衝突が継続している時に呼び出されます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> void OnCollisionStay(CollisionInfo info) パラメータ info 衝突に関する情報 <!-- -->"
  },
  "References/Altseed2.ICullableDrawn.html": {
    "href": "References/Altseed2.ICullableDrawn.html",
    "title": "ICullableDrawn インタフェース | Altseed2",
    "keywords": "ICullableDrawn インタフェース カリング対象ノードインターフェース 継承したメンバー IDrawn.CameraGroup カメラグループを取得または設定します。 IDrawn.ZOrder 描画時の重ね順を取得または設定します。 メンバー プロパティ ContentSize コンテンツのサイズを取得します。 IsDrawn このノードを描画するかどうかを取得または設定します。 IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 プロパティ ContentSize コンテンツのサイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> Vector2F ContentSize { get; } IsDrawn このノードを描画するかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> bool IsDrawn { get; set; } IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> bool IsDrawnActually { get; } <!-- -->"
  },
  "References/Altseed2.IDrawn.html": {
    "href": "References/Altseed2.IDrawn.html",
    "title": "IDrawn インタフェース | Altseed2",
    "keywords": "IDrawn インタフェース 描画ノードインターフェース メンバー プロパティ CameraGroup カメラグループを取得または設定します。 ZOrder 描画時の重ね順を取得または設定します。 プロパティ CameraGroup カメラグループを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> ulong CameraGroup { get; set; } ZOrder 描画時の重ね順を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> int ZOrder { get; set; } <!-- -->"
  },
  "References/Altseed2.ImageFont.html": {
    "href": "References/Altseed2.ImageFont.html",
    "title": "ImageFont クラス | Altseed2",
    "keywords": "ImageFont クラス 継承関係 Object ImageFont メンバー プロパティ Ascent Descent EmSize IsStaticFont LineGap SamplingSize メソッド AddImageGlyph(Int32, TextureBase) GetFontTexture(Int32) GetGlyph(Int32) GetImageGlyph(Int32) GetKerning(Int32, Int32) プロパティ Ascent <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Ascent { get; } Descent <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Descent { get; } EmSize <!-- <h5 class=\"decalaration\">宣言</h5> --> public float EmSize { get; } IsStaticFont <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsStaticFont { get; } LineGap <!-- <h5 class=\"decalaration\">宣言</h5> --> public float LineGap { get; } SamplingSize <!-- <h5 class=\"decalaration\">宣言</h5> --> public int SamplingSize { get; } メソッド AddImageGlyph(Int32, TextureBase) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void AddImageGlyph(int character, TextureBase texture) パラメータ character texture GetFontTexture(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public Texture2D GetFontTexture(int index) パラメータ index 戻り値 GetGlyph(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public Glyph GetGlyph(int character) パラメータ character 戻り値 GetImageGlyph(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public TextureBase GetImageGlyph(int character) パラメータ character 戻り値 GetKerning(Int32, Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public int GetKerning(int c1, int c2) パラメータ c1 c2 戻り値 <!-- -->"
  },
  "References/Altseed2.Joystick.html": {
    "href": "References/Altseed2.Joystick.html",
    "title": "Joystick クラス | Altseed2",
    "keywords": "Joystick クラス ジョイスティックを表すクラス 継承関係 Object Joystick メンバー プロパティ ConnectedJoystickCount 接続されているジョイスティックの数を取得します。 MaxCount ジョイスティックの最大同時接続数を取得します。 メソッド GetAxisState(Int32, JoystickAxis) 軸の状態を軸の種類で取得します。 GetAxisState(Int32, Int32) 軸の状態をインデックスで取得します。 GetButtonState(Int32, JoystickButton) ボタンの状態を種類から取得します。 GetButtonState(Int32, Int32) ボタンの状態をインデックスで取得します。 GetJoystickInfo(Int32) 指定したジョイスティックの情報を取得します。 IsPresent(Int32) 指定したジョイスティックが存在しているかどうかを取得します。 RefreshInputState() プロパティ ConnectedJoystickCount 接続されているジョイスティックの数を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int ConnectedJoystickCount { get; } MaxCount ジョイスティックの最大同時接続数を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int MaxCount { get; } メソッド GetAxisState(Int32, JoystickAxis) 軸の状態を軸の種類で取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetAxisState(int joystickIndex, JoystickAxis type) パラメータ joystickIndex 検索するジョイスティックのインデックス type 状態を検索する軸の種類 戻り値 指定種類の軸の状態 GetAxisState(Int32, Int32) 軸の状態をインデックスで取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetAxisState(int joystickIndex, int axisIndex) パラメータ joystickIndex 検索するジョイスティックのインデックス axisIndex 状態を検索する軸のインデックス 戻り値 指定インデックスの軸の状態 GetButtonState(Int32, JoystickButton) ボタンの状態を種類から取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ButtonState GetButtonState(int joystickIndex, JoystickButton type) パラメータ joystickIndex 検索するジョイスティックのインデックス type 状態を検索するボタンの種類 戻り値 指定種類のボタンの状態 GetButtonState(Int32, Int32) ボタンの状態をインデックスで取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ButtonState GetButtonState(int joystickIndex, int buttonIndex) パラメータ joystickIndex 検索するジョイスティックのインデックス buttonIndex 状態を検索するボタンのインデックス 戻り値 指定インデックスのボタンの状態 GetJoystickInfo(Int32) 指定したジョイスティックの情報を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public JoystickInfo GetJoystickInfo(int joystickIndex) パラメータ joystickIndex ジョイスティックのインデックス 戻り値 IsPresent(Int32) 指定したジョイスティックが存在しているかどうかを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsPresent(int joystickIndex) パラメータ joystickIndex ジョイスティックのインデックス 戻り値 RefreshInputState() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void RefreshInputState() <!-- -->"
  },
  "References/Altseed2.JoystickAxis.html": {
    "href": "References/Altseed2.JoystickAxis.html",
    "title": "JoystickAxis 列挙体 | Altseed2",
    "keywords": "JoystickAxis 列挙体 ジョイスティックの軸の種類を表します。 メンバー LeftTrigger LeftX LeftY RightTrigger RightX RightY"
  },
  "References/Altseed2.JoystickButton.html": {
    "href": "References/Altseed2.JoystickButton.html",
    "title": "JoystickButton 列挙体 | Altseed2",
    "keywords": "JoystickButton 列挙体 ジョイスティックのボタンの種類を表します。 メンバー Back DPadDown DPadLeft DPadRight DPadUp Guide LeftBumper LeftThumb RightBumper RightDown RightLeft RightRight RightThumb RightUp Start"
  },
  "References/Altseed2.JoystickInfo.html": {
    "href": "References/Altseed2.JoystickInfo.html",
    "title": "JoystickInfo クラス | Altseed2",
    "keywords": "JoystickInfo クラス ジョイスティックコントローラを表します。 継承関係 Object JoystickInfo メンバー プロパティ AxisCount Bustype ButtonCount GamepadName ジョイスティックがGamepadとして使える時、その名前を取得します。 GUID IsGamepad ジョイスティックがGamepadとして使えるかどうかを取得します。 Name ジョイスティックの名前を取得します。 Product 製品IDを取得します。 Vendor 製造者IDを取得します。 Version ジョイスティックのバージョンを取得します。 メソッド IsJoystickType(JoystickType) 指定したジョイスティックの種類に合致するかどうかを取得します。 プロパティ AxisCount <!-- <h5 class=\"decalaration\">宣言</h5> --> public int AxisCount { get; } Bustype <!-- <h5 class=\"decalaration\">宣言</h5> --> public int Bustype { get; } ButtonCount <!-- <h5 class=\"decalaration\">宣言</h5> --> public int ButtonCount { get; } GamepadName ジョイスティックがGamepadとして使える時、その名前を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public string GamepadName { get; } GUID <!-- <h5 class=\"decalaration\">宣言</h5> --> public string GUID { get; } IsGamepad ジョイスティックがGamepadとして使えるかどうかを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsGamepad { get; } Name ジョイスティックの名前を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public string Name { get; } Product 製品IDを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int Product { get; } Vendor 製造者IDを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int Vendor { get; } Version ジョイスティックのバージョンを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int Version { get; } メソッド IsJoystickType(JoystickType) 指定したジョイスティックの種類に合致するかどうかを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsJoystickType(JoystickType type) パラメータ type 戻り値 <!-- -->"
  },
  "References/Altseed2.JoystickType.html": {
    "href": "References/Altseed2.JoystickType.html",
    "title": "JoystickType 列挙体 | Altseed2",
    "keywords": "JoystickType 列挙体 ジョイスティックの種類を表します。 メンバー DualShock3 DualShock4 DualShock4Slim JoyconL JoyconR Other ProController XBOX360"
  },
  "References/Altseed2.Key.html": {
    "href": "References/Altseed2.Key.html",
    "title": "Key 列挙体 | Altseed2",
    "keywords": "Key 列挙体 キーボードのキーの種類を表します。 メンバー A Apostrophe B Backslash Backspace C CapsLock Comma D Delete Down E End Enter Equal Escape F F1 F10 F11 F12 F13 F14 F15 F16 F17 F18 F19 F2 F20 F21 F22 F23 F24 F25 F3 F4 F5 F6 F7 F8 F9 G GraveAccent H Home I Insert J K Keypad0 Keypad1 Keypad2 Keypad3 Keypad4 Keypad5 Keypad6 Keypad7 Keypad8 Keypad9 KeypadAdd KeypadDecimal KeypadDivide KeypadEnter KeypadEqual KeypadMultiply KeypadSubstract L Last Left LeftAlt LeftBracket LeftControl LeftShift LeftWin M MAX Menu Minus N Num0 Num1 Num2 Num3 Num4 Num5 Num6 Num7 Num8 Num9 NumLock O P PageDown PageUp Pause Period PrintScreen Q R Right RightAlt RightBracket RightControl RightShift RightWin S ScrollLock Semicolon Slash Space T Tab U Unknown Up V W World1 World2 X Y Z"
  },
  "References/Altseed2.Keyboard.html": {
    "href": "References/Altseed2.Keyboard.html",
    "title": "Keyboard クラス | Altseed2",
    "keywords": "Keyboard クラス キーボードを表します。 継承関係 Object Keyboard メンバー メソッド GetKeyState(Key) キーの状態を取得します。 RefleshKeyStates() メソッド GetKeyState(Key) キーの状態を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ButtonState GetKeyState(Key key) パラメータ key キー 戻り値 RefleshKeyStates() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void RefleshKeyStates() <!-- -->"
  },
  "References/Altseed2.LineNode.html": {
    "href": "References/Altseed2.LineNode.html",
    "title": "LineNode クラス | Altseed2",
    "keywords": "LineNode クラス 直線を描画するノードのクラス 継承関係 Object Altseed2.Registerable < Node > Node TransformNode ShapeNode LineNode EdgeColliderVisualizeNode 継承したメンバー ShapeNode.CameraGroup カメラグループを取得または設定します。 ShapeNode.ZOrder 描画時の重ね順を取得または設定します。 ShapeNode.IsDrawn このノードを描画するかどうかを取得または設定します。 ShapeNode.IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 ShapeNode.FlushQueue() 予約されている追加・削除を直ちに実行します。 ShapeNode.AlphaBlend ブレンドモードを取得または設定します。 ShapeNode.Src Texture を切り出す範囲を取得または設定します。 ShapeNode.Texture 描画するテクスチャを取得または設定します。 ShapeNode.Material 描画に適用するマテリアルを取得または設定します。 ShapeNode.InheritedTransform 先祖の変形を加味した変形行列を取得します。 ShapeNode.ContentSize コンテンツのサイズを取得します。 TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ LineNode() LineNode の新しいインスタンスを生成します。 プロパティ Color 色を取得または設定します。 Point1 描画の始点を取得または設定します。 Point2 描画の終点を取得または設定します。 Thickness 直線の太さを取得または設定します。 コンストラクタ LineNode() LineNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public LineNode() プロパティ Color 色を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Color Color { get; set; } Point1 描画の始点を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Point1 { get; set; } Point2 描画の終点を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Point2 { get; set; } Thickness 直線の太さを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Thickness { get; set; } <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.ICullableDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Log.html": {
    "href": "References/Altseed2.Log.html",
    "title": "Log クラス | Altseed2",
    "keywords": "Log クラス ログを出力するクラス 継承関係 Object Log メンバー メソッド Critical(LogCategory, String) Critical でログを出力します。 Debug(LogCategory, String) Debug でログを出力します。 Error(LogCategory, String) Error でログを出力します。 Info(LogCategory, String) Info でログを出力します。 SetLevel(LogCategory, LogLevel) ログレベルを設定します。 Trace(LogCategory, String) Trace でログを出力します。 Warn(LogCategory, String) Warn でログを出力します。 Write(LogCategory, LogLevel, String) ログを出力します。 メソッド Critical(LogCategory, String) Critical でログを出力します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Critical(LogCategory category, string message) パラメータ category message Debug(LogCategory, String) Debug でログを出力します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Debug(LogCategory category, string message) パラメータ category message Error(LogCategory, String) Error でログを出力します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Error(LogCategory category, string message) パラメータ category message Info(LogCategory, String) Info でログを出力します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Info(LogCategory category, string message) パラメータ category message SetLevel(LogCategory, LogLevel) ログレベルを設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetLevel(LogCategory category, LogLevel level) パラメータ category level Trace(LogCategory, String) Trace でログを出力します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Trace(LogCategory category, string message) パラメータ category message Warn(LogCategory, String) Warn でログを出力します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Warn(LogCategory category, string message) パラメータ category message Write(LogCategory, LogLevel, String) ログを出力します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Write(LogCategory category, LogLevel level, string message) パラメータ category level message <!-- -->"
  },
  "References/Altseed2.LogCategory.html": {
    "href": "References/Altseed2.LogCategory.html",
    "title": "LogCategory 列挙体 | Altseed2",
    "keywords": "LogCategory 列挙体 ログの範囲を表します。 メンバー Core Engine Graphics User"
  },
  "References/Altseed2.LogLevel.html": {
    "href": "References/Altseed2.LogLevel.html",
    "title": "LogLevel 列挙体 | Altseed2",
    "keywords": "LogLevel 列挙体 ログレベルを表します。 メンバー Critical Debug Error Info Off Trace Warn"
  },
  "References/Altseed2.Material.html": {
    "href": "References/Altseed2.Material.html",
    "title": "Material クラス | Altseed2",
    "keywords": "Material クラス マテリアル 継承関係 Object Material メンバー プロパティ AlphaBlend 描画時のアルファブレンドを取得または設定します。 PropertyBlock Shader メソッド Create() マテリアルを生成する GetMatrix44F(String) 指定した名前を持つ Matrix44F のインスタンスを取得します。 GetShader(ShaderStage) 指定した種類のシェーダを取得します。 GetTexture(String) 指定した名前を持つ TextureBase のインスタンスを取得します。 GetVector4F(String) 指定した名前を持つ Vector4F のインスタンスを取得します。 SetMatrix44F(String, Matrix44F) 指定した名前を持つ Matrix44F の値を設定します。 SetMatrix44FPrivate(String, Matrix44F, Boolean) SetShader(Shader) シェーダを設定します。 SetShaderPrivate(Shader, Boolean) SetTexture(String, TextureBase) 指定した名前を持つ TextureBase の値を設定します。 SetTexturePrivate(String, TextureBase, Boolean) SetVector4F(String, Vector4F) 指定した名前を持つ Vector4F の値を設定します。 SetVector4FPrivate(String, Vector4F, Boolean) プロパティ AlphaBlend 描画時のアルファブレンドを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public AlphaBlend AlphaBlend { get; set; } PropertyBlock <!-- <h5 class=\"decalaration\">宣言</h5> --> public MaterialPropertyBlock PropertyBlock { get; } Shader <!-- <h5 class=\"decalaration\">宣言</h5> --> public Shader Shader { set; } メソッド Create() マテリアルを生成する <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Material Create() 戻り値 GetMatrix44F(String) 指定した名前を持つ Matrix44F のインスタンスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Matrix44F GetMatrix44F(string key) パラメータ key 検索する Matrix44F のインスタンスの名前 戻り値 key を名前として持つ Matrix44F のインスタンス 例外 型 Condition ArgumentNullException key がnull GetShader(ShaderStage) 指定した種類のシェーダを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Shader GetShader(ShaderStage shaderStage) パラメータ shaderStage 検索するシェーダのタイプ 戻り値 shaderStage に一致するタイプのシェーダ GetTexture(String) 指定した名前を持つ TextureBase のインスタンスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public TextureBase GetTexture(string key) パラメータ key 検索する TextureBase のインスタンスの名前 戻り値 key を名前として持つ TextureBase のインスタンス 例外 型 Condition ArgumentNullException key がnull GetVector4F(String) 指定した名前を持つ Vector4F のインスタンスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector4F GetVector4F(string key) パラメータ key 検索する Vector4F のインスタンスの名前 戻り値 key を名前として持つ Vector4F のインスタンス 例外 型 Condition ArgumentNullException key がnull SetMatrix44F(String, Matrix44F) 指定した名前を持つ Matrix44F の値を設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetMatrix44F(string key, Matrix44F value) パラメータ key 検索する Matrix44F のインスタンスの名前 value 設定する Matrix44F のインスタンスの値 例外 型 Condition ArgumentNullException key がnull SetMatrix44FPrivate(String, Matrix44F, Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> void SetMatrix44FPrivate(string key, Matrix44F value, bool assign) パラメータ key value assign SetShader(Shader) シェーダを設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetShader(Shader shader) パラメータ shader 設定するシェーダ 例外 型 Condition ArgumentNullException shader がnull SetShaderPrivate(Shader, Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> void SetShaderPrivate(Shader shader, bool assign) パラメータ shader assign SetTexture(String, TextureBase) 指定した名前を持つ TextureBase の値を設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetTexture(string key, TextureBase value) パラメータ key 検索する TextureBase のインスタンスの名前 value 設定する TextureBase のインスタンスの値 例外 型 Condition ArgumentNullException key がnull SetTexturePrivate(String, TextureBase, Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> void SetTexturePrivate(string key, TextureBase value, bool assign) パラメータ key value assign SetVector4F(String, Vector4F) 指定した名前を持つ Vector4F の値を設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetVector4F(string key, Vector4F value) パラメータ key 検索する Vector4F のインスタンスの名前 value 設定する Vector4F のインスタンスの値 例外 型 Condition ArgumentNullException key がnull SetVector4FPrivate(String, Vector4F, Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> void SetVector4FPrivate(string key, Vector4F value, bool assign) パラメータ key value assign <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.MaterialPropertyBlock.html": {
    "href": "References/Altseed2.MaterialPropertyBlock.html",
    "title": "MaterialPropertyBlock クラス | Altseed2",
    "keywords": "MaterialPropertyBlock クラス 継承関係 Object MaterialPropertyBlock メンバー メソッド GetMatrix44F(String) GetTexture(String) GetVector4F(String) SetMatrix44F(String, Matrix44F) SetTexture(String, TextureBase) SetVector4F(String, Vector4F) メソッド GetMatrix44F(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public Matrix44F GetMatrix44F(string key) パラメータ key 戻り値 GetTexture(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public TextureBase GetTexture(string key) パラメータ key 戻り値 GetVector4F(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector4F GetVector4F(string key) パラメータ key 戻り値 SetMatrix44F(String, Matrix44F) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetMatrix44F(string key, Matrix44F value) パラメータ key value SetTexture(String, TextureBase) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetTexture(string key, TextureBase value) パラメータ key value SetVector4F(String, Vector4F) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetVector4F(string key, Vector4F value) パラメータ key value <!-- -->"
  },
  "References/Altseed2.MaterialPropertyBlockCollection.html": {
    "href": "References/Altseed2.MaterialPropertyBlockCollection.html",
    "title": "MaterialPropertyBlockCollection クラス | Altseed2",
    "keywords": "MaterialPropertyBlockCollection クラス 継承関係 Object MaterialPropertyBlockCollection メンバー メソッド Add(MaterialPropertyBlock) Clear() GetMatrix44F(String) GetTexture(String) GetVector4F(String) メソッド Add(MaterialPropertyBlock) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Add(MaterialPropertyBlock block) パラメータ block Clear() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Clear() GetMatrix44F(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public Matrix44F GetMatrix44F(string key) パラメータ key 戻り値 GetTexture(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public TextureBase GetTexture(string key) パラメータ key 戻り値 GetVector4F(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector4F GetVector4F(string key) パラメータ key 戻り値 <!-- -->"
  },
  "References/Altseed2.MathHelper.html": {
    "href": "References/Altseed2.MathHelper.html",
    "title": "MathHelper クラス | Altseed2",
    "keywords": "MathHelper クラス 数学の演算を補助するクラス 継承関係 Object MathHelper メンバー フィールド MatrixError 行列で使用 誤差 PiPer180 メソッド CalcFromTransform2D(Matrix44F, out Vector2F, out Vector2F, out Single) Matrix44F から2次元座標，拡大率，角度を算出します。 CalcFromTransform3D(Matrix44F, out Vector3F, out Vector3F, out Matrix44F) Matrix44F から3次元座標，拡大率，角度を算出します。 CalcTransform(Vector2F, Single, Vector2F) Transformを計算します。 Clamp(Int32, Int32, Int32) 指定した値を決められた範囲に丸めます。 Clamp(Single, Single, Single) 指定した値を決められた範囲に丸めます。 Clamp<T>(T, T, T) 指定した値を決められた範囲に丸めます。 DegreeToRadian(Single) 度数法の値を弧度法の値に変換します。 GetMinMax(out Vector2F, out Vector2F, Vector2F[]) 指定した頂点を全て含む長方形のうち左上と右下の座標を割り出します。 RadianToDegree(Single) 弧度法の値を度数法の値に変換します。 フィールド MatrixError 行列で使用 誤差 <!-- <h5 class=\"decalaration\">宣言</h5> --> const float MatrixError = 1E-05F PiPer180 <!-- <h5 class=\"decalaration\">宣言</h5> --> const float PiPer180 = 0.0174532924F メソッド CalcFromTransform2D(Matrix44F, out Vector2F, out Vector2F, out Single) Matrix44F から2次元座標，拡大率，角度を算出します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static void CalcFromTransform2D(Matrix44F transform, out Vector2F absolutePosition, out Vector2F scale, out float angle) パラメータ transform 計算元となる4x4行列 absolutePosition 出力される座標 scale 出力される拡大率 angle 出力される角度(度数法) CalcFromTransform3D(Matrix44F, out Vector3F, out Vector3F, out Matrix44F) Matrix44F から3次元座標，拡大率，角度を算出します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static void CalcFromTransform3D(Matrix44F transform, out Vector3F absolutePosition, out Vector3F scale, out Matrix44F rotation) パラメータ transform 計算元となる4x4行列 absolutePosition 出力される座標 scale 出力される拡大率 rotation 出力される回転行列 CalcTransform(Vector2F, Single, Vector2F) Transformを計算します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> static Matrix44F CalcTransform(Vector2F position, float angle, Vector2F scale) パラメータ position 座標 angle 角度（弧度法） scale 拡大率 戻り値 Clamp(Int32, Int32, Int32) 指定した値を決められた範囲に丸めます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static int Clamp(int v, int max, int min) パラメータ v 丸める値 max 最大値 min 最小値 戻り値 v が max 以上であったり min 未満であった場合はその値が，それ以外では v そのまま返される Clamp(Single, Single, Single) 指定した値を決められた範囲に丸めます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float Clamp(float v, float max, float min) パラメータ v 丸める値 max 最大値 min 最小値 戻り値 v が max 以上であったり min 未満であった場合はその値が，それ以外では v そのまま返される Clamp<T>(T, T, T) 指定した値を決められた範囲に丸めます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static T Clamp<T>(T v, T max, T min) where T : IComparable<T> パラメータ v 丸める値 max 最大値 min 最小値 戻り値 v が max 以上であったり min 未満であった場合はその値が，それ以外では v そのまま返される Type Parameters 名前 説明 T DegreeToRadian(Single) 度数法の値を弧度法の値に変換します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float DegreeToRadian(float degree) パラメータ degree 変換したい度数法の値 戻り値 弧度法としての degree の値 GetMinMax(out Vector2F, out Vector2F, Vector2F[]) 指定した頂点を全て含む長方形のうち左上と右下の座標を割り出します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> static void GetMinMax(out Vector2F min, out Vector2F max, params Vector2F[] positions) パラメータ min 左上の座標 max 右下の座標 positions 計算する座標 例外 型 Condition ArgumentNullException positions がnull RadianToDegree(Single) 弧度法の値を度数法の値に変換します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float RadianToDegree(float radian) パラメータ radian 変換したい弧度法の値 戻り値 度数法としての radian の値 <!-- -->"
  },
  "References/Altseed2.Matrix33F.html": {
    "href": "References/Altseed2.Matrix33F.html",
    "title": "Matrix33F 構造体 | Altseed2",
    "keywords": "Matrix33F 構造体 Single 型の3x3行列を表す構造体 メンバー プロパティ Identity 単位行列を取得します。 Inversion 逆行列を取得します。 Item[Int32, Int32] 指定したX，Y成分の値を取得または設定します。 TransPosition 転置行列を取得します。 メソッド Clone() このインスタンスの複製を作成します。 GetRotation(Single) 指定した角度分の回転を表す行列を取得します。 GetScale(Vector2F) 2D座標の拡大率を表す行列を取得します。 GetTranslation(Vector2F) 2D座標の平行移動分を表す行列を取得します。 Transform2D(Vector2F) 行列でベクトルを変形させる。 Transform3D(Vector3F) 行列でベクトルを変形させる。 プロパティ Identity 単位行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix33F Identity { get; } Inversion 逆行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Matrix33F Inversion { get; } Item[Int32, Int32] 指定したX，Y成分の値を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float this[int x, int y] { get; set; } パラメータ x 取得する値のX成分 y 取得する値のY成分 例外 型 Condition ArgumentOutOfRangeException x または y が0未満または3以上 TransPosition 転置行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Matrix33F TransPosition { get; } メソッド Clone() このインスタンスの複製を作成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Matrix33F Clone() 戻り値 このインスタンスの複製 GetRotation(Single) 指定した角度分の回転を表す行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix33F GetRotation(float radian) パラメータ radian 回転させる角度(弧度法) 戻り値 radian の回転分を表す行列 GetScale(Vector2F) 2D座標の拡大率を表す行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix33F GetScale(Vector2F scale) パラメータ scale 設定する拡大率 戻り値 scale 分の拡大/縮小を表す行列 GetTranslation(Vector2F) 2D座標の平行移動分を表す行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix33F GetTranslation(Vector2F position) パラメータ position 平行移動する座標 戻り値 position 分の平行移動を表す行列 Transform2D(Vector2F) 行列でベクトルを変形させる。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Transform2D(Vector2F in_) パラメータ in_ 変形前ベクトル 戻り値 変形後ベクトル Transform3D(Vector3F) 行列でベクトルを変形させる。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector3F Transform3D(Vector3F in_) パラメータ in_ 変形前ベクトル 戻り値 変形後ベクトル <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.ICloneable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"System.IEquatable`1\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Matrix33I.html": {
    "href": "References/Altseed2.Matrix33I.html",
    "title": "Matrix33I 構造体 | Altseed2",
    "keywords": "Matrix33I 構造体 Int32 型の3x3行列を表す構造体 メンバー プロパティ Identity 単位行列を取得します。 Item[Int32, Int32] 指定したX，Y成分の値を取得または設定します。 TransPosition 転置行列を取得します。 メソッド Clone() このインスタンスの複製を作成します。 GetScale(Vector2I) 2D座標の拡大率を表す行列を取得します。 GetTranslation(Vector2I) 2D座標の平行移動分を表す行列を取得します。 Transform2D(Vector2I) 行列でベクトルを変形させる。 Transform3D(Vector3I) 行列でベクトルを変形させる。 プロパティ Identity 単位行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix33I Identity { get; } Item[Int32, Int32] 指定したX，Y成分の値を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int this[int x, int y] { get; set; } パラメータ x 取得する値のX成分 y 取得する値のY成分 例外 型 Condition ArgumentOutOfRangeException x または y が0未満または3以上 TransPosition 転置行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Matrix33I TransPosition { get; } メソッド Clone() このインスタンスの複製を作成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Matrix33I Clone() 戻り値 このインスタンスの複製 GetScale(Vector2I) 2D座標の拡大率を表す行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix33I GetScale(Vector2I scale) パラメータ scale 設定する拡大率 戻り値 scale 分の拡大/縮小を表す行列 GetTranslation(Vector2I) 2D座標の平行移動分を表す行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix33I GetTranslation(Vector2I position) パラメータ position 平行移動する座標 戻り値 position 分の平行移動を表す行列 Transform2D(Vector2I) 行列でベクトルを変形させる。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2I Transform2D(Vector2I in_) パラメータ in_ 変形前ベクトル 戻り値 変形後ベクトル Transform3D(Vector3I) 行列でベクトルを変形させる。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector3I Transform3D(Vector3I in_) パラメータ in_ 変形前ベクトル 戻り値 変形後ベクトル <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.ICloneable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"System.IEquatable`1\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Matrix44F.html": {
    "href": "References/Altseed2.Matrix44F.html",
    "title": "Matrix44F 構造体 | Altseed2",
    "keywords": "Matrix44F 構造体 Single 型の4x4行列を表す構造体 メンバー プロパティ Identity 単位行列を取得します。 Inverse 逆行列を取得します。 Item[Int32, Int32] 指定したX，Y成分の値を取得または設定します。 Transposed 転置行列を取得します。 メソッド Clone() このインスタンスの複製を作成します。 GetLookAtLH(Vector3F, Vector3F, Vector3F) カメラ行列(左手系)を取得します。 GetLookAtRH(Vector3F, Vector3F, Vector3F) カメラ行列(右手系)を取得します。 GetOrthographicLH(Single, Single, Single, Single) 正射影行列(左手系)を取得します。 GetOrthographicRH(Single, Single, Single, Single) 正射影行列(右手系)を取得します。 GetPerspectiveFovLH(Single, Single, Single, Single) 射影行列(左手系)を取得します。 GetPerspectiveFovRH(Single, Single, Single, Single) 射影行列(右手系)を取得します。 GetPerspectiveFovRH_OpenGL(Single, Single, Single, Single) OpenGL用射影行列(右手系)を取得します。 GetQuaternion(Vector4F) クオータニオンを元に回転行列(右手)を取得します。 GetRotationAxis(Vector3F, Single) 任意軸の反時計回転行列(右手)を取得します。 GetRotationX(Single) 指定した角度分のX軸回転(右手)を表す行列を取得します。 GetRotationY(Single) 指定した角度分のY軸回転(右手)を表す行列を取得します。 GetRotationZ(Single) 指定した角度分のZ軸回転(右手)を表す行列を取得します。 GetScale2D(Vector2F) 2D座標の拡大率を表す行列を取得します。 GetScale3D(Vector3F) 3D座標の拡大率を表す行列を取得します。 GetTranslation2D(Vector2F) 2D座標の平行移動分を表す行列を取得します。 GetTranslation3D(Vector3F) 3D座標の平行移動分を表す行列を取得します。 Transform3D(Vector3F) 行列でベクトルを変形させる。 Transform4D(Vector4F) 行列でベクトルを変形させる。 プロパティ Identity 単位行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F Identity { get; } Inverse 逆行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Matrix44F Inverse { get; } Item[Int32, Int32] 指定したX，Y成分の値を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float this[int x, int y] { get; set; } パラメータ x 取得する値のX成分 y 取得する値のY成分 例外 型 Condition ArgumentOutOfRangeException x または y が0未満または4以上 Transposed 転置行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Matrix44F Transposed { get; } メソッド Clone() このインスタンスの複製を作成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Matrix44F Clone() 戻り値 このインスタンスの複製 GetLookAtLH(Vector3F, Vector3F, Vector3F) カメラ行列(左手系)を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F GetLookAtLH(Vector3F eye, Vector3F at, Vector3F up) パラメータ eye カメラの位置 at カメラの注視点 up カメラの上方向 戻り値 GetLookAtRH(Vector3F, Vector3F, Vector3F) カメラ行列(右手系)を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F GetLookAtRH(Vector3F eye, Vector3F at, Vector3F up) パラメータ eye カメラの位置 at カメラの注視点 up カメラの上方向 戻り値 GetOrthographicLH(Single, Single, Single, Single) 正射影行列(左手系)を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F GetOrthographicLH(float width, float height, float zn, float zf) パラメータ width 横幅 height 縦幅 zn 最近距離 zf 最遠距離 戻り値 GetOrthographicRH(Single, Single, Single, Single) 正射影行列(右手系)を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F GetOrthographicRH(float width, float height, float zn, float zf) パラメータ width 横幅 height 縦幅 zn 最近距離 zf 最遠距離 戻り値 GetPerspectiveFovLH(Single, Single, Single, Single) 射影行列(左手系)を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F GetPerspectiveFovLH(float ovY, float aspect, float zn, float zf) パラメータ ovY Y方向への視野角(度数法) aspect 画面のアスペクト比 zn 最近距離 zf 最遠距離 戻り値 GetPerspectiveFovRH(Single, Single, Single, Single) 射影行列(右手系)を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F GetPerspectiveFovRH(float ovY, float aspect, float zn, float zf) パラメータ ovY Y方向への視野角(弧度法) aspect 画面のアスペクト比 zn 最近距離 zf 最遠距離 戻り値 GetPerspectiveFovRH_OpenGL(Single, Single, Single, Single) OpenGL用射影行列(右手系)を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F GetPerspectiveFovRH_OpenGL(float ovY, float aspect, float zn, float zf) パラメータ ovY Y方向への視野角(弧度法) aspect 画面のアスペクト比 zn 最近距離 zf 最遠距離 戻り値 GetQuaternion(Vector4F) クオータニオンを元に回転行列(右手)を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F GetQuaternion(Vector4F quaternion) パラメータ quaternion 使用するクオータニオン 戻り値 GetRotationAxis(Vector3F, Single) 任意軸の反時計回転行列(右手)を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F GetRotationAxis(Vector3F axis, float radian) パラメータ axis 軸 radian 回転量(弧度法) 戻り値 GetRotationX(Single) 指定した角度分のX軸回転(右手)を表す行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F GetRotationX(float radian) パラメータ radian X軸回転させる角度(弧度法) 戻り値 radian のX軸回転分を表す行列 GetRotationY(Single) 指定した角度分のY軸回転(右手)を表す行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F GetRotationY(float radian) パラメータ radian Y軸回転させる角度(弧度法) 戻り値 radian のY軸回転分を表す行列 GetRotationZ(Single) 指定した角度分のZ軸回転(右手)を表す行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F GetRotationZ(float radian) パラメータ radian Z軸回転させる角度(弧度法) 戻り値 radian のZ軸回転分を表す行列 GetScale2D(Vector2F) 2D座標の拡大率を表す行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F GetScale2D(Vector2F scale2D) パラメータ scale2D 設定する拡大率 戻り値 scale2D 分の拡大/縮小を表す行列 GetScale3D(Vector3F) 3D座標の拡大率を表す行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F GetScale3D(Vector3F scale3D) パラメータ scale3D 設定する拡大率 戻り値 scale3D 分の拡大/縮小を表す行列 GetTranslation2D(Vector2F) 2D座標の平行移動分を表す行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F GetTranslation2D(Vector2F position2D) パラメータ position2D 平行移動する座標 戻り値 position2D 分の平行移動を表す行列 GetTranslation3D(Vector3F) 3D座標の平行移動分を表す行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44F GetTranslation3D(Vector3F position3D) パラメータ position3D 平行移動する座標 戻り値 position3D 分の平行移動を表す行列 Transform3D(Vector3F) 行列でベクトルを変形させる。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector3F Transform3D(Vector3F vector) パラメータ vector 変形前ベクトル 戻り値 変形後ベクトル Transform4D(Vector4F) 行列でベクトルを変形させる。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector4F Transform4D(Vector4F vector) パラメータ vector 変形前ベクトル 戻り値 変形後ベクトル <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.ICloneable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"System.IEquatable`1\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Matrix44I.html": {
    "href": "References/Altseed2.Matrix44I.html",
    "title": "Matrix44I 構造体 | Altseed2",
    "keywords": "Matrix44I 構造体 Int32 型の4x4行列を表す構造体 メンバー プロパティ Identity 単位行列を取得します。 Item[Int32, Int32] 指定したX，Y成分の値を取得または設定します。 TransPosition 転置行列を取得します。 メソッド Clone() このインスタンスの複製を作成します。 GetQuaternion(Vector4I) クオータニオンを元に回転行列(右手)を取得します。 GetScale2D(Vector2I) 2D座標の拡大率を表す行列を取得します。 GetScale3D(Vector3I) 3D座標の拡大率を表す行列を取得します。 GetTranslation2D(Vector2I) 2D座標の平行移動分を表す行列を取得します。 GetTranslation3D(Vector3I) 3D座標の平行移動分を表す行列を取得します。 Transform3D(Vector3I) 行列でベクトルを変形させる。 Transform4D(Vector4I) 行列でベクトルを変形させる。 プロパティ Identity 単位行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44I Identity { get; } Item[Int32, Int32] 指定したX，Y成分の値を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int this[int x, int y] { get; set; } パラメータ x 取得する値のX成分 y 取得する値のY成分 例外 型 Condition ArgumentOutOfRangeException x または y が0未満または4以上 TransPosition 転置行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Matrix44I TransPosition { get; } メソッド Clone() このインスタンスの複製を作成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Matrix44I Clone() 戻り値 このインスタンスの複製 GetQuaternion(Vector4I) クオータニオンを元に回転行列(右手)を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44I GetQuaternion(Vector4I quaternion) パラメータ quaternion 使用するクオータニオン 戻り値 GetScale2D(Vector2I) 2D座標の拡大率を表す行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44I GetScale2D(Vector2I scale2D) パラメータ scale2D 設定する拡大率 戻り値 scale2D 分の拡大/縮小を表す行列 GetScale3D(Vector3I) 3D座標の拡大率を表す行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44I GetScale3D(Vector3I scale3D) パラメータ scale3D 設定する拡大率 戻り値 scale3D 分の拡大/縮小を表す行列 GetTranslation2D(Vector2I) 2D座標の平行移動分を表す行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44I GetTranslation2D(Vector2I position2D) パラメータ position2D 平行移動する座標 戻り値 position2D 分の平行移動を表す行列 GetTranslation3D(Vector3I) 3D座標の平行移動分を表す行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Matrix44I GetTranslation3D(Vector3I position3D) パラメータ position3D 平行移動する座標 戻り値 position3D 分の平行移動を表す行列 Transform3D(Vector3I) 行列でベクトルを変形させる。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector3I Transform3D(Vector3I in_) パラメータ in_ 変形前ベクトル 戻り値 変形後ベクトル Transform4D(Vector4I) 行列でベクトルを変形させる。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector4I Transform4D(Vector4I in_) パラメータ in_ 変形前ベクトル 戻り値 変形後ベクトル <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.ICloneable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"System.IEquatable`1\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.MediaPlayer.html": {
    "href": "References/Altseed2.MediaPlayer.html",
    "title": "MediaPlayer クラス | Altseed2",
    "keywords": "MediaPlayer クラス 映像を再生するクラス 継承関係 Object MediaPlayer メンバー プロパティ CurrentFrame 映像の現在のフレーム番号を取得します。 Size 映像の大きさを取得します。 メソッド Load(String) 映像を読み込みます。 Play(Boolean) 映像を再生します。 WriteToRenderTexture(RenderTexture) 現在の映像のフレームをテクスチャに書き込みます。映像とテクスチャは同じサイズである必要があります。 プロパティ CurrentFrame 映像の現在のフレーム番号を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int CurrentFrame { get; } Size 映像の大きさを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2I Size { get; } メソッド Load(String) 映像を読み込みます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static MediaPlayer Load(string path) パラメータ path パス(パッケージ内の映像は読み込めません。) 戻り値 Play(Boolean) 映像を再生します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Play(bool isLoopingMode) パラメータ isLoopingMode ループ再生するか? 戻り値 WriteToRenderTexture(RenderTexture) 現在の映像のフレームをテクスチャに書き込みます。映像とテクスチャは同じサイズである必要があります。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool WriteToRenderTexture(RenderTexture target) パラメータ target テクスチャ 戻り値 <!-- -->"
  },
  "References/Altseed2.Mouse.html": {
    "href": "References/Altseed2.Mouse.html",
    "title": "Mouse クラス | Altseed2",
    "keywords": "Mouse クラス マウスを表します。 継承関係 Object Mouse メンバー プロパティ CursorImage CursorMode カーソルのモードを取得または設定します。 Position マウスカーソルの座標を取得または設定します。 Wheel マウスホイールの回転量を取得します。 メソッド GetMouseButtonState(MouseButton) マウスボタンの状態を取得します。 RefreshInputState() プロパティ CursorImage <!-- <h5 class=\"decalaration\">宣言</h5> --> public Cursor CursorImage { set; } CursorMode カーソルのモードを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public CursorMode CursorMode { get; set; } Position マウスカーソルの座標を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Position { get; set; } Wheel マウスホイールの回転量を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Wheel { get; } メソッド GetMouseButtonState(MouseButton) マウスボタンの状態を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ButtonState GetMouseButtonState(MouseButton button) パラメータ button 状態を取得するマウスのボタン 戻り値 RefreshInputState() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void RefreshInputState() <!-- -->"
  },
  "References/Altseed2.MouseButton.html": {
    "href": "References/Altseed2.MouseButton.html",
    "title": "MouseButton 列挙体 | Altseed2",
    "keywords": "MouseButton 列挙体 マウスのボタンの種類を表します。 メンバー ButtonLeft ButtonMiddle ButtonRight SubButton1 SubButton2 SubButton3 SubButton4 SubButton5"
  },
  "References/Altseed2.Node.html": {
    "href": "References/Altseed2.Node.html",
    "title": "Node クラス | Altseed2",
    "keywords": "Node クラス ゲームシーンを構成するノードを表します。 継承関係 Object Altseed2.Registerable < Node > Node CollisionManagerNode PostEffectNode TransformerNode TransformNode TransitionNode メンバー コンストラクタ Node() Node の新しいインスタンスを生成します。 プロパティ Children 子要素のコレクションを取得します。 IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 IsUpdated この Node が更新されるかどうかを取得または設定します。 IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Parent 親ノードを取得または設定します。 Status このノードの登録状況を取得または設定します。 メソッド AddChildNode(Node) 子要素を追加します。 EnumerateAncestors() 先祖ノードを列挙します。 EnumerateDescendants() 子孫ノードを列挙します。 EnumerateDescendants<T>(Func<T, Boolean>) T 型の子孫ノードのうち condition を満たすものを列挙します。 FlushQueue() 予約されている追加・削除を直ちに実行します。 OnAdded() エンジンに追加された時に実行します。 OnRemoved() エンジンから削除された時に実行します。 OnUpdate() 自身が更新された時に実行します。 PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 RemoveChildNode(Node) 子要素を削除します。 コンストラクタ Node() Node の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Node() プロパティ Children 子要素のコレクションを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ReadOnlyCollection<Node> Children { get; } IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsRegistered { get; } IsUpdated この Node が更新されるかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsUpdated { get; set; } IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsUpdatedActually { get; } Parent 親ノードを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Node Parent { get; } Status このノードの登録状況を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed RegisteredStatus Status { get; } メソッド AddChildNode(Node) 子要素を追加します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void AddChildNode(Node node) パラメータ node 追加する要素 EnumerateAncestors() 先祖ノードを列挙します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public IEnumerable<Node> EnumerateAncestors() 戻り値 EnumerateDescendants() 子孫ノードを列挙します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public IEnumerable<Node> EnumerateDescendants() 戻り値 EnumerateDescendants<T>(Func<T, Boolean>) T 型の子孫ノードのうち condition を満たすものを列挙します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public IEnumerable<T> EnumerateDescendants<T>(Func<T, bool> condition = null) where T : Node パラメータ condition 列挙するノードの条件 戻り値 Type Parameters 名前 説明 T 列挙されるノードの型 FlushQueue() 予約されている追加・削除を直ちに実行します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public virtual void FlushQueue() Remarks この Node 自身の更新中に実行することはできません。 OnAdded() エンジンに追加された時に実行します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected virtual void OnAdded() Remarks 自身もしくは親ノードがEngineに登録されたあとのUpdateの際に実行されます。 OnRemoved() エンジンから削除された時に実行します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected virtual void OnRemoved() Remarks 自身もしくは親ノードがEngineにから削除されたあとのUpdateの際に実行されます。 OnUpdate() 自身が更新された時に実行します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected virtual void OnUpdate() PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> void PropagateIsUpdatedActually(Node node, bool isUpdatedActually) パラメータ node IsUpdatedActually を変更する対象のノード isUpdatedActually 親ノードの IsUpdatedActually RemoveChildNode(Node) 子要素を削除します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void RemoveChildNode(Node node) パラメータ node 削除する要素 <!-- -->"
  },
  "References/Altseed2.PolygonCollider.html": {
    "href": "References/Altseed2.PolygonCollider.html",
    "title": "PolygonCollider クラス | Altseed2",
    "keywords": "PolygonCollider クラス 多角形コライダのクラス 継承関係 Object Collider PolygonCollider 継承したメンバー Collider.Position 座標を取得または設定します。 Collider.Rotation 回転(弧度法)を取得または設定します。 Collider.Transform 変形行列を取得または設定します。 Collider.GetIsCollidedWith(Collider) 指定したコライダとの衝突判定を行います。 メンバー コンストラクタ PolygonCollider() PolygonCollider の新しいインスタンスを生成します。 プロパティ Buffers インデックスバッファーを取得または設定します。 Vertexes 頂点情報のコレクションを取得または設定します。 メソッド Create() 多角形コライダを作成します。 SetBuffers(IEnumerable<Int32>) インデックスバッファーを設定します。 SetBuffers(ReadOnlySpan<Int32>) インデックスバッファーを設定します。 SetDefaultIndexBuffer() インデックスバッファーを既定のものに設定します。 SetVertexes(IEnumerable<Vector2F>, Boolean) 指定した座標に頂点を設定します。 SetVertexes(ReadOnlySpan<Vector2F>, Boolean) 指定した座標に頂点を設定する コンストラクタ PolygonCollider() PolygonCollider の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public PolygonCollider() プロパティ Buffers インデックスバッファーを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public IReadOnlyList<int> Buffers { get; set; } Vertexes 頂点情報のコレクションを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public IReadOnlyList<Vector2F> Vertexes { get; set; } メソッド Create() 多角形コライダを作成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static PolygonCollider Create() 戻り値 SetBuffers(IEnumerable<Int32>) インデックスバッファーを設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetBuffers(IEnumerable<int> buffers) パラメータ buffers 設定する座標 Remarks サイズは3の倍数である必要があります 余った値は無視されます SetBuffers(ReadOnlySpan<Int32>) インデックスバッファーを設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetBuffers(ReadOnlySpan<int> buffers) パラメータ buffers 設定するインデックスバッファー Remarks サイズは3の倍数である必要があります 余った値は無視されます SetDefaultIndexBuffer() インデックスバッファーを既定のものに設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetDefaultIndexBuffer() SetVertexes(IEnumerable<Vector2F>, Boolean) 指定した座標に頂点を設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetVertexes(IEnumerable<Vector2F> positions, bool resetIB = true) パラメータ positions 設定する座標 resetIB Buffers を自動計算したものに設定するかどうか SetVertexes(ReadOnlySpan<Vector2F>, Boolean) 指定した座標に頂点を設定する <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetVertexes(ReadOnlySpan<Vector2F> positions, bool resetIB = true) パラメータ positions 設定する座標 resetIB Buffers を自動計算したものに設定するかどうか <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.PolygonColliderNode.html": {
    "href": "References/Altseed2.PolygonColliderNode.html",
    "title": "PolygonColliderNode クラス | Altseed2",
    "keywords": "PolygonColliderNode クラス ポリゴンコライダを管理するノード 継承関係 Object Altseed2.Registerable < Node > Node TransformNode ColliderNode PolygonColliderNode 継承したメンバー TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ PolygonColliderNode() 既定の PolygonCollider を使用して PolygonColliderNode の新しいインスタンスを生成します。 プロパティ Buffers インデックスバッファーを取得または設定します。 ContentSize コンテンツのサイズを取得します。 InheritedTransform 先祖の変形を加味した変形行列を取得します。 Vertexes 頂点情報の配列を取得または設定します。 メソッド SetBuffers(IEnumerable<Int32>) インデックスバッファーを設定します。 SetBuffers(ReadOnlySpan<Int32>) インデックスバッファーを設定します。 SetVertexes(IEnumerable<Vector2F>, Boolean) 指定した座標に頂点を設定します。 SetVertexes(Span<Vector2F>, Boolean) 指定した座標に頂点を設定する コンストラクタ PolygonColliderNode() 既定の PolygonCollider を使用して PolygonColliderNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public PolygonColliderNode() プロパティ Buffers インデックスバッファーを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public IReadOnlyList<int> Buffers { get; set; } ContentSize コンテンツのサイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed Vector2F ContentSize { get; } InheritedTransform 先祖の変形を加味した変形行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed Matrix44F InheritedTransform { get; } Vertexes 頂点情報の配列を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public IReadOnlyList<Vector2F> Vertexes { get; set; } 例外 型 Condition ArgumentNullException 設定しようとした値がnull メソッド SetBuffers(IEnumerable<Int32>) インデックスバッファーを設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetBuffers(IEnumerable<int> buffers) パラメータ buffers 設定する座標 Remarks サイズは3の倍数である必要があります 余った値は無視されます SetBuffers(ReadOnlySpan<Int32>) インデックスバッファーを設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetBuffers(ReadOnlySpan<int> buffers) パラメータ buffers 設定するインデックスバッファー Remarks サイズは3の倍数である必要があります 余った値は無視されます SetVertexes(IEnumerable<Vector2F>, Boolean) 指定した座標に頂点を設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetVertexes(IEnumerable<Vector2F> positions, bool resetIB = true) パラメータ positions 設定する座標 resetIB Buffers を自動計算したものに設定するかどうか 例外 型 Condition ArgumentNullException positions がnull SetVertexes(Span<Vector2F>, Boolean) 指定した座標に頂点を設定する <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetVertexes(Span<Vector2F> positions, bool resetIB = true) パラメータ positions 設定する座標 resetIB Buffers を自動計算したものに設定するかどうか <!-- -->"
  },
  "References/Altseed2.PolygonColliderVisualizeNode.html": {
    "href": "References/Altseed2.PolygonColliderVisualizeNode.html",
    "title": "PolygonColliderVisualizeNode クラス | Altseed2",
    "keywords": "PolygonColliderVisualizeNode クラス 継承関係 Object Altseed2.Registerable < Node > Node TransformNode PolygonNode PolygonColliderVisualizeNode 継承したメンバー PolygonNode.CameraGroup カメラグループを取得または設定します。 PolygonNode.ZOrder 描画時の重ね順を取得または設定します。 PolygonNode.IsDrawn このノードを描画するかどうかを取得または設定します。 PolygonNode.IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 PolygonNode.FlushQueue() 予約されている追加・削除を直ちに実行します。 PolygonNode.AlphaBlend ブレンドモードを取得または設定します。 PolygonNode.Src Texture を切り出す範囲を取得または設定します。 PolygonNode.Texture 描画するテクスチャを取得または設定します。 PolygonNode.Material 描画に適用するマテリアルを取得または設定します。 PolygonNode.InheritedTransform 先祖の変形を加味した変形行列を取得します。 PolygonNode.Vertexes 頂点情報のコレクションを取得または設定します。 PolygonNode.SetVertexes(ReadOnlySpan<Vertex>, Boolean) 座標をもとに頂点情報を設定します。 PolygonNode.SetVertexes(IEnumerable<Vertex>, Boolean) 座標をもとに頂点情報を設定します。 PolygonNode.SetVertexes(ReadOnlySpan<Vector2F>, Color, Boolean) 座標をもとに頂点情報を設定します。 PolygonNode.SetVertexes(IEnumerable<Vector2F>, Color, Boolean) 座標をもとに頂点情報を設定します。 PolygonNode.OverwriteVertexColor(Color) 各頂点に指定した色を設定します。 PolygonNode.Buffers インデックスバッファを取得または設定します。 PolygonNode.SetBuffers(ReadOnlySpan<Int32>) インデックスバッファーを設定します。 PolygonNode.SetBuffers(IEnumerable<Int32>) インデックスバッファーを設定します。 PolygonNode.SetVertexGroups(IEnumerable<IEnumerable<Vertex>>) 設定した頂点のグループを設定し，そのグループごとに PolygonNode と同様の方式でインデックスバッファーを設定します。 PolygonNode.SetVertexGroupsFromPositions(IEnumerable<IEnumerable<Vector2F>>, Color) 設定した座標をもとに頂点のグループを設定し，そのグループごとに PolygonNode と同様の方式でインデックスバッファーを設定します。 PolygonNode.SetDefaultIndexBuffer() PolygonNode と同様の方法でインデックスバッファの設定を行います。 PolygonNode.ContentSize コンテンツのサイズを取得します。 TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.ICullableDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.PolygonNode.html": {
    "href": "References/Altseed2.PolygonNode.html",
    "title": "PolygonNode クラス | Altseed2",
    "keywords": "PolygonNode クラス 図形を描画するノードを表します。 継承関係 Object Altseed2.Registerable < Node > Node TransformNode PolygonNode PolygonColliderVisualizeNode 継承したメンバー TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ PolygonNode() PolygonNode の新しいインスタンスを生成します。 プロパティ AlphaBlend ブレンドモードを取得または設定します。 Buffers インデックスバッファを取得または設定します。 CameraGroup カメラグループを取得または設定します。 ContentSize コンテンツのサイズを取得します。 InheritedTransform 先祖の変形を加味した変形行列を取得します。 IsDrawn このノードを描画するかどうかを取得または設定します。 IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 Material 描画に適用するマテリアルを取得または設定します。 Src Texture を切り出す範囲を取得または設定します。 Texture 描画するテクスチャを取得または設定します。 Vertexes 頂点情報のコレクションを取得または設定します。 ZOrder 描画時の重ね順を取得または設定します。 メソッド FlushQueue() 予約されている追加・削除を直ちに実行します。 OverwriteVertexColor(Color) 各頂点に指定した色を設定します。 SetBuffers(IEnumerable<Int32>) インデックスバッファーを設定します。 SetBuffers(ReadOnlySpan<Int32>) インデックスバッファーを設定します。 SetDefaultIndexBuffer() PolygonNode と同様の方法でインデックスバッファの設定を行います。 SetVertexes(IEnumerable<Vector2F>, Color, Boolean) 座標をもとに頂点情報を設定します。 SetVertexes(IEnumerable<Vertex>, Boolean) 座標をもとに頂点情報を設定します。 SetVertexes(ReadOnlySpan<Vector2F>, Color, Boolean) 座標をもとに頂点情報を設定します。 SetVertexes(ReadOnlySpan<Vertex>, Boolean) 座標をもとに頂点情報を設定します。 SetVertexGroups(IEnumerable<IEnumerable<Vertex>>) 設定した頂点のグループを設定し，そのグループごとに PolygonNode と同様の方式でインデックスバッファーを設定します。 SetVertexGroupsFromPositions(IEnumerable<IEnumerable<Vector2F>>, Color) 設定した座標をもとに頂点のグループを設定し，そのグループごとに PolygonNode と同様の方式でインデックスバッファーを設定します。 コンストラクタ PolygonNode() PolygonNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public PolygonNode() 例外 型 Condition InvalidOperationException Graphics機能が初期化されていない。 プロパティ AlphaBlend ブレンドモードを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public AlphaBlend AlphaBlend { get; set; } Buffers インデックスバッファを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public IReadOnlyList<int> Buffers { get; set; } Remarks 大きさは3の倍数である必要があります。余った要素は無視されます。 例外 型 Condition ArgumentNullException 設定しようとした値がnull CameraGroup カメラグループを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ulong CameraGroup { get; set; } ContentSize コンテンツのサイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed Vector2F ContentSize { get; } InheritedTransform 先祖の変形を加味した変形行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed Matrix44F InheritedTransform { get; } IsDrawn このノードを描画するかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsDrawn { get; set; } IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsDrawnActually { get; } Material 描画に適用するマテリアルを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Material Material { get; set; } Src Texture を切り出す範囲を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public RectF Src { get; set; } Texture 描画するテクスチャを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public TextureBase Texture { get; set; } Vertexes 頂点情報のコレクションを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public IReadOnlyList<Vertex> Vertexes { get; set; } ZOrder 描画時の重ね順を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int ZOrder { get; set; } メソッド FlushQueue() 予約されている追加・削除を直ちに実行します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override void FlushQueue() Remarks この Node 自身の更新中に実行することはできません。 OverwriteVertexColor(Color) 各頂点に指定した色を設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void OverwriteVertexColor(Color color) パラメータ color 設定する色 SetBuffers(IEnumerable<Int32>) インデックスバッファーを設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetBuffers(IEnumerable<int> buffers) パラメータ buffers 設定するインデックスバッファー Remarks 大きさは3の倍数である必要があります。余った要素は無視されます。 例外 型 Condition ArgumentNullException buffers がnull SetBuffers(ReadOnlySpan<Int32>) インデックスバッファーを設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetBuffers(ReadOnlySpan<int> buffers) パラメータ buffers 設定するインデックスバッファー Remarks 大きさは3の倍数である必要があります。余った要素は無視されます。 SetDefaultIndexBuffer() PolygonNode と同様の方法でインデックスバッファの設定を行います。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetDefaultIndexBuffer() SetVertexes(IEnumerable<Vector2F>, Color, Boolean) 座標をもとに頂点情報を設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetVertexes(IEnumerable<Vector2F> vertexes, Color color, bool resetIB = true) パラメータ vertexes 設定する各頂点の座標を格納する IEnumerable<T> color 各頂点に設定する色 resetIB Buffers を自動計算したものに設定するかどうか 例外 型 Condition ArgumentNullException vertexes がnullです。 SetVertexes(IEnumerable<Vertex>, Boolean) 座標をもとに頂点情報を設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetVertexes(IEnumerable<Vertex> vertexes, bool resetIB = true) パラメータ vertexes 設定する各頂点の座標を格納する IEnumerable<T> resetIB Buffers を自動計算したものに設定するかどうか Remarks 色は白(255, 255, 255)に設定されます。 例外 型 Condition ArgumentNullException vertexes がnullです。 SetVertexes(ReadOnlySpan<Vector2F>, Color, Boolean) 座標をもとに頂点情報を設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetVertexes(ReadOnlySpan<Vector2F> vertexes, Color color, bool resetIB = true) パラメータ vertexes 設定する各頂点の座標を格納する Span<T> color 各頂点に設定する色 resetIB Buffers を自動計算したものに設定するかどうか SetVertexes(ReadOnlySpan<Vertex>, Boolean) 座標をもとに頂点情報を設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetVertexes(ReadOnlySpan<Vertex> vertexes, bool resetIB = true) パラメータ vertexes 設定する各頂点の座標を格納する Span<T> resetIB Buffers を自動計算したものに設定するかどうか Remarks 色は白(255, 255, 255)に設定されます。 SetVertexGroups(IEnumerable<IEnumerable<Vertex>>) 設定した頂点のグループを設定し，そのグループごとに PolygonNode と同様の方式でインデックスバッファーを設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetVertexGroups(IEnumerable<IEnumerable<Vertex>> vertexes) パラメータ vertexes 設定する頂点のグループ 例外 型 Condition ArgumentNullException vertexes または vertexes 内の要素がnull SetVertexGroupsFromPositions(IEnumerable<IEnumerable<Vector2F>>, Color) 設定した座標をもとに頂点のグループを設定し，そのグループごとに PolygonNode と同様の方式でインデックスバッファーを設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetVertexGroupsFromPositions(IEnumerable<IEnumerable<Vector2F>> vertexes, Color color) パラメータ vertexes 設定する頂点のグループ color 設定する色 例外 型 Condition ArgumentNullException vertexes または vertexes 内の要素がnull <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.ICullableDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.PostEffectGaussianBlurNode.html": {
    "href": "References/Altseed2.PostEffectGaussianBlurNode.html",
    "title": "PostEffectGaussianBlurNode クラス | Altseed2",
    "keywords": "PostEffectGaussianBlurNode クラス ガウスぼかしを適用するポストエフェクトのクラス 継承関係 Object Altseed2.Registerable < Node > Node PostEffectNode PostEffectGaussianBlurNode 継承したメンバー PostEffectNode.GetBuffer(Int32, Vector2I, TextureFormat) 指定したIDとサイズ，フォーマットを持つ RenderTexture のインスタンスをキャッシュから検索し，取得します。 PostEffectNode.InitializeCache() PostEffectNode.TerminateCache() PostEffectNode.CameraGroup このノードを描画するカメラを取得または設定します。 PostEffectNode.ZOrder PostEffectNodeが描画される順番。DrawnNodeを描画した後にまとめて描画されます。 Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ PostEffectGaussianBlurNode() PostEffectGaussianBlurNode の新しいインスタンスを生成します。 プロパティ Intensity ぼけの強さを取得または設定します。 メソッド Draw(RenderTexture, Color) 描画を実行します。 コンストラクタ PostEffectGaussianBlurNode() PostEffectGaussianBlurNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public PostEffectGaussianBlurNode() プロパティ Intensity ぼけの強さを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Intensity { get; set; } Remarks 値が大きいほど画面がぼけます。 メソッド Draw(RenderTexture, Color) 描画を実行します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected override void Draw(RenderTexture src, Color clearColor) パラメータ src 描画先の RenderTexture のインスタンス clearColor 描画されないピクセルを埋めるときの色 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.PostEffectGrayScaleNode.html": {
    "href": "References/Altseed2.PostEffectGrayScaleNode.html",
    "title": "PostEffectGrayScaleNode クラス | Altseed2",
    "keywords": "PostEffectGrayScaleNode クラス グレースケール化を適用するポストエフェクトのクラス 継承関係 Object Altseed2.Registerable < Node > Node PostEffectNode PostEffectGrayScaleNode 継承したメンバー PostEffectNode.GetBuffer(Int32, Vector2I, TextureFormat) 指定したIDとサイズ，フォーマットを持つ RenderTexture のインスタンスをキャッシュから検索し，取得します。 PostEffectNode.InitializeCache() PostEffectNode.TerminateCache() PostEffectNode.CameraGroup このノードを描画するカメラを取得または設定します。 PostEffectNode.ZOrder PostEffectNodeが描画される順番。DrawnNodeを描画した後にまとめて描画されます。 Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ PostEffectGrayScaleNode() PostEffectGrayScaleNode の新しいインスタンスを生成します。 メソッド Draw(RenderTexture, Color) 描画を実行します。 コンストラクタ PostEffectGrayScaleNode() PostEffectGrayScaleNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public PostEffectGrayScaleNode() メソッド Draw(RenderTexture, Color) 描画を実行します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected override void Draw(RenderTexture src, Color clearColor) パラメータ src 描画先の RenderTexture のインスタンス clearColor 描画されないピクセルを埋めるときの色 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.PostEffectLightBloomNode.html": {
    "href": "References/Altseed2.PostEffectLightBloomNode.html",
    "title": "PostEffectLightBloomNode クラス | Altseed2",
    "keywords": "PostEffectLightBloomNode クラス ライトブルームを適用するポストエフェクトのクラス 継承関係 Object Altseed2.Registerable < Node > Node PostEffectNode PostEffectLightBloomNode 継承したメンバー PostEffectNode.GetBuffer(Int32, Vector2I, TextureFormat) 指定したIDとサイズ，フォーマットを持つ RenderTexture のインスタンスをキャッシュから検索し，取得します。 PostEffectNode.InitializeCache() PostEffectNode.TerminateCache() PostEffectNode.CameraGroup このノードを描画するカメラを取得または設定します。 PostEffectNode.ZOrder PostEffectNodeが描画される順番。DrawnNodeを描画した後にまとめて描画されます。 Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ PostEffectLightBloomNode() PostEffectLightBloomNode の新しいインスタンスを生成します。 フィールド DownSampleCount プロパティ Exposure 露光の強さを取得または設定します。 Intensity ぼけの強さを取得または設定します。 IsLuminanceMode RGBではなく、輝度を参照してぼかす色を決定するかどうかを取得または設定します。 Threshold ぼかす画素の閾値を取得または設定します。 メソッド Draw(RenderTexture, Color) 描画を実行します。 コンストラクタ PostEffectLightBloomNode() PostEffectLightBloomNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public PostEffectLightBloomNode() フィールド DownSampleCount <!-- <h5 class=\"decalaration\">宣言</h5> --> const int DownSampleCount = 6 プロパティ Exposure 露光の強さを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Exposure { get; set; } Remarks この値が大きいほど、ぼけた光が強くなります。 Intensity ぼけの強さを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Intensity { get; set; } Remarks 値が大きいほど光がぼけます。 IsLuminanceMode RGBではなく、輝度を参照してぼかす色を決定するかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsLuminanceMode { get; set; } Threshold ぼかす画素の閾値を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Threshold { get; set; } Remarks 255を1.0とした数値を指定します。 メソッド Draw(RenderTexture, Color) 描画を実行します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected override void Draw(RenderTexture src, Color clearColor) パラメータ src 描画先の RenderTexture のインスタンス clearColor 描画されないピクセルを埋めるときの色 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.PostEffectNode.html": {
    "href": "References/Altseed2.PostEffectNode.html",
    "title": "PostEffectNode クラス | Altseed2",
    "keywords": "PostEffectNode クラス ポストエフェクトを扱うノードの基底クラス 継承関係 Object Altseed2.Registerable < Node > Node PostEffectNode PostEffectGaussianBlurNode PostEffectGrayScaleNode PostEffectLightBloomNode PostEffectSepiaNode RuledTransitionEffectNode 継承したメンバー Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ PostEffectNode() PostEffectNode の新しいインスタンスを生成します。 プロパティ CameraGroup このノードを描画するカメラを取得または設定します。 ZOrder PostEffectNodeが描画される順番。DrawnNodeを描画した後にまとめて描画されます。 メソッド Draw(RenderTexture, Color) 描画を実行します。 GetBuffer(Int32, Vector2I, TextureFormat) 指定したIDとサイズ，フォーマットを持つ RenderTexture のインスタンスをキャッシュから検索し，取得します。 InitializeCache() TerminateCache() コンストラクタ PostEffectNode() PostEffectNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public PostEffectNode() 例外 型 Condition InvalidOperationException Graphics機能が初期化されていない。 プロパティ CameraGroup このノードを描画するカメラを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ulong CameraGroup { get; set; } ZOrder PostEffectNodeが描画される順番。DrawnNodeを描画した後にまとめて描画されます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int ZOrder { get; set; } メソッド Draw(RenderTexture, Color) 描画を実行します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected abstract void Draw(RenderTexture src, Color clearColor) パラメータ src 描画先の RenderTexture のインスタンス clearColor 描画されないピクセルを埋めるときの色 GetBuffer(Int32, Vector2I, TextureFormat) 指定したIDとサイズ，フォーマットを持つ RenderTexture のインスタンスをキャッシュから検索し，取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected static RenderTexture GetBuffer(int identifier, Vector2I size, TextureFormat format) パラメータ identifier 検索する RenderTexture のID size 検索する RenderTexture の大きさ format 検索する RenderTexture のフォーマット 戻り値 identifier ， size ， format を持つ RenderTexture のインスタンス InitializeCache() <!-- <h5 class=\"decalaration\">宣言</h5> --> static void InitializeCache() TerminateCache() <!-- <h5 class=\"decalaration\">宣言</h5> --> static void TerminateCache() <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.PostEffectSepiaNode.html": {
    "href": "References/Altseed2.PostEffectSepiaNode.html",
    "title": "PostEffectSepiaNode クラス | Altseed2",
    "keywords": "PostEffectSepiaNode クラス セピア調にするポストエフェクトのクラス 継承関係 Object Altseed2.Registerable < Node > Node PostEffectNode PostEffectSepiaNode 継承したメンバー PostEffectNode.GetBuffer(Int32, Vector2I, TextureFormat) 指定したIDとサイズ，フォーマットを持つ RenderTexture のインスタンスをキャッシュから検索し，取得します。 PostEffectNode.InitializeCache() PostEffectNode.TerminateCache() PostEffectNode.CameraGroup このノードを描画するカメラを取得または設定します。 PostEffectNode.ZOrder PostEffectNodeが描画される順番。DrawnNodeを描画した後にまとめて描画されます。 Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ PostEffectSepiaNode() PostEffectSepiaNode の新しいインスタンスを生成します。 メソッド Draw(RenderTexture, Color) 描画を実行します。 コンストラクタ PostEffectSepiaNode() PostEffectSepiaNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public PostEffectSepiaNode() メソッド Draw(RenderTexture, Color) 描画を実行します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected override void Draw(RenderTexture src, Color clearColor) パラメータ src 描画先の RenderTexture のインスタンス clearColor 描画されないピクセルを埋めるときの色 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Profiler.html": {
    "href": "References/Altseed2.Profiler.html",
    "title": "Profiler クラス | Altseed2",
    "keywords": "Profiler クラス プロファイラのクラス 継承関係 Object Profiler メンバー プロパティ IsProfilerRunning メソッド BeginBlock(String, String, Int32, Color) 測定するブロックを開始します。 DumpToFileAndStopCapture(String) 測定を終了し、結果を出力します。 EndBlock() 測定するブロックを終了します。 StartCapture() 測定を開始します。 StartListen(Int32) リモートから状態を監視します。 StopCapture() 測定を終了します。 プロパティ IsProfilerRunning <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsProfilerRunning { get; } メソッド BeginBlock(String, String, Int32, Color) 測定するブロックを開始します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void BeginBlock(string name, string _filename, int _line, Color color) パラメータ name ブロックの名称 _filename ブロックが位置するファイル名 _line ブロックが位置する行数 color ブロックの色 DumpToFileAndStopCapture(String) 測定を終了し、結果を出力します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void DumpToFileAndStopCapture(string path) パラメータ path 出力先 EndBlock() 測定するブロックを終了します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void EndBlock() StartCapture() 測定を開始します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void StartCapture() StartListen(Int32) リモートから状態を監視します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void StartListen(int port) パラメータ port 通信に使用するポート StopCapture() 測定を終了します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void StopCapture() <!-- -->"
  },
  "References/Altseed2.ProfilerBlock.html": {
    "href": "References/Altseed2.ProfilerBlock.html",
    "title": "ProfilerBlock 構造体 | Altseed2",
    "keywords": "ProfilerBlock 構造体 プロファイラのブロックを簡単に使用できるようにするクラス メンバー コンストラクタ ProfilerBlock(String, Color, String, Int32) 測定を開始する。 メソッド Dispose() 測定を終了する。 コンストラクタ ProfilerBlock(String, Color, String, Int32) 測定を開始する。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ProfilerBlock(string name, Color color, string filepath = null, int line = 0) パラメータ name color filepath line メソッド Dispose() 測定を終了する。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Dispose() <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.IDisposable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.RectangleCollider.html": {
    "href": "References/Altseed2.RectangleCollider.html",
    "title": "RectangleCollider クラス | Altseed2",
    "keywords": "RectangleCollider クラス 短形コライダのクラス 継承関係 Object Collider ShapeCollider RectangleCollider 継承したメンバー ShapeCollider.SetVertexes(IEnumerable<Vector2F>) 指定した座標に頂点を設定します。 ShapeCollider.SetVertexes(ReadOnlySpan<Vector2F>) 指定した座標に頂点を設定する Collider.Position 座標を取得または設定します。 Collider.Rotation 回転(弧度法)を取得または設定します。 Collider.Transform 変形行列を取得または設定します。 メンバー コンストラクタ RectangleCollider() RectangleCollider の新しいインスタンスを生成します。 プロパティ CenterPosition 中心座標を取得または設定します。 Size 短形の大きさを取得または設定します。 メソッド GetIsCollidedWith(Collider) 指定したコライダとの衝突判定を行います。 UpdateVertexes() コンストラクタ RectangleCollider() RectangleCollider の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public RectangleCollider() プロパティ CenterPosition 中心座標を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F CenterPosition { get; set; } Size 短形の大きさを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Size { get; set; } メソッド GetIsCollidedWith(Collider) 指定したコライダとの衝突判定を行います。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override bool GetIsCollidedWith(Collider collider) パラメータ collider 衝突判定を行うコライダ 戻り値 このインスタンスと collider が衝突していたらtrue，それ以外でfalse UpdateVertexes() <!-- <h5 class=\"decalaration\">宣言</h5> --> void UpdateVertexes() <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.RectangleColliderNode.html": {
    "href": "References/Altseed2.RectangleColliderNode.html",
    "title": "RectangleColliderNode クラス | Altseed2",
    "keywords": "RectangleColliderNode クラス 短形コライダを管理するノード 継承関係 Object Altseed2.Registerable < Node > Node TransformNode ColliderNode RectangleColliderNode 継承したメンバー TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ RectangleColliderNode() 既定の RectangleCollider を使用して RectangleColliderNode の新しいインスタンスを生成します。 プロパティ ContentSize コンテンツのサイズを取得します。 InheritedTransform 先祖の変形を加味した変形行列を取得します。 RectangleSize 短形のサイズを取得または設定します。 コンストラクタ RectangleColliderNode() 既定の RectangleCollider を使用して RectangleColliderNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public RectangleColliderNode() プロパティ ContentSize コンテンツのサイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed Vector2F ContentSize { get; } InheritedTransform 先祖の変形を加味した変形行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed Matrix44F InheritedTransform { get; } RectangleSize 短形のサイズを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F RectangleSize { get; set; } <!-- -->"
  },
  "References/Altseed2.RectangleColliderVisualizeNode.html": {
    "href": "References/Altseed2.RectangleColliderVisualizeNode.html",
    "title": "RectangleColliderVisualizeNode クラス | Altseed2",
    "keywords": "RectangleColliderVisualizeNode クラス 継承関係 Object Altseed2.Registerable < Node > Node TransformNode ShapeNode RectangleNode RectangleColliderVisualizeNode 継承したメンバー RectangleNode.Color 色を取得または設定します。 RectangleNode.RectangleSize 短形のサイズを取得または設定します。 ShapeNode.CameraGroup カメラグループを取得または設定します。 ShapeNode.ZOrder 描画時の重ね順を取得または設定します。 ShapeNode.IsDrawn このノードを描画するかどうかを取得または設定します。 ShapeNode.IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 ShapeNode.FlushQueue() 予約されている追加・削除を直ちに実行します。 ShapeNode.AlphaBlend ブレンドモードを取得または設定します。 ShapeNode.Src Texture を切り出す範囲を取得または設定します。 ShapeNode.Texture 描画するテクスチャを取得または設定します。 ShapeNode.Material 描画に適用するマテリアルを取得または設定します。 ShapeNode.InheritedTransform 先祖の変形を加味した変形行列を取得します。 ShapeNode.ContentSize コンテンツのサイズを取得します。 TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.ICullableDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.RectangleNode.html": {
    "href": "References/Altseed2.RectangleNode.html",
    "title": "RectangleNode クラス | Altseed2",
    "keywords": "RectangleNode クラス 短形を描画するノードのクラス 継承関係 Object Altseed2.Registerable < Node > Node TransformNode ShapeNode RectangleNode RectangleColliderVisualizeNode 継承したメンバー ShapeNode.CameraGroup カメラグループを取得または設定します。 ShapeNode.ZOrder 描画時の重ね順を取得または設定します。 ShapeNode.IsDrawn このノードを描画するかどうかを取得または設定します。 ShapeNode.IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 ShapeNode.FlushQueue() 予約されている追加・削除を直ちに実行します。 ShapeNode.AlphaBlend ブレンドモードを取得または設定します。 ShapeNode.Src Texture を切り出す範囲を取得または設定します。 ShapeNode.Texture 描画するテクスチャを取得または設定します。 ShapeNode.Material 描画に適用するマテリアルを取得または設定します。 ShapeNode.InheritedTransform 先祖の変形を加味した変形行列を取得します。 ShapeNode.ContentSize コンテンツのサイズを取得します。 TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ RectangleNode() RectangleNode の新しいインスタンスを生成します。 プロパティ Color 色を取得または設定します。 RectangleSize 短形のサイズを取得または設定します。 コンストラクタ RectangleNode() RectangleNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public RectangleNode() プロパティ Color 色を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Color Color { get; set; } RectangleSize 短形のサイズを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F RectangleSize { get; set; } <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.ICullableDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.RectF.html": {
    "href": "References/Altseed2.RectF.html",
    "title": "RectF 構造体 | Altseed2",
    "keywords": "RectF 構造体 Single 型の矩形を表す構造体 メンバー コンストラクタ RectF(Vector2F, Vector2F) RectF の新しいインスタンスを生成します。 RectF(Single, Single, Single, Single) RectF 新しいインスタンスを生成します。 フィールド Height 高さ Width 幅 X X座標 Y Y座標 プロパティ Position 左上の座標を取得します。 Size サイズを取得します。 メソッド ToI() 同じ値を持つ RectI の新しいインスタンスを生成します。 コンストラクタ RectF(Vector2F, Vector2F) RectF の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public RectF(Vector2F position, Vector2F size) パラメータ position 左上の座標 size サイズ RectF(Single, Single, Single, Single) RectF 新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public RectF(float x, float y, float width, float height) パラメータ x X座標 y Y座標 width 幅 height 高さ フィールド Height 高さ <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Height Width 幅 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Width X X座標 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float X Y Y座標 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Y プロパティ Position 左上の座標を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Position { get; } Size サイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Size { get; } メソッド ToI() 同じ値を持つ RectI の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public RectI ToI() 戻り値 同じ値を持つ RectI の新しいインスタンス <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.IEquatable`1\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.RectI.html": {
    "href": "References/Altseed2.RectI.html",
    "title": "RectI 構造体 | Altseed2",
    "keywords": "RectI 構造体 Int32 型の矩形を表す構造体 メンバー コンストラクタ RectI(Vector2I, Vector2I) RectI の新しいインスタンスを生成します。 RectI(Int32, Int32, Int32, Int32) RectI の新しいインスタンスを生成します。 フィールド Height 高さ Width 幅 X X座標 Y Y座標 プロパティ Position 左上の座標を取得します。 Size サイズを取得します。 メソッド ToF() 同じ値を持つ RectF の新しいインスタンスを生成します。 コンストラクタ RectI(Vector2I, Vector2I) RectI の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public RectI(Vector2I position, Vector2I size) パラメータ position 左上の座標 size サイズ RectI(Int32, Int32, Int32, Int32) RectI の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public RectI(int x, int y, int width, int height) パラメータ x X座標 y Y座標 width 幅 height 高さ フィールド Height 高さ <!-- <h5 class=\"decalaration\">宣言</h5> --> public int Height Width 幅 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int Width X X座標 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int X Y Y座標 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int Y プロパティ Position 左上の座標を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2I Position { get; } Size サイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2I Size { get; } メソッド ToF() 同じ値を持つ RectF の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public RectF ToF() 戻り値 同じ値を持つ RectF の新しいインスタンス <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.IEquatable`1\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.RegisteredStatus.html": {
    "href": "References/Altseed2.RegisteredStatus.html",
    "title": "RegisteredStatus 列挙体 | Altseed2",
    "keywords": "RegisteredStatus 列挙体 登録状況を表します。 メンバー Free 所属なし Registered 所属有り WaitingAdded 追加待ち WaitingRemoved 削除待ち"
  },
  "References/Altseed2.RenderPassParameter.html": {
    "href": "References/Altseed2.RenderPassParameter.html",
    "title": "RenderPassParameter 構造体 | Altseed2",
    "keywords": "RenderPassParameter 構造体 メンバー コンストラクタ RenderPassParameter(Color, Boolean, Boolean) RenderPassParameter 新しいインスタンスを生成します。 フィールド ClearColor IsColorCleared IsDepthCleared コンストラクタ RenderPassParameter(Color, Boolean, Boolean) RenderPassParameter 新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public RenderPassParameter(Color clearColor, bool isColorCleared, bool isDepthCleared) パラメータ clearColor isColorCleared isDepthCleared フィールド ClearColor <!-- <h5 class=\"decalaration\">宣言</h5> --> public Color ClearColor IsColorCleared <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsColorCleared IsDepthCleared <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsDepthCleared <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.IEquatable`1\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.RenderTargetCareType.html": {
    "href": "References/Altseed2.RenderTargetCareType.html",
    "title": "RenderTargetCareType 列挙体 | Altseed2",
    "keywords": "RenderTargetCareType 列挙体 メンバー Clear DontCare"
  },
  "References/Altseed2.RenderTexture.html": {
    "href": "References/Altseed2.RenderTexture.html",
    "title": "RenderTexture クラス | Altseed2",
    "keywords": "RenderTexture クラス ポストエフェクトやカメラにおける描画先のクラス 継承関係 Object TextureBase RenderTexture 継承したメンバー TextureBase.Size テクスチャの大きさ(ピクセル)を取得します。 TextureBase.WrapMode テクスチャをサンプリングする方法を取得または設定します。 TextureBase.FilterType テクスチャをフィルタリングする方法を取得または設定します。 TextureBase.Format テクスチャのフォーマットを取得します。 メンバー メソッド Create(Vector2I, TextureFormat) 指定したサイズとフォーマットを持つRenderTextureの新しいインスタンスを生成します。 Reload() Save(String) メソッド Create(Vector2I, TextureFormat) 指定したサイズとフォーマットを持つRenderTextureの新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static RenderTexture Create(Vector2I size, TextureFormat format) パラメータ size サイズ format テクスチャのフォーマット 戻り値 Reload() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Reload() 戻り値 Save(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Save(string path) パラメータ path 戻り値 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"System.Runtime.Serialization.IDeserializationCallback\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.RuledTransitionEffectNode.html": {
    "href": "References/Altseed2.RuledTransitionEffectNode.html",
    "title": "RuledTransitionEffectNode クラス | Altseed2",
    "keywords": "RuledTransitionEffectNode クラス 継承関係 Object Altseed2.Registerable < Node > Node PostEffectNode RuledTransitionEffectNode 継承したメンバー PostEffectNode.GetBuffer(Int32, Vector2I, TextureFormat) 指定したIDとサイズ，フォーマットを持つ RenderTexture のインスタンスをキャッシュから検索し，取得します。 PostEffectNode.InitializeCache() PostEffectNode.TerminateCache() PostEffectNode.CameraGroup このノードを描画するカメラを取得または設定します。 PostEffectNode.ZOrder PostEffectNodeが描画される順番。DrawnNodeを描画した後にまとめて描画されます。 Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ RuledTransitionEffectNode() プロパティ MaskTexture MixRate RuleTexture Softness UseCaptionAsMaskTexture メソッド Draw(RenderTexture, Color) コンストラクタ RuledTransitionEffectNode() <!-- <h5 class=\"decalaration\">宣言</h5> --> public RuledTransitionEffectNode() プロパティ MaskTexture <!-- <h5 class=\"decalaration\">宣言</h5> --> public TextureBase MaskTexture { get; set; } MixRate <!-- <h5 class=\"decalaration\">宣言</h5> --> public float MixRate { get; set; } RuleTexture <!-- <h5 class=\"decalaration\">宣言</h5> --> public TextureBase RuleTexture { get; set; } Softness <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Softness { get; set; } UseCaptionAsMaskTexture <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool UseCaptionAsMaskTexture { get; set; } メソッド Draw(RenderTexture, Color) <!-- <h5 class=\"decalaration\">宣言</h5> --> protected override void Draw(RenderTexture src, Color clearColor) パラメータ src clearColor <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.RuledTransitionNode.html": {
    "href": "References/Altseed2.RuledTransitionNode.html",
    "title": "RuledTransitionNode クラス | Altseed2",
    "keywords": "RuledTransitionNode クラス パラメータ制御可能な TransitionNode のクラス 継承関係 Object Altseed2.Registerable < Node > Node TransitionNode RuledTransitionNode 継承したメンバー TransitionNode.PrevNode トランジションによって取り除かれるノード TransitionNode.NextNode トランジションによって追加されるノード TransitionNode.StartTransition(Node, Node) トランジションを開始します。 TransitionNode.OnClosing(Single) ノードが入れ替わる前の処理を記述します。 TransitionNode.OnOpening(Single) ノードが入れ替わった後の処理を記述します。 TransitionNode.OnNodeSwapping() ノードが入れ替わる直前の処理を記述します。 TransitionNode.OnNodeSwapped() ノードが入れ替わった直後の処理を記述します。 TransitionNode.OnTransitionBegin() トランジションが開始する瞬間の処理を記述します。 TransitionNode.OnTransitionEnd() トランジションが終了する直前の処理を記述します。 TransitionNode.GetCoroutine() トランジションを行うコルーチン Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ RuledTransitionNode(RuledTransitionState, RuledTransitionState, Texture2D) RuledTransitionNode の新しいインスタンスを生成します。 メソッド Closing(Single) NodeSwapped() Opening(Single) TransitionBegin() コンストラクタ RuledTransitionNode(RuledTransitionState, RuledTransitionState, Texture2D) RuledTransitionNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public RuledTransitionNode(RuledTransitionState closingState, RuledTransitionState openingState, Texture2D maskTexture = null) パラメータ closingState 遷移元のノードにおける RuledTransitionState のインスタンス openingState 遷移先のノードにおける RuledTransitionState のインスタンス maskTexture 指定するマスクテクスチャ メソッド Closing(Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> override void Closing(float progress) パラメータ progress NodeSwapped() <!-- <h5 class=\"decalaration\">宣言</h5> --> override void NodeSwapped() Opening(Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> override void Opening(float progress) パラメータ progress TransitionBegin() <!-- <h5 class=\"decalaration\">宣言</h5> --> override void TransitionBegin() <!-- -->"
  },
  "References/Altseed2.RuledTransitionState.html": {
    "href": "References/Altseed2.RuledTransitionState.html",
    "title": "RuledTransitionState クラス | Altseed2",
    "keywords": "RuledTransitionState クラス RuledTransitionNode の制御に用いる設定のクラス 継承関係 Object RuledTransitionState メンバー コンストラクタ RuledTransitionState() RuledTransitionState の新しいインスタンスを生成します。 プロパティ Duration 遷移に掛かる時間を取得または設定します。 RuleTexture Softness コンストラクタ RuledTransitionState() RuledTransitionState の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public RuledTransitionState() プロパティ Duration 遷移に掛かる時間を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Duration { get; set; } RuleTexture <!-- <h5 class=\"decalaration\">宣言</h5> --> public Texture2D RuleTexture { get; set; } Softness <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Softness { get; set; } <!-- -->"
  },
  "References/Altseed2.Shader.html": {
    "href": "References/Altseed2.Shader.html",
    "title": "Shader クラス | Altseed2",
    "keywords": "Shader クラス シェーダ 継承関係 Object Shader メンバー プロパティ Code インスタンス生成に使用したコードを取得します。 Name 名前を取得します。 StageType シェーダの種類を取得します。 UniformSize メソッド Create(String, String, ShaderStage) コードをコンパイルして Shader の新しいインスタンスを生成します。 CreateFromFile(String, String, ShaderStage) ファイルに書かれたコードをコンパイルして Shader の新しいインスタンスを生成します。 TryCreate(String, String, ShaderStage, out Shader) コードをコンパイルして Shader の新しいインスタンスを生成します。 TryCreateFromFile(String, String, ShaderStage, out Shader) ファイルに書かれたコードをコンパイルして Shader の新しいインスタンスを生成します。 プロパティ Code インスタンス生成に使用したコードを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public string Code { get; } Name 名前を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public string Name { get; } StageType シェーダの種類を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ShaderStage StageType { get; } UniformSize <!-- <h5 class=\"decalaration\">宣言</h5> --> public int UniformSize { get; } メソッド Create(String, String, ShaderStage) コードをコンパイルして Shader の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Shader Create(string name, string code, ShaderStage shaderStage) パラメータ name シェーダにつける名前 code シェーダのコード shaderStage シェーダの種類 戻り値 code をコンパイルしてできる Shader の新しいインスタンス コンパイルに失敗した場合はnull 例外 型 Condition ArgumentNullException name または code がnull CreateFromFile(String, String, ShaderStage) ファイルに書かれたコードをコンパイルして Shader の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Shader CreateFromFile(string name, string path, ShaderStage shaderStage) パラメータ name シェーダにつける名前 path シェーダのコードが書かれたファイルのパス shaderStage シェーダの種類 戻り値 path に書かれたコードをコンパイルしてできる Shader の新しいインスタンス コンパイルに失敗した場合はnull 例外 型 Condition ArgumentNullException name または path がnull TryCreate(String, String, ShaderStage, out Shader) コードをコンパイルして Shader の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static string TryCreate(string name, string code, ShaderStage shaderStage, out Shader shader) パラメータ name シェーダにつける名前 code シェーダのコード shaderStage シェーダの種類 shader code をコンパイルしてできる Shader の新しいインスタンス コンパイルに失敗した場合はnull 戻り値 code をコンパイルした際のメッセージ 例外 型 Condition ArgumentNullException name または code がnull TryCreateFromFile(String, String, ShaderStage, out Shader) ファイルに書かれたコードをコンパイルして Shader の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static string TryCreateFromFile(string name, string path, ShaderStage shaderStage, out Shader shader) パラメータ name シェーダにつける名前 path シェーダのコードが書かれたファイルのパス shaderStage シェーダの種類 shader 戻り値 path に書かれたコードをコンパイルした際のメッセージ 例外 型 Condition ArgumentNullException path に書かれたコードをコンパイルしてできる Shader の新しいインスタンス コンパイルに失敗した場合はnull name または path がnull <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.ShaderCompiler.html": {
    "href": "References/Altseed2.ShaderCompiler.html",
    "title": "ShaderCompiler クラス | Altseed2",
    "keywords": "ShaderCompiler クラス 継承関係 Object ShaderCompiler メンバー メソッド Initialize(Graphics, File) Terminate() メソッド Initialize(Graphics, File) <!-- <h5 class=\"decalaration\">宣言</h5> --> public static bool Initialize(Graphics graphics, File file) パラメータ graphics file 戻り値 Terminate() <!-- <h5 class=\"decalaration\">宣言</h5> --> public static void Terminate() <!-- -->"
  },
  "References/Altseed2.ShaderStage.html": {
    "href": "References/Altseed2.ShaderStage.html",
    "title": "ShaderStage 列挙体 | Altseed2",
    "keywords": "ShaderStage 列挙体 メンバー Pixel Vertex"
  },
  "References/Altseed2.ShapeCollider.html": {
    "href": "References/Altseed2.ShapeCollider.html",
    "title": "ShapeCollider クラス | Altseed2",
    "keywords": "ShapeCollider クラス 図形コライダのクラス 継承関係 Object Collider ShapeCollider RectangleCollider 継承したメンバー Collider.Position 座標を取得または設定します。 Collider.Rotation 回転(弧度法)を取得または設定します。 Collider.Transform 変形行列を取得または設定します。 Collider.GetIsCollidedWith(Collider) 指定したコライダとの衝突判定を行います。 メンバー コンストラクタ ShapeCollider() ShapeCollider の新しいインスタンスを生成します。 メソッド SetVertexes(IEnumerable<Vector2F>) 指定した座標に頂点を設定します。 SetVertexes(ReadOnlySpan<Vector2F>) 指定した座標に頂点を設定する コンストラクタ ShapeCollider() ShapeCollider の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> ShapeCollider() メソッド SetVertexes(IEnumerable<Vector2F>) 指定した座標に頂点を設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> void SetVertexes(IEnumerable<Vector2F> positions) パラメータ positions 設定する座標 例外 型 Condition ArgumentException positions のサイズが8を超えている ArgumentNullException positions がnull SetVertexes(ReadOnlySpan<Vector2F>) 指定した座標に頂点を設定する <!-- <h5 class=\"decalaration\">宣言</h5> --> void SetVertexes(ReadOnlySpan<Vector2F> positions) パラメータ positions 設定する座標 例外 型 Condition ArgumentException positions のサイズが8を超えている <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.ShapeNode.html": {
    "href": "References/Altseed2.ShapeNode.html",
    "title": "ShapeNode クラス | Altseed2",
    "keywords": "ShapeNode クラス 基本的な図形を描画するノードの基底クラスを表します。 継承関係 Object Altseed2.Registerable < Node > Node TransformNode ShapeNode ArcNode CircleNode LineNode RectangleNode TriangleNode 継承したメンバー TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ ShapeNode() ShapeNode の新しいインスタンスを生成します。 プロパティ AlphaBlend ブレンドモードを取得または設定します。 CameraGroup カメラグループを取得または設定します。 ContentSize コンテンツのサイズを取得します。 InheritedTransform 先祖の変形を加味した変形行列を取得します。 IsDrawn このノードを描画するかどうかを取得または設定します。 IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 Material 描画に適用するマテリアルを取得または設定します。 Src Texture を切り出す範囲を取得または設定します。 Texture 描画するテクスチャを取得または設定します。 ZOrder 描画時の重ね順を取得または設定します。 メソッド FlushQueue() 予約されている追加・削除を直ちに実行します。 コンストラクタ ShapeNode() ShapeNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected ShapeNode() 例外 型 Condition InvalidOperationException Graphics機能が初期化されていない。 プロパティ AlphaBlend ブレンドモードを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public AlphaBlend AlphaBlend { get; set; } CameraGroup カメラグループを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ulong CameraGroup { get; set; } ContentSize コンテンツのサイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed Vector2F ContentSize { get; } InheritedTransform 先祖の変形を加味した変形行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed Matrix44F InheritedTransform { get; } IsDrawn このノードを描画するかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsDrawn { get; set; } IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsDrawnActually { get; } Material 描画に適用するマテリアルを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Material Material { get; set; } Src Texture を切り出す範囲を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public RectF Src { get; set; } Texture 描画するテクスチャを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public TextureBase Texture { get; set; } ZOrder 描画時の重ね順を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int ZOrder { get; set; } メソッド FlushQueue() 予約されている追加・削除を直ちに実行します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override void FlushQueue() Remarks この Node 自身の更新中に実行することはできません。 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.ICullableDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Sound.html": {
    "href": "References/Altseed2.Sound.html",
    "title": "Sound クラス | Altseed2",
    "keywords": "Sound クラス 音源のクラス 継承関係 Object Sound メンバー プロパティ IsDecompressed 音源が解凍されているかどうかを取得します。 IsLoopingMode ループするかどうかを取得または設定します。 Length 音源の長さ(秒)を取得します。 LoopEndPoint ループ終了地点(秒)を取得または設定します。 LoopStartingPoint ループ開始地点(秒)を取得または設定します。 Path 読み込んだファイルのパスを取得します。 メソッド Load(String, Boolean) 音声ファイルを読み込みます。 LoadStrict(String, Boolean) 指定パスから音源を読み込みます。失敗した場合、例外が発生します。 Reload() プロパティ IsDecompressed 音源が解凍されているかどうかを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsDecompressed { get; } IsLoopingMode ループするかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsLoopingMode { get; set; } Length 音源の長さ(秒)を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Length { get; } LoopEndPoint ループ終了地点(秒)を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float LoopEndPoint { get; set; } LoopStartingPoint ループ開始地点(秒)を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float LoopStartingPoint { get; set; } Path 読み込んだファイルのパスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> string Path { } メソッド Load(String, Boolean) 音声ファイルを読み込みます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Sound Load(string path, bool isDecompressed) パラメータ path 読み込む音声ファイルのパス isDecompressed ロード時に全て解凍しておくかどうか 戻り値 例外 型 Condition ArgumentNullException path がnull LoadStrict(String, Boolean) 指定パスから音源を読み込みます。失敗した場合、例外が発生します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Sound LoadStrict(string path, bool isDecompressed) パラメータ path 読み込む音源のパス isDecompressed 音をロード時に全て解凍しておくかどうか 戻り値 path をパスに持つ音源のデータを格納した Sound の新しいインスタンス 例外 型 Condition ArgumentException path が空白文字のみからなる、または使用出来ない文字を含んでいる ArgumentNullException path がnull FileNotFoundException path で指定された音源が見つからない PathTooLongException path が指定するパスが見つからない SystemException 音源が破損または読み込みに失敗 Reload() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Reload() 戻り値 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.SoundMixer.html": {
    "href": "References/Altseed2.SoundMixer.html",
    "title": "SoundMixer クラス | Altseed2",
    "keywords": "SoundMixer クラス 音源を操作するクラス 継承関係 Object SoundMixer メンバー メソッド Fade(Int32, Single, Single) 指定した音の音量を一定時間かけて変更します。 FadeIn(Int32, Single) 指定した音をフェードインさせます。 FadeOut(Int32, Single) 指定した音をフェードアウトさせます。 GetIsPlaybackSpeedEnabled(Int32) 再生速度を変更するかを取得します。 GetIsPlaying(Int32) 指定した音が再生中であるかを取得します。 GetPanningPosition(Int32) パン位置を取得します。 GetPlaybackPosition(Int32) 指定した音の再生位置を取得します。 GetPlaybackSpeed(Int32) 再生速度を取得します。 GetSpectrum(Int32, Int32, FFTWindow) 再生中の音のスペクトル情報を取得します。 GetSpectrum(Int32, Int32, FFTWindow, Span<Single>) 再生中の音のスペクトル情報を取得します。 Pause(Int32) 指定した音の再生を一時停止します。 Play(Sound) 音を再生します。 Reload() Resume(Int32) 指定した音の再生を再開します。 SetIsPlaybackSpeedEnabled(Int32, Boolean) 再生速度を変更するかを設定します。 SetPanningPosition(Int32, Single) パン位置を設定します。 SetPlaybackPosition(Int32, Single) 指定した音の再生位置を変更します。 SetPlaybackSpeed(Int32, Single) 再生速度を設定します。 SetVolume(Int32, Single) 指定した音の音量を変更します。 Stop(Int32) 指定した音の再生を停止します。 StopAll() 再生中の音を全て停止します。 メソッド Fade(Int32, Single, Single) 指定した音の音量を一定時間かけて変更します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Fade(int id, float second, float targetedVolume) パラメータ id 音のID second フェードに使用する時間(秒) targetedVolume 変更後の音量(0.0～1.0) FadeIn(Int32, Single) 指定した音をフェードインさせます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void FadeIn(int id, float second) パラメータ id second フェードインに使用する時間(秒) FadeOut(Int32, Single) 指定した音をフェードアウトさせます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void FadeOut(int id, float second) パラメータ id 音のID second フェードアウトに使用する時間(秒) GetIsPlaybackSpeedEnabled(Int32) 再生速度を変更するかを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool GetIsPlaybackSpeedEnabled(int id) パラメータ id 音のID 戻り値 GetIsPlaying(Int32) 指定した音が再生中であるかを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool GetIsPlaying(int id) パラメータ id 音のID 戻り値 GetPanningPosition(Int32) パン位置を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetPanningPosition(int id) パラメータ id 音のID 戻り値 GetPlaybackPosition(Int32) 指定した音の再生位置を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetPlaybackPosition(int id) パラメータ id 音のID 戻り値 GetPlaybackSpeed(Int32) 再生速度を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetPlaybackSpeed(int id) パラメータ id 音のID 戻り値 GetSpectrum(Int32, Int32, FFTWindow) 再生中の音のスペクトル情報を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float[] GetSpectrum(int id, int dataNum, FFTWindow window) パラメータ id 音のID dataNum 音のスペクトル情報を格納するための配列の容量 window フーリエ変換に用いる窓関数 戻り値 GetSpectrum(Int32, Int32, FFTWindow, Span<Single>) 再生中の音のスペクトル情報を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void GetSpectrum(int id, int dataNum, FFTWindow window, Span<float> span) パラメータ id 音のID dataNum 音のスペクトル情報を格納するための配列の容量 window フーリエ変換に用いる窓関数 span 結果を書き込むSpan 例外 型 Condition ArgumentException span の長さが dataNum 未満。 Pause(Int32) 指定した音の再生を一時停止します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Pause(int id) パラメータ id 音のID Play(Sound) 音を再生します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int Play(Sound sound) パラメータ sound 音源データ 戻り値 例外 型 Condition ArgumentNullException sound がnull Reload() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Reload() Resume(Int32) 指定した音の再生を再開します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Resume(int id) パラメータ id 音のID SetIsPlaybackSpeedEnabled(Int32, Boolean) 再生速度を変更するかを設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetIsPlaybackSpeedEnabled(int id, bool isPlaybackSpeedEnabled) パラメータ id 音のID isPlaybackSpeedEnabled 再生速度を変更するかどうか SetPanningPosition(Int32, Single) パン位置を設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetPanningPosition(int id, float panningPosition) パラメータ id 音のID panningPosition パン位置 : 0.0で中央, -1.0で左, 1.0で右 SetPlaybackPosition(Int32, Single) 指定した音の再生位置を変更します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetPlaybackPosition(int id, float position) パラメータ id 音のID position 再生位置(秒) SetPlaybackSpeed(Int32, Single) 再生速度を設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetPlaybackSpeed(int id, float playbackSpeed) パラメータ id 音のID playbackSpeed 変更後の再生速度 SetVolume(Int32, Single) 指定した音の音量を変更します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetVolume(int id, float volume) パラメータ id 音のID volume 音量(0.0～1.0) Stop(Int32) 指定した音の再生を停止します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Stop(int id) パラメータ id 音のID StopAll() 再生中の音を全て停止します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void StopAll() <!-- -->"
  },
  "References/Altseed2.SpriteNode.html": {
    "href": "References/Altseed2.SpriteNode.html",
    "title": "SpriteNode クラス | Altseed2",
    "keywords": "SpriteNode クラス テクスチャを描画するノードを表します。 継承関係 Object Altseed2.Registerable < Node > Node TransformNode SpriteNode 継承したメンバー TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ SpriteNode() SpriteNode の新しいインスタンスを生成します。 プロパティ AlphaBlend ブレンドモードを取得または設定します。 CameraGroup カメラグループを取得または設定します。 Color 色を取得または設定します。 ContentSize コンテンツのサイズを取得します。 InheritedTransform 先祖の変形を加味した変形行列を取得します。 IsDrawn このノードを描画するかどうかを取得または設定します。 IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 Material 使用するマテリアルを取得または設定します。 Src 描画範囲を取得または設定します。 Texture 描画するテクスチャを取得または設定します。 ZOrder 描画時の重ね順を取得または設定します。 メソッド FlushQueue() 予約されている追加・削除を直ちに実行します。 コンストラクタ SpriteNode() SpriteNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public SpriteNode() 例外 型 Condition InvalidOperationException Graphics機能が初期化されていない。 プロパティ AlphaBlend ブレンドモードを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public AlphaBlend AlphaBlend { get; set; } CameraGroup カメラグループを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ulong CameraGroup { get; set; } Color 色を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Color Color { get; set; } ContentSize コンテンツのサイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed Vector2F ContentSize { get; } InheritedTransform 先祖の変形を加味した変形行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed Matrix44F InheritedTransform { get; } IsDrawn このノードを描画するかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsDrawn { get; set; } IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsDrawnActually { get; } Material 使用するマテリアルを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Material Material { get; set; } Src 描画範囲を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public RectF Src { get; set; } Texture 描画するテクスチャを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public TextureBase Texture { get; set; } ZOrder 描画時の重ね順を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int ZOrder { get; set; } メソッド FlushQueue() 予約されている追加・削除を直ちに実行します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override void FlushQueue() Remarks この Node 自身の更新中に実行することはできません。 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.ICullableDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.StaticFile.html": {
    "href": "References/Altseed2.StaticFile.html",
    "title": "StaticFile クラス | Altseed2",
    "keywords": "StaticFile クラス 一度でファイルを読み取るクラス 継承関係 Object StaticFile メンバー プロパティ Buffer 読み込まれたデータを取得します。 IsInPackage 読み込んだファイルがファイルパッケージ内に格納されているかどうかを取得します。 Path 読み込んだファイルのパスを取得します。 Size 読み込んだファイルのデータサイズを取得します。 メソッド Create(String) 指定ファイルを読み込んだ StaticFile の新しいインスタンスを生成します。 CreateAsync(String) 非同期読み込みを行います。 CreateStrict(String) 指定パスからファイルを読み込みます。失敗した場合、例外が発生します。 Reload() 再読み込みを行います。 プロパティ Buffer 読み込まれたデータを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public byte[] Buffer { get; } IsInPackage 読み込んだファイルがファイルパッケージ内に格納されているかどうかを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsInPackage { get; } Path 読み込んだファイルのパスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public string Path { get; } Size 読み込んだファイルのデータサイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int Size { get; } メソッド Create(String) 指定ファイルを読み込んだ StaticFile の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static StaticFile Create(string path) パラメータ path 読み込むファイルのパス 戻り値 例外 型 Condition ArgumentNullException path がnull CreateAsync(String) 非同期読み込みを行います。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Task<StaticFile> CreateAsync(string path) パラメータ path 読み込むパス 戻り値 CreateStrict(String) 指定パスからファイルを読み込みます。失敗した場合、例外が発生します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static StaticFile CreateStrict(string path) パラメータ path 読み込むファイルのパス 戻り値 path をパスに持つファイルのデータを格納した StaticFile の新しいインスタンス 例外 型 Condition ArgumentException path が空白文字のみからなる、または使用出来ない文字を含んでいる ArgumentNullException path がnull FileNotFoundException path で指定されたファイルが見つからない PathTooLongException path が指定するパスが見つからない SystemException ファイルが破損または読み込みに失敗 Reload() 再読み込みを行います。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Reload() 戻り値 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.StreamFile.html": {
    "href": "References/Altseed2.StreamFile.html",
    "title": "StreamFile クラス | Altseed2",
    "keywords": "StreamFile クラス 段階的にファイルを読み取るクラス 継承関係 Object StreamFile メンバー プロパティ CurrentPosition 現在読み込んでいるファイル上の位置を取得します。 IsInPackage 読み込むファイルがファイルパッケージ内に格納されているかどうかを取得します。 Path 読み込んだファイルのパスを取得します。 Size 読み込むファイルのデータサイズを取得します。 TempBuffer 現在読み込まれているデータを取得します。 TempBufferSize 現在読み込んでいるファイルのデータサイズを取得します。 メソッド Create(String) 指定ファイルを読み込む StreamFile の新しいインスタンスを生成します。 CreateStrict(String) 指定パスからファイルを読み込みます。失敗した場合、例外が発生します。 Read(Int32) 指定した分ファイルを読み込みます。 Reload() 再読み込みを行います。 プロパティ CurrentPosition 現在読み込んでいるファイル上の位置を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int CurrentPosition { get; } IsInPackage 読み込むファイルがファイルパッケージ内に格納されているかどうかを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsInPackage { get; } Path 読み込んだファイルのパスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public string Path { get; } Size 読み込むファイルのデータサイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int Size { get; } TempBuffer 現在読み込まれているデータを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public byte[] TempBuffer { get; } TempBufferSize 現在読み込んでいるファイルのデータサイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int TempBufferSize { get; } メソッド Create(String) 指定ファイルを読み込む StreamFile の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static StreamFile Create(string path) パラメータ path 読み込むファイルのパス 戻り値 例外 型 Condition ArgumentNullException path がnull CreateStrict(String) 指定パスからファイルを読み込みます。失敗した場合、例外が発生します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static StreamFile CreateStrict(string path) パラメータ path 読み込むファイルのパス 戻り値 path をパスに持つファイルのデータを格納した StreamFile の新しいインスタンス 例外 型 Condition ArgumentException path が空白文字のみからなる、または使用出来ない文字を含んでいる ArgumentNullException path がnull FileNotFoundException path で指定されたファイルが見つからない PathTooLongException path が指定するパスが見つからない SystemException ファイルが破損または読み込みに失敗 Read(Int32) 指定した分ファイルを読み込みます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int Read(int size) パラメータ size この処理で読み込むデータサイズ 戻り値 Reload() 再読み込みを行います。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Reload() 戻り値 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"System.Runtime.Serialization.IDeserializationCallback\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.TextNode.html": {
    "href": "References/Altseed2.TextNode.html",
    "title": "TextNode クラス | Altseed2",
    "keywords": "TextNode クラス テキストを描画するノードのクラス 継承関係 Object Altseed2.Registerable < Node > Node TransformNode TextNode 継承したメンバー TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ TextNode() 新しいインスタンスを生成します。 プロパティ AlphaBlend ブレンドモードを取得または設定します。 CameraGroup カメラグループを取得または設定します。 CharacterSpace 字間をピクセル単位で取得または設定します。 Color 色を取得または設定します。 ContentSize コンテンツのサイズを取得します。 Font 文字列の描画に使用するフォントを取得または設定します。 FontSize 文字の大きさを取得または設定します。 InheritedTransform 先祖の変形を加味した変形行列を取得します。 IsDrawn このノードを描画するかどうかを取得または設定します。 IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 IsEnableKerning カーニングの有無を取得または設定します。 LineGap 行間をピクセル単位で取得または設定します。 Nullを指定するとフォント標準の行間を使用します。 MaterialGlyph 文字の描画に使用するマテリアルを取得または設定します。 MaterialImage 文字テクスチャの描画に使用するマテリアルを取得または設定します。 Text 描画する文字列を取得または設定します。 WritingDirection 行の方向を取得または設定します。 ZOrder 描画時の重ね順を取得または設定します。 メソッド FlushQueue() 予約されている追加・削除を直ちに実行します。 コンストラクタ TextNode() 新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public TextNode() 例外 型 Condition InvalidOperationException Graphics機能が初期化されていない。 プロパティ AlphaBlend ブレンドモードを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public AlphaBlend AlphaBlend { get; set; } CameraGroup カメラグループを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ulong CameraGroup { get; set; } CharacterSpace 字間をピクセル単位で取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float CharacterSpace { get; set; } Color 色を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Color Color { get; set; } ContentSize コンテンツのサイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed Vector2F ContentSize { get; } Font 文字列の描画に使用するフォントを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Font Font { get; set; } FontSize 文字の大きさを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float FontSize { get; set; } InheritedTransform 先祖の変形を加味した変形行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override sealed Matrix44F InheritedTransform { get; } IsDrawn このノードを描画するかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsDrawn { get; set; } IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsDrawnActually { get; } IsEnableKerning カーニングの有無を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsEnableKerning { get; set; } LineGap 行間をピクセル単位で取得または設定します。 Nullを指定するとフォント標準の行間を使用します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float? LineGap { get; set; } MaterialGlyph 文字の描画に使用するマテリアルを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Material MaterialGlyph { get; set; } MaterialImage 文字テクスチャの描画に使用するマテリアルを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Material MaterialImage { get; set; } Text 描画する文字列を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public string Text { get; set; } WritingDirection 行の方向を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public WritingDirection WritingDirection { get; set; } ZOrder 描画時の重ね順を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int ZOrder { get; set; } メソッド FlushQueue() 予約されている追加・削除を直ちに実行します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override void FlushQueue() Remarks この Node 自身の更新中に実行することはできません。 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.ICullableDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Texture2D.html": {
    "href": "References/Altseed2.Texture2D.html",
    "title": "Texture2D クラス | Altseed2",
    "keywords": "Texture2D クラス テクスチャのクラス 継承関係 Object TextureBase Texture2D 継承したメンバー TextureBase.Size テクスチャの大きさ(ピクセル)を取得します。 TextureBase.WrapMode テクスチャをサンプリングする方法を取得または設定します。 TextureBase.FilterType テクスチャをフィルタリングする方法を取得または設定します。 TextureBase.Format テクスチャのフォーマットを取得します。 TextureBase.Save(String) png画像として保存します。 メンバー プロパティ Path 読み込んだファイルのパスを取得します。 メソッド Create(Vector2I) Load(String) 指定したファイルからテクスチャを読み込みます。 LoadAsync(String) 非同期読み込みを行います。 LoadStrict(String) 指定パスからテクスチャを読み込みます。 Reload() 再読み込みを行います。 プロパティ Path 読み込んだファイルのパスを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> string Path { } メソッド Create(Vector2I) <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Texture2D Create(Vector2I size) パラメータ size 戻り値 Load(String) 指定したファイルからテクスチャを読み込みます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Texture2D Load(string path) パラメータ path 読み込むファイルのパス 戻り値 例外 型 Condition ArgumentNullException path がnull LoadAsync(String) 非同期読み込みを行います。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Task<Texture2D> LoadAsync(string path) パラメータ path 読み込むパス 戻り値 path のファイルから読み込まれたテクスチャ 例外 型 Condition ArgumentNullException path がnull LoadStrict(String) 指定パスからテクスチャを読み込みます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Texture2D LoadStrict(string path) パラメータ path 読み込むテクスチャのパス 戻り値 path をパスに持つテクスチャのデータを格納した Texture2D の新しいインスタンス 例外 型 Condition ArgumentException path が空白文字のみからなる、または使用出来ない文字を含んでいる ArgumentNullException path がnull FileNotFoundException path で指定されたテクスチャが見つからない PathTooLongException path が指定するパスが見つからない SystemException テクスチャが破損または読み込みに失敗 Reload() 再読み込みを行います。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Reload() 戻り値 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"System.Runtime.Serialization.IDeserializationCallback\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.TextureBase.html": {
    "href": "References/Altseed2.TextureBase.html",
    "title": "TextureBase クラス | Altseed2",
    "keywords": "TextureBase クラス テクスチャのベースクラス 継承関係 Object TextureBase RenderTexture Texture2D メンバー プロパティ FilterType テクスチャをフィルタリングする方法を取得または設定します。 Format テクスチャのフォーマットを取得します。 Size テクスチャの大きさ(ピクセル)を取得します。 WrapMode テクスチャをサンプリングする方法を取得または設定します。 メソッド Save(String) png画像として保存します。 プロパティ FilterType テクスチャをフィルタリングする方法を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public TextureFilter FilterType { get; set; } Format テクスチャのフォーマットを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public TextureFormat Format { get; } Size テクスチャの大きさ(ピクセル)を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2I Size { get; } WrapMode テクスチャをサンプリングする方法を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public TextureWrapMode WrapMode { get; set; } メソッド Save(String) png画像として保存します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Save(string path) パラメータ path 保存先 戻り値 例外 型 Condition ArgumentNullException path がnull <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.Runtime.Serialization.ISerializable\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"System.Runtime.Serialization.IDeserializationCallback\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.TextureFilter.html": {
    "href": "References/Altseed2.TextureFilter.html",
    "title": "TextureFilter 列挙体 | Altseed2",
    "keywords": "TextureFilter 列挙体 テクスチャをフィルタリングする方法を表します。 メンバー Linear Nearest"
  },
  "References/Altseed2.TextureFormat.html": {
    "href": "References/Altseed2.TextureFormat.html",
    "title": "TextureFormat 列挙体 | Altseed2",
    "keywords": "TextureFormat 列挙体 メンバー D24S8 D32 D32S8 R16G16_FLOAT R16G16B16A16_FLOAT R32G32B32A32_FLOAT R8_UNORM R8G8B8A8_UNORM R8G8B8A8_UNORM_SRGB"
  },
  "References/Altseed2.TextureWrapMode.html": {
    "href": "References/Altseed2.TextureWrapMode.html",
    "title": "TextureWrapMode 列挙体 | Altseed2",
    "keywords": "TextureWrapMode 列挙体 テクスチャをサンプリングする方法を表します。 メンバー Clamp Repeat"
  },
  "References/Altseed2.Tool.html": {
    "href": "References/Altseed2.Tool.html",
    "title": "Tool クラス | Altseed2",
    "keywords": "Tool クラス imguiのツール処理を行うクラス 継承関係 Object Tool メンバー プロパティ ToolUsage ツールの使用方法を取得または設定します。 メソッド AddFontFromFileTTF(String, Single, ToolGlyphRange) パスからフォントを読み込みます。パックされたファイルは非対応です。 AlignTextToFramePadding() ArrowButton(String, ToolDir) 矢印ボタンを生成します。 Begin(String, ToolWindowFlags) 'End()' を呼び出してください。 Begin(String, ref Boolean, ToolWindowFlags) 'End()' を呼び出してください。 BeginChild(Int32, Vector2F, Boolean, ToolWindowFlags) 'EndChild()' を呼び出してください BeginChild(String, Vector2F, Boolean, ToolWindowFlags) 'EndChild()' を呼び出してください BeginChildFrame(Int32, Vector2F, ToolWindowFlags) BeginCombo(String, String, ToolComboFlags) BeginDockHost(String, Vector2F) BeginDragDropSource(ToolDragDropFlags) BeginDragDropTarget() BeginFullScreen(Int32, ToolWindowFlags) フルスクリーンでツールウィンドウを開始します。 BeginGroup() BeginMainMenuBar() BeginMenu(String, Boolean) 'EndMenu()' を呼び出してください BeginMenuBar() 'EndMenuBar()' を呼び出してください BeginPopup(String, ToolWindowFlags) 'EndPopup()' を呼び出してください BeginPopupContextItem(String, ToolPopupFlags) BeginPopupContextVoid(String, ToolPopupFlags) BeginPopupContextWindow(String, ToolPopupFlags) BeginPopupModal(String, ToolWindowFlags) 'EndPopup()' を呼び出してください BeginPopupModal(String, ref Boolean, ToolWindowFlags) 'EndPopup()' を呼び出してください BeginTabBar(String, ToolTabBarFlags) 'EndTabBar()' を呼び出してください BeginTabItem(String, ToolTabItemFlags) 'EndTabItem()' を呼び出してください BeginTabItem(String, ref Boolean, ToolTabItemFlags) 'EndTabItem()' を呼び出してください BeginTooltip() 'EndTooltip()' を呼び出してください Bullet() 点を生成します。 BulletText(String) 箇条書きテキストを生成します。 Button(String) ボタンを生成します。 Button(String, Vector2F) ボタンを生成します。 CalcItemWidth() CalcListClipping(Int32, Single, ref Int32, ref Int32) CalcTextSize(String, String, Boolean, Single) CaptureKeyboardFromApp(Boolean) CaptureMouseFromApp(Boolean) Checkbox(String, ref Boolean) CloseCurrentPopup() CollapsingHeader(String, ToolTreeNodeFlags) 折り畳み式のヘッダを生成します。 CollapsingHeader(String, ref Boolean, ToolTreeNodeFlags) 折り畳み式のヘッダを生成します。 ColorConvertFloat4ToU32(Vector4F) ColorConvertU32ToFloat4(Int32) ColorEdit3(String, ref Color, ToolColorEditFlags) ColorEdit4(String, ref Color, ToolColorEditFlags) Columns(Int32, String, Boolean) Combo(String, ref Int32, IEnumerable<String>, Int32) コンボボックスを生成します。 Combo(String, ref Int32, String, Int32) コンボボックスを生成します。 DestroyPlatformWindows() DockSpace(Int32, Vector2F, ToolDockNodeFlags) DragFloat(String, ref Single, Single, Single, Single, String, ToolSliderFlags) 1つのドラッグで値が増減するバーを生成します。 DragFloat2(String, Span<Single>, Single, Single, Single, String, ToolSliderFlags) DragFloat3(String, Span<Single>, Single, Single, Single, String, ToolSliderFlags) DragFloat4(String, Span<Single>, Single, Single, Single, String, ToolSliderFlags) DragFloatRange2(String, ref Single, ref Single, Single, Single, Single, String, String, ToolSliderFlags) 2つのドラッグで値が増減するバーを生成します DragInt(String, ref Int32, Single, Int32, Int32, String, ToolSliderFlags) 1つのドラッグで値が増減するバーを生成します。 DragInt2(String, Span<Int32>, Single, Int32, Int32, String, ToolSliderFlags) DragInt3(String, Span<Int32>, Single, Int32, Int32, String, ToolSliderFlags) DragInt4(String, Span<Int32>, Single, Int32, Int32, String, ToolSliderFlags) DragIntRange2(String, ref Int32, ref Int32, Single, Int32, Int32, String, String, ToolSliderFlags) 2つのドラッグで値が増減するバーを生成します Dummy(Vector2F) 空白を生成します。 End() EndChild() EndChildFrame() EndCombo() EndDragDropSource() EndDragDropTarget() EndGroup() EndMainMenuBar() EndMenu() EndMenuBar() EndPopup() EndTabBar() EndTabItem() EndTooltip() GetClipboardText() GetColorU32(ToolCol, Single) GetColorU32(Vector4F) GetColorU32(Int32) GetColumnIndex() GetColumnOffset(Int32) GetColumnsCount() GetColumnWidth(Int32) GetContentRegionAvail() GetContentRegionMax() GetCursorPos() GetCursorPosX() GetCursorPosY() GetCursorScreenPos() GetCursorStartPos() GetFontSize() GetFontTexUvWhitePixel() GetFrameCount() GetFrameHeight() GetFrameHeightWithSpacing() GetID(String) GetID(String, String) GetItemRectMax() GetItemRectMin() GetItemRectSize() GetKeyIndex(ToolKey) GetKeyPressedAmount(Int32, Single, Single) GetMainViewportID() GetMainViewportPos() GetMainViewportSize() GetMainViewportWorkPos() GetMainViewportWorkSize() GetMouseDragDelta(ToolMouseButton, Single) GetMousePos() GetMousePosOnOpeningCurrentPopup() GetScrollMaxX() GetScrollMaxY() GetScrollX() GetScrollY() GetStyleColorName(ToolCol) GetTextLineHeight() GetTextLineHeightWithSpacing() GetTime() GetTreeNodeToLabelSpacing() GetVersion() GetWindowContentRegionMax() GetWindowContentRegionMin() GetWindowContentRegionWidth() GetWindowDockID() GetWindowDpiScale() GetWindowHeight() GetWindowPos() GetWindowSize() GetWindowWidth() Image(TextureBase, Vector2F, Vector2F, Vector2F, Color, Color) 画像表示ボックスを生成します。 ImageButton(TextureBase, Vector2F, Vector2F, Vector2F, Int32, Color, Color) ボタンとして機能する画像表示ボックスを生成します。 Indent(Single) 次の要素を右にずらします。 InputFloat(String, ref Single, Single, Single, String, ToolInputTextFlags) 1つの小数が入力可能なボックスを生成します。 InputFloat2(String, Span<Single>, String, ToolInputTextFlags) 2つの小数を入力するボックスを生成します。 InputFloat3(String, Span<Single>, String, ToolInputTextFlags) 3つの小数を入力するボックスを生成します。 InputFloat4(String, Span<Single>, String, ToolInputTextFlags) 4つの小数を入力するボックスを生成します。 InputInt(String, ref Int32, Int32, Int32, ToolInputTextFlags) 1つの整数が入力可能なボックスを生成します。 InputInt2(String, Span<Int32>, ToolInputTextFlags) 2つの整数を入力するボックスを生成します。 InputInt3(String, Span<Int32>, ToolInputTextFlags) 3つの整数を入力するボックスを生成します。 InputInt4(String, Span<Int32>, ToolInputTextFlags) 4つの整数を入力するボックスを生成します。 InputText(String, String, Int32, ToolInputTextFlags) テキストを入力するボックスを生成します。 InputTextMultiline(String, String, Int32, Vector2F, ToolInputTextFlags) 複数行のテキストが入力可能なボックスを生成します。 InputTextWithHint(String, String, String, Int32, ToolInputTextFlags) ヒント付きのテキスト入力ボックスを生成します。 InvisibleButton(String, Vector2F, ToolButtonFlags) 見えないボタンを生成します。 IsAnyItemActive() IsAnyItemFocused() IsAnyItemHovered() IsAnyMouseDown() IsItemActivated() IsItemActive() IsItemClicked(ToolMouseButton) IsItemDeactivated() IsItemDeactivatedAfterEdit() IsItemEdited() IsItemFocused() IsItemHovered(ToolHoveredFlags) IsItemToggledOpen() IsItemVisible() IsKeyDown(Int32) IsKeyPressed(Int32, Boolean) IsKeyReleased(Int32) IsMouseClicked(ToolMouseButton, Boolean) IsMouseDoubleClicked(ToolMouseButton) IsMouseDown(ToolMouseButton) IsMouseDragging(ToolMouseButton, Single) IsMouseHoveringRect(Vector2F, Vector2F, Boolean) IsMouseReleased(ToolMouseButton) IsPopupOpen(String, ToolPopupFlags) IsRectVisible(Vector2F) IsRectVisible(Vector2F, Vector2F) IsWindowAppearing() IsWindowCollapsed() IsWindowDocked() IsWindowFocused(ToolFocusedFlags) IsWindowHovered(ToolHoveredFlags) LabelText(String, String) 横にラベルの付いたテキストを生成します。 ListBox(String, ref Int32, IEnumerable<String>, Int32) リストボックスを生成します。 ListBox(String, ref Int32, String, Int32) リストボックスを生成します。 ListBoxFooter() ListBoxHeader(String, Vector2F) ListBoxHeader(String, Int32, Int32) LoadIniSettingsFromDisk(String) LogButtons() LogFinish() LogText(String) LogToClipboard(Int32) LogToFile(Int32, String) LogToTTY(Int32) MenuItem(String, String, Boolean, Boolean) MenuItem(String, String, ref Boolean, Boolean) NewFrame() NewLine() NextColumn() OpenDialog(String, String) 1つの開くファイルを選択するダイアログを開きます。 OpenDialogMultiple(String, String) 複数の開くファイルを選択するダイアログを開きます。 OpenPopup(String, ToolPopupFlags) OpenPopupOnItemClick(String, ToolPopupFlags) PickFolder(String) フォルダを選択するダイアログを開きます。 PlotHistogram(String, Span<Single>, Int32, Int32, String, Single, Single, Vector2F, Int32) PlotLines(String, Span<Single>, Int32, Int32, String, Single, Single, Vector2F, Int32) PopAllowKeyboardFocus() PopButtonRepeat() PopClipRect() PopFont() PopID() PopItemWidth() PopStyleColor(Int32) PopStyleVar(Int32) PopTextWrapPos() ProgressBar(Single, Vector2F, String) プログレスバーを生成します。 PushAllowKeyboardFocus(Boolean) PushButtonRepeat(Boolean) PushClipRect(Vector2F, Vector2F, Boolean) PushID(Int32) PushID(String) PushID(String, String) PushItemWidth(Single) PushStyleColor(ToolCol, Vector4F) PushStyleColor(ToolCol, Int32) PushStyleVar(ToolStyleVar, Vector2F) PushStyleVar(ToolStyleVar, Single) PushTextWrapPos(Single) RadioButton(String, Boolean) ラジオボタンを生成します。 RadioButton(String, ref Int32, Int32) ラジオボタンを生成します。 ResetMouseDragDelta(ToolMouseButton) SameLine(Single, Single) SaveDialog(String, String) 保存するファイルを選択するダイアログを開きます。 SaveIniSettingsToDisk(String) Selectable(String, Boolean, ToolSelectableFlags, Vector2F) 選択式のテキストを生成します。 Selectable(String, ref Boolean, ToolSelectableFlags, Vector2F) 選択式のテキストを生成します。 Separator() 仕切りを生成します。 SetClipboardText(String) SetColorEditOptions(ToolColorEditFlags) SetColumnOffset(Int32, Single) SetColumnWidth(Int32, Single) SetCursorPos(Vector2F) SetCursorPosX(Single) SetCursorPosY(Single) SetCursorScreenPos(Vector2F) SetItemAllowOverlap() SetItemDefaultFocus() SetKeyboardFocusHere(Int32) SetMouseCursor(ToolMouseCursor) SetNextItemOpen(Boolean, ToolCond) SetNextItemWidth(Single) SetNextWindowBgAlpha(Single) SetNextWindowCollapsed(Boolean, ToolCond) SetNextWindowContentSize(Vector2F) SetNextWindowDockID(Int32, ToolCond) SetNextWindowFocus() SetNextWindowPos(Vector2F, ToolCond, Vector2F) SetNextWindowSize(Vector2F, ToolCond) SetNextWindowViewport(Int32) SetScrollFromPosX(Single, Single) SetScrollFromPosY(Single, Single) SetScrollHereX(Single) SetScrollHereY(Single) SetScrollX(Single) SetScrollY(Single) SetTabItemClosed(String) SetTooltip(String) SetWindowCollapsed(Boolean, ToolCond) SetWindowCollapsed(String, Boolean, ToolCond) SetWindowFocus() SetWindowFocus(String) SetWindowFontScale(Single) SetWindowPos(Vector2F, ToolCond) SetWindowPos(String, Vector2F, ToolCond) SetWindowSize(Vector2F, ToolCond) SetWindowSize(String, Vector2F, ToolCond) ShowAboutWindow(ref Boolean) ShowAboutWindowNoCloseButton() ShowDemoWindow(ref Boolean) ShowDemoWindowNoCloseButton() ShowFontSelector(String) ShowMetricsWindow(ref Boolean) ShowMetricsWindowNoCloseButton() ShowStyleSelector(String) ShowUserGuide() SliderAngle(String, ref Single, Single, Single, String, ToolSliderFlags) スライドで値が増減する，角度を扱うバーを生成します。 SliderFloat(String, ref Single, Single, Single, String, ToolSliderFlags) 1つのスライドで値が増減するバーを生成します。 SliderFloat2(String, Span<Single>, Single, Single, String, ToolSliderFlags) 2つのスライドで値を増減するバーを生成します。 SliderFloat3(String, Span<Single>, Single, Single, String, ToolSliderFlags) 3つのスライドで値を増減するバーを生成します。 SliderFloat4(String, Span<Single>, Single, Single, String, ToolSliderFlags) 4つのスライドで値を増減するバーを生成します。 SliderInt(String, ref Int32, Int32, Int32, String, ToolSliderFlags) 1つのスライドで値が増減するバーを生成します。 SliderInt2(String, Span<Int32>, Int32, Int32, String, ToolSliderFlags) 2つのスライドで値を増減するバーを生成します。 SliderInt3(String, Span<Int32>, Int32, Int32, String, ToolSliderFlags) 3つのスライドで値を増減するバーを生成します。 SliderInt4(String, Span<Int32>, Int32, Int32, String, ToolSliderFlags) 4つのスライドで値を増減するバーを生成します。 SmallButton(String) 小さなボタンを生成します。 Spacing() TabItemButton(String, ToolTabItemFlags) Text(String) テキストを生成します。 TextColored(Vector4F, String) 色付きテキストを生成します。 TextDisabled(String) 灰字のテキストを生成します。 TextUnformatted(String, String) TextWrapped(String) TreeNode(String) ツリーのノードを生成します。 TreeNode(String, String) ツリーのノードを生成します。 TreeNodeEx(String, ToolTreeNodeFlags) ツリーのノードを生成します。 TreeNodeEx(String, ToolTreeNodeFlags, String) ツリーのノードを生成します。 TreePop() TreeNodeのツリーを開きます。 TreePush(String) Unindent(Single) 右にずらすインデントを1つ分打消します。 UpdatePlatformWindows() Value(String, Boolean) Value(String, Int32) Value(String, Single, String) VSliderFloat(String, Vector2F, ref Single, Single, Single, String, ToolSliderFlags) スライドで値が増減する縦バーを生成します。 VSliderInt(String, Vector2F, ref Int32, Int32, Int32, String, ToolSliderFlags) スライドで値が増減する縦バーを生成します。 プロパティ ToolUsage ツールの使用方法を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public ToolUsage ToolUsage { get; set; } メソッド AddFontFromFileTTF(String, Single, ToolGlyphRange) パスからフォントを読み込みます。パックされたファイルは非対応です。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool AddFontFromFileTTF(string path, float sizePixels, ToolGlyphRange ranges) パラメータ path sizePixels ranges 戻り値 例外 型 Condition ArgumentNullException path がnull AlignTextToFramePadding() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void AlignTextToFramePadding() ArrowButton(String, ToolDir) 矢印ボタンを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool ArrowButton(string str_id, ToolDir dir) パラメータ str_id dir 矢印の向き 戻り値 例外 型 Condition ArgumentNullException str_id がnull Begin(String, ToolWindowFlags) 'End()' を呼び出してください。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Begin(string name, ToolWindowFlags flags) パラメータ name flags 戻り値 例外 型 Condition ArgumentNullException name がnull Begin(String, ref Boolean, ToolWindowFlags) 'End()' を呼び出してください。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Begin(string name, ref bool p_open, ToolWindowFlags flags) パラメータ name p_open flags 戻り値 例外 型 Condition ArgumentNullException name がnull BeginChild(Int32, Vector2F, Boolean, ToolWindowFlags) 'EndChild()' を呼び出してください <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginChild(int id, Vector2F size, bool border, ToolWindowFlags flags) パラメータ id size border flags 戻り値 BeginChild(String, Vector2F, Boolean, ToolWindowFlags) 'EndChild()' を呼び出してください <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginChild(string str_id, Vector2F size, bool border, ToolWindowFlags flags) パラメータ str_id size border flags 戻り値 例外 型 Condition ArgumentNullException str_id がnull BeginChildFrame(Int32, Vector2F, ToolWindowFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginChildFrame(int id, Vector2F size, ToolWindowFlags flags) パラメータ id size flags 戻り値 BeginCombo(String, String, ToolComboFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginCombo(string label, string preview_value, ToolComboFlags flags) パラメータ label preview_value flags 戻り値 BeginDockHost(String, Vector2F) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginDockHost(string label, Vector2F offset) パラメータ label offset 戻り値 BeginDragDropSource(ToolDragDropFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginDragDropSource(ToolDragDropFlags flags) パラメータ flags 戻り値 BeginDragDropTarget() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginDragDropTarget() 戻り値 BeginFullScreen(Int32, ToolWindowFlags) フルスクリーンでツールウィンドウを開始します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginFullScreen(int offset, ToolWindowFlags flags = ToolWindowFlags.None) パラメータ offset flags 戻り値 処理に成功したらtrue，それ以外でfalse BeginGroup() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void BeginGroup() BeginMainMenuBar() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginMainMenuBar() 戻り値 BeginMenu(String, Boolean) 'EndMenu()' を呼び出してください <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginMenu(string label, bool enabled) パラメータ label enabled 戻り値 例外 型 Condition ArgumentNullException label がnull BeginMenuBar() 'EndMenuBar()' を呼び出してください <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginMenuBar() 戻り値 BeginPopup(String, ToolWindowFlags) 'EndPopup()' を呼び出してください <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginPopup(string str_id, ToolWindowFlags flags) パラメータ str_id flags 戻り値 例外 型 Condition ArgumentNullException str_id がnull BeginPopupContextItem(String, ToolPopupFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginPopupContextItem(string str_id, ToolPopupFlags popup_flags) パラメータ str_id popup_flags 戻り値 BeginPopupContextVoid(String, ToolPopupFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginPopupContextVoid(string str_id, ToolPopupFlags popup_flags) パラメータ str_id popup_flags 戻り値 BeginPopupContextWindow(String, ToolPopupFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginPopupContextWindow(string str_id, ToolPopupFlags popup_flags) パラメータ str_id popup_flags 戻り値 BeginPopupModal(String, ToolWindowFlags) 'EndPopup()' を呼び出してください <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginPopupModal(string name, ToolWindowFlags flags) パラメータ name flags 戻り値 例外 型 Condition ArgumentNullException name がnull BeginPopupModal(String, ref Boolean, ToolWindowFlags) 'EndPopup()' を呼び出してください <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginPopupModal(string name, ref bool p_open, ToolWindowFlags flags) パラメータ name p_open flags 戻り値 例外 型 Condition ArgumentNullException name がnull BeginTabBar(String, ToolTabBarFlags) 'EndTabBar()' を呼び出してください <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginTabBar(string str_id, ToolTabBarFlags flags) パラメータ str_id flags 戻り値 例外 型 Condition ArgumentNullException str_id がnull BeginTabItem(String, ToolTabItemFlags) 'EndTabItem()' を呼び出してください <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginTabItem(string label, ToolTabItemFlags flags) パラメータ label flags 戻り値 例外 型 Condition ArgumentNullException label がnull BeginTabItem(String, ref Boolean, ToolTabItemFlags) 'EndTabItem()' を呼び出してください <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool BeginTabItem(string label, ref bool p_open, ToolTabItemFlags flags) パラメータ label p_open flags 戻り値 例外 型 Condition ArgumentNullException label がnull BeginTooltip() 'EndTooltip()' を呼び出してください <!-- <h5 class=\"decalaration\">宣言</h5> --> public void BeginTooltip() Bullet() 点を生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Bullet() BulletText(String) 箇条書きテキストを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void BulletText(string fmt) パラメータ fmt 例外 型 Condition ArgumentNullException fmt がnull Button(String) ボタンを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Button(string label) パラメータ label ボタンに表示される文字列 戻り値 クリックされた時にtrue，それ以外でfalse Button(String, Vector2F) ボタンを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Button(string label, Vector2F size) パラメータ label 表示するテキスト size サイズ 戻り値 例外 型 Condition ArgumentNullException label がnull CalcItemWidth() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float CalcItemWidth() 戻り値 CalcListClipping(Int32, Single, ref Int32, ref Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void CalcListClipping(int items_count, float items_height, ref int out_items_display_start, ref int out_items_display_end) パラメータ items_count items_height out_items_display_start out_items_display_end CalcTextSize(String, String, Boolean, Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F CalcTextSize(string text, string text_end, bool hide_text_after_double_hash, float wrap_width) パラメータ text text_end hide_text_after_double_hash wrap_width 戻り値 CaptureKeyboardFromApp(Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void CaptureKeyboardFromApp(bool want_capture_keyboard_value) パラメータ want_capture_keyboard_value CaptureMouseFromApp(Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void CaptureMouseFromApp(bool want_capture_mouse_value) パラメータ want_capture_mouse_value Checkbox(String, ref Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Checkbox(string label, ref bool v) パラメータ label v 戻り値 CloseCurrentPopup() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void CloseCurrentPopup() CollapsingHeader(String, ToolTreeNodeFlags) 折り畳み式のヘッダを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool CollapsingHeader(string label, ToolTreeNodeFlags flags) パラメータ label 表示するテキスト flags 適用する設定 戻り値 例外 型 Condition ArgumentNullException label がnull CollapsingHeader(String, ref Boolean, ToolTreeNodeFlags) 折り畳み式のヘッダを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool CollapsingHeader(string label, ref bool p_open, ToolTreeNodeFlags flags) パラメータ label 表示するテキスト p_open flags 適用する設定 戻り値 例外 型 Condition ArgumentNullException label がnull ColorConvertFloat4ToU32(Vector4F) <!-- <h5 class=\"decalaration\">宣言</h5> --> public int ColorConvertFloat4ToU32(Vector4F in_) パラメータ in_ 戻り値 ColorConvertU32ToFloat4(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector4F ColorConvertU32ToFloat4(int in_) パラメータ in_ 戻り値 ColorEdit3(String, ref Color, ToolColorEditFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool ColorEdit3(string label, ref Color col, ToolColorEditFlags flags) パラメータ label col flags 戻り値 ColorEdit4(String, ref Color, ToolColorEditFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool ColorEdit4(string label, ref Color col, ToolColorEditFlags flags) パラメータ label col flags 戻り値 Columns(Int32, String, Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Columns(int count, string id, bool border) パラメータ count id border Combo(String, ref Int32, IEnumerable<String>, Int32) コンボボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Combo(string label, ref int current, IEnumerable<string> items, int popupMaxHeightInItems) パラメータ label 横に表示されるラベルの文字列 current 選択されている要素のインデックス -1で何も選択していない事を表す items 表示する要素の文字列 popupMaxHeightInItems 表示される要素の数 戻り値 いずれかの要素がクリックされたらtrue，それ以外でfalse Combo(String, ref Int32, String, Int32) コンボボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Combo(string label, ref int current_item, string items_separated_by_tabs, int popup_max_height_in_items) パラメータ label 横に表示されるラベルのテキスト current_item 選択されているアイテムのインデックス -1で選択無し items_separated_by_tabs popup_max_height_in_items 戻り値 例外 型 Condition ArgumentNullException label , items_separated_by_tabs のいずれかがnull DestroyPlatformWindows() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void DestroyPlatformWindows() DockSpace(Int32, Vector2F, ToolDockNodeFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void DockSpace(int id, Vector2F size, ToolDockNodeFlags flags) パラメータ id size flags DragFloat(String, ref Single, Single, Single, Single, String, ToolSliderFlags) 1つのドラッグで値が増減するバーを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool DragFloat(string label, ref float v, float v_speed, float v_min, float v_max, string format, ToolSliderFlags flags) パラメータ label 横に表示するラベルのテキスト v v_speed v_min v_max format flags 戻り値 例外 型 Condition ArgumentNullException label , format のいずれかがnull DragFloat2(String, Span<Single>, Single, Single, Single, String, ToolSliderFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool DragFloat2(string label, Span<float> span, float v_speed, float v_min, float v_max, string format, ToolSliderFlags flags) パラメータ label span v_speed v_min v_max format flags 戻り値 DragFloat3(String, Span<Single>, Single, Single, Single, String, ToolSliderFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool DragFloat3(string label, Span<float> span, float v_speed, float v_min, float v_max, string format, ToolSliderFlags flags) パラメータ label span v_speed v_min v_max format flags 戻り値 DragFloat4(String, Span<Single>, Single, Single, Single, String, ToolSliderFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool DragFloat4(string label, Span<float> span, float v_speed, float v_min, float v_max, string format, ToolSliderFlags flags) パラメータ label span v_speed v_min v_max format flags 戻り値 DragFloatRange2(String, ref Single, ref Single, Single, Single, Single, String, String, ToolSliderFlags) 2つのドラッグで値が増減するバーを生成します <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, float v_max, string format, string format_max, ToolSliderFlags flags) パラメータ label 横に表示するラベルのテキスト v_current_min v_current_max v_speed v_min v_max format format_max flags 戻り値 例外 型 Condition ArgumentNullException label , format , format_max のいずれかがnull DragInt(String, ref Int32, Single, Int32, Int32, String, ToolSliderFlags) 1つのドラッグで値が増減するバーを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool DragInt(string label, ref int v, float v_speed, int v_min, int v_max, string format, ToolSliderFlags flags) パラメータ label 横に表示するラベルのテキスト v v_speed v_min v_max format flags 戻り値 例外 型 Condition ArgumentNullException label , format のいずれかがnull DragInt2(String, Span<Int32>, Single, Int32, Int32, String, ToolSliderFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool DragInt2(string label, Span<int> span, float v_speed, int v_min, int v_max, string format, ToolSliderFlags flags) パラメータ label span v_speed v_min v_max format flags 戻り値 DragInt3(String, Span<Int32>, Single, Int32, Int32, String, ToolSliderFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool DragInt3(string label, Span<int> span, float v_speed, int v_min, int v_max, string format, ToolSliderFlags flags) パラメータ label span v_speed v_min v_max format flags 戻り値 DragInt4(String, Span<Int32>, Single, Int32, Int32, String, ToolSliderFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool DragInt4(string label, Span<int> span, float v_speed, int v_min, int v_max, string format, ToolSliderFlags flags) パラメータ label span v_speed v_min v_max format flags 戻り値 DragIntRange2(String, ref Int32, ref Int32, Single, Int32, Int32, String, String, ToolSliderFlags) 2つのドラッグで値が増減するバーを生成します <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, int v_max, string format, string format_max, ToolSliderFlags flags) パラメータ label 横に表示するラベルのテキスト v_current_min v_current_max v_speed v_min v_max format format_max flags 戻り値 例外 型 Condition ArgumentNullException label , format , format_max のいずれかがnull Dummy(Vector2F) 空白を生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Dummy(Vector2F size) パラメータ size 空白のサイズ End() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void End() EndChild() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void EndChild() EndChildFrame() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void EndChildFrame() EndCombo() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void EndCombo() EndDragDropSource() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void EndDragDropSource() EndDragDropTarget() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void EndDragDropTarget() EndGroup() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void EndGroup() EndMainMenuBar() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void EndMainMenuBar() EndMenu() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void EndMenu() EndMenuBar() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void EndMenuBar() EndPopup() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void EndPopup() EndTabBar() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void EndTabBar() EndTabItem() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void EndTabItem() EndTooltip() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void EndTooltip() GetClipboardText() <!-- <h5 class=\"decalaration\">宣言</h5> --> public string GetClipboardText() 戻り値 GetColorU32(ToolCol, Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public int GetColorU32(ToolCol idx, float alpha_mul) パラメータ idx alpha_mul 戻り値 GetColorU32(Vector4F) <!-- <h5 class=\"decalaration\">宣言</h5> --> public int GetColorU32(Vector4F col) パラメータ col 戻り値 GetColorU32(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public int GetColorU32(int col) パラメータ col 戻り値 GetColumnIndex() <!-- <h5 class=\"decalaration\">宣言</h5> --> public int GetColumnIndex() 戻り値 GetColumnOffset(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetColumnOffset(int column_index) パラメータ column_index 戻り値 GetColumnsCount() <!-- <h5 class=\"decalaration\">宣言</h5> --> public int GetColumnsCount() 戻り値 GetColumnWidth(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetColumnWidth(int column_index) パラメータ column_index 戻り値 GetContentRegionAvail() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetContentRegionAvail() 戻り値 GetContentRegionMax() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetContentRegionMax() 戻り値 GetCursorPos() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetCursorPos() 戻り値 GetCursorPosX() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetCursorPosX() 戻り値 GetCursorPosY() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetCursorPosY() 戻り値 GetCursorScreenPos() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetCursorScreenPos() 戻り値 GetCursorStartPos() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetCursorStartPos() 戻り値 GetFontSize() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetFontSize() 戻り値 GetFontTexUvWhitePixel() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetFontTexUvWhitePixel() 戻り値 GetFrameCount() <!-- <h5 class=\"decalaration\">宣言</h5> --> public int GetFrameCount() 戻り値 GetFrameHeight() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetFrameHeight() 戻り値 GetFrameHeightWithSpacing() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetFrameHeightWithSpacing() 戻り値 GetID(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public int GetID(string str_id) パラメータ str_id 戻り値 GetID(String, String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public int GetID(string str_id_begin, string str_id_end) パラメータ str_id_begin str_id_end 戻り値 GetItemRectMax() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetItemRectMax() 戻り値 GetItemRectMin() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetItemRectMin() 戻り値 GetItemRectSize() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetItemRectSize() 戻り値 GetKeyIndex(ToolKey) <!-- <h5 class=\"decalaration\">宣言</h5> --> public int GetKeyIndex(ToolKey imgui_key) パラメータ imgui_key 戻り値 GetKeyPressedAmount(Int32, Single, Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public int GetKeyPressedAmount(int key_index, float repeat_delay, float rate) パラメータ key_index repeat_delay rate 戻り値 GetMainViewportID() <!-- <h5 class=\"decalaration\">宣言</h5> --> public int GetMainViewportID() 戻り値 GetMainViewportPos() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetMainViewportPos() 戻り値 GetMainViewportSize() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetMainViewportSize() 戻り値 GetMainViewportWorkPos() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetMainViewportWorkPos() 戻り値 GetMainViewportWorkSize() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetMainViewportWorkSize() 戻り値 GetMouseDragDelta(ToolMouseButton, Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetMouseDragDelta(ToolMouseButton button, float lock_threshold) パラメータ button lock_threshold 戻り値 GetMousePos() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetMousePos() 戻り値 GetMousePosOnOpeningCurrentPopup() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetMousePosOnOpeningCurrentPopup() 戻り値 GetScrollMaxX() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetScrollMaxX() 戻り値 GetScrollMaxY() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetScrollMaxY() 戻り値 GetScrollX() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetScrollX() 戻り値 GetScrollY() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetScrollY() 戻り値 GetStyleColorName(ToolCol) <!-- <h5 class=\"decalaration\">宣言</h5> --> public string GetStyleColorName(ToolCol idx) パラメータ idx 戻り値 GetTextLineHeight() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetTextLineHeight() 戻り値 GetTextLineHeightWithSpacing() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetTextLineHeightWithSpacing() 戻り値 GetTime() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetTime() 戻り値 GetTreeNodeToLabelSpacing() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetTreeNodeToLabelSpacing() 戻り値 GetVersion() <!-- <h5 class=\"decalaration\">宣言</h5> --> public string GetVersion() 戻り値 GetWindowContentRegionMax() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetWindowContentRegionMax() 戻り値 GetWindowContentRegionMin() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetWindowContentRegionMin() 戻り値 GetWindowContentRegionWidth() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetWindowContentRegionWidth() 戻り値 GetWindowDockID() <!-- <h5 class=\"decalaration\">宣言</h5> --> public int GetWindowDockID() 戻り値 GetWindowDpiScale() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetWindowDpiScale() 戻り値 GetWindowHeight() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetWindowHeight() 戻り値 GetWindowPos() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetWindowPos() 戻り値 GetWindowSize() <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F GetWindowSize() 戻り値 GetWindowWidth() <!-- <h5 class=\"decalaration\">宣言</h5> --> public float GetWindowWidth() 戻り値 Image(TextureBase, Vector2F, Vector2F, Vector2F, Color, Color) 画像表示ボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Image(TextureBase texture, Vector2F size, Vector2F uv0, Vector2F uv1, Color tint_col, Color border_col) パラメータ texture 表示するテクスチャ size サイズ uv0 テクスチャのUV値(0~1) uv1 テクスチャのUV値(0~1) tint_col border_col ImageButton(TextureBase, Vector2F, Vector2F, Vector2F, Int32, Color, Color) ボタンとして機能する画像表示ボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool ImageButton(TextureBase texture, Vector2F size, Vector2F uv0, Vector2F uv1, int frame_padding, Color bg_col, Color tint_col) パラメータ texture 表示するテクスチャ size サイズ uv0 テクスチャのUV値(0~1) uv1 テクスチャのUV値(0~1) frame_padding bg_col tint_col 戻り値 Indent(Single) 次の要素を右にずらします。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Indent(float indent_w) パラメータ indent_w InputFloat(String, ref Single, Single, Single, String, ToolInputTextFlags) 1つの小数が入力可能なボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool InputFloat(string label, ref float v, float step, float step_fast, string format, ToolInputTextFlags flags) パラメータ label 横に表示するラベルのテキスト v step step_fast format flags 戻り値 例外 型 Condition ArgumentNullException label , format のいずれかがnull InputFloat2(String, Span<Single>, String, ToolInputTextFlags) 2つの小数を入力するボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool InputFloat2(string label, Span<float> span, string format, ToolInputTextFlags flags) パラメータ label 横に表示されるラベルの文字列 span それぞれのボックスの値を格納するSpan format flags 戻り値 入力が決定されたらtrue，それ以外でfalse 例外 型 Condition ArgumentException span の大きさが2未満 InputFloat3(String, Span<Single>, String, ToolInputTextFlags) 3つの小数を入力するボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool InputFloat3(string label, Span<float> span, string format, ToolInputTextFlags flags) パラメータ label 横に表示されるラベルの文字列 span それぞれのボックスの値を格納するSpan format flags 戻り値 入力が決定されたらtrue，それ以外でfalse 例外 型 Condition ArgumentException span の大きさが3未満 InputFloat4(String, Span<Single>, String, ToolInputTextFlags) 4つの小数を入力するボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool InputFloat4(string label, Span<float> span, string format, ToolInputTextFlags flags) パラメータ label 横に表示されるラベルの文字列 span それぞれのボックスの値を格納するSpan format flags 戻り値 入力が決定されたらtrue，それ以外でfalse 例外 型 Condition ArgumentException span の大きさが4未満 InputInt(String, ref Int32, Int32, Int32, ToolInputTextFlags) 1つの整数が入力可能なボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool InputInt(string label, ref int v, int step, int step_fast, ToolInputTextFlags flags) パラメータ label 横に表示するラベルのテキスト v step step_fast flags 戻り値 例外 型 Condition ArgumentNullException label がnull InputInt2(String, Span<Int32>, ToolInputTextFlags) 2つの整数を入力するボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool InputInt2(string label, Span<int> span, ToolInputTextFlags flags) パラメータ label 横に表示されるラベルの文字列 span それぞれのボックスの値を格納するSpan flags 戻り値 入力が決定されたらtrue，それ以外でfalse 例外 型 Condition ArgumentException span の大きさが2未満 InputInt3(String, Span<Int32>, ToolInputTextFlags) 3つの整数を入力するボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool InputInt3(string label, Span<int> span, ToolInputTextFlags flags) パラメータ label 横に表示されるラベルの文字列 span それぞれのボックスの値を格納するSpan flags 戻り値 入力が決定されたらtrue，それ以外でfalse 例外 型 Condition ArgumentException span の大きさが3未満 InputInt4(String, Span<Int32>, ToolInputTextFlags) 4つの整数を入力するボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool InputInt4(string label, Span<int> span, ToolInputTextFlags flags) パラメータ label 横に表示されるラベルの文字列 span それぞれのボックスの値を格納するSpan flags 戻り値 入力が決定されたらtrue，それ以外でfalse 例外 型 Condition ArgumentException span の大きさが4未満 InputText(String, String, Int32, ToolInputTextFlags) テキストを入力するボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public string InputText(string label, string input, int max_length, ToolInputTextFlags flags) パラメータ label 横に表示するラベルのテキスト input 入力するテキスト max_length flags 適用する設定 戻り値 例外 型 Condition ArgumentNullException label , input のいずれかがnull InputTextMultiline(String, String, Int32, Vector2F, ToolInputTextFlags) 複数行のテキストが入力可能なボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public string InputTextMultiline(string label, string input, int max_length, Vector2F size, ToolInputTextFlags flags) パラメータ label 横に表示するラベルのテキスト input 入力するテキスト max_length size サイズ flags 適用する設定 戻り値 例外 型 Condition ArgumentNullException label , input のいずれかがnull InputTextWithHint(String, String, String, Int32, ToolInputTextFlags) ヒント付きのテキスト入力ボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public string InputTextWithHint(string label, string hint, string input, int max_length, ToolInputTextFlags flags) パラメータ label 横に表示するラベルのテキスト hint インプットされている文字列長が0の時に表示されるヒント input 入力するテキスト max_length flags 適用する設定 戻り値 例外 型 Condition ArgumentNullException label , hint , input のいずれかがnull InvisibleButton(String, Vector2F, ToolButtonFlags) 見えないボタンを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool InvisibleButton(string str_id, Vector2F size, ToolButtonFlags flags) パラメータ str_id size サイズ flags 戻り値 例外 型 Condition ArgumentNullException str_id がnull IsAnyItemActive() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsAnyItemActive() 戻り値 IsAnyItemFocused() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsAnyItemFocused() 戻り値 IsAnyItemHovered() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsAnyItemHovered() 戻り値 IsAnyMouseDown() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsAnyMouseDown() 戻り値 IsItemActivated() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsItemActivated() 戻り値 IsItemActive() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsItemActive() 戻り値 IsItemClicked(ToolMouseButton) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsItemClicked(ToolMouseButton mouse_button) パラメータ mouse_button 戻り値 IsItemDeactivated() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsItemDeactivated() 戻り値 IsItemDeactivatedAfterEdit() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsItemDeactivatedAfterEdit() 戻り値 IsItemEdited() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsItemEdited() 戻り値 IsItemFocused() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsItemFocused() 戻り値 IsItemHovered(ToolHoveredFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsItemHovered(ToolHoveredFlags flags) パラメータ flags 戻り値 IsItemToggledOpen() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsItemToggledOpen() 戻り値 IsItemVisible() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsItemVisible() 戻り値 IsKeyDown(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsKeyDown(int user_key_index) パラメータ user_key_index 戻り値 IsKeyPressed(Int32, Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsKeyPressed(int user_key_index, bool repeat) パラメータ user_key_index repeat 戻り値 IsKeyReleased(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsKeyReleased(int user_key_index) パラメータ user_key_index 戻り値 IsMouseClicked(ToolMouseButton, Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsMouseClicked(ToolMouseButton button, bool repeat) パラメータ button repeat 戻り値 IsMouseDoubleClicked(ToolMouseButton) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsMouseDoubleClicked(ToolMouseButton button) パラメータ button 戻り値 IsMouseDown(ToolMouseButton) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsMouseDown(ToolMouseButton button) パラメータ button 戻り値 IsMouseDragging(ToolMouseButton, Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsMouseDragging(ToolMouseButton button, float lock_threshold) パラメータ button lock_threshold 戻り値 IsMouseHoveringRect(Vector2F, Vector2F, Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsMouseHoveringRect(Vector2F r_min, Vector2F r_max, bool clip) パラメータ r_min r_max clip 戻り値 IsMouseReleased(ToolMouseButton) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsMouseReleased(ToolMouseButton button) パラメータ button 戻り値 IsPopupOpen(String, ToolPopupFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsPopupOpen(string str_id, ToolPopupFlags flags) パラメータ str_id flags 戻り値 IsRectVisible(Vector2F) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsRectVisible(Vector2F size) パラメータ size 戻り値 IsRectVisible(Vector2F, Vector2F) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsRectVisible(Vector2F rect_min, Vector2F rect_max) パラメータ rect_min rect_max 戻り値 IsWindowAppearing() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsWindowAppearing() 戻り値 IsWindowCollapsed() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsWindowCollapsed() 戻り値 IsWindowDocked() <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsWindowDocked() 戻り値 IsWindowFocused(ToolFocusedFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsWindowFocused(ToolFocusedFlags flags) パラメータ flags 戻り値 IsWindowHovered(ToolHoveredFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool IsWindowHovered(ToolHoveredFlags flags) パラメータ flags 戻り値 LabelText(String, String) 横にラベルの付いたテキストを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void LabelText(string label, string fmt) パラメータ label 表示するテキスト fmt 例外 型 Condition ArgumentNullException label , fmt のいずれかがnull ListBox(String, ref Int32, IEnumerable<String>, Int32) リストボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool ListBox(string label, ref int current, IEnumerable<string> items, int popupMaxHeightInItems) パラメータ label 横に表示されるラベルの文字列 current 選択されている要素のインデックス -1で何も選択していない事を表す items 表示する要素の文字列 popupMaxHeightInItems 表示される要素の数 戻り値 いずれかの要素がクリックされたらtrue，それ以外でfalse ListBox(String, ref Int32, String, Int32) リストボックスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool ListBox(string label, ref int current, string items_separated_by_tabs, int popup_max_height_in_items) パラメータ label 横に表示するラベルのテキスト current 選択中のアイテムのインデックス -1で選択無し items_separated_by_tabs popup_max_height_in_items 戻り値 例外 型 Condition ArgumentNullException label , items_separated_by_tabs のいずれかがnull ListBoxFooter() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void ListBoxFooter() ListBoxHeader(String, Vector2F) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool ListBoxHeader(string label, Vector2F size) パラメータ label size 戻り値 ListBoxHeader(String, Int32, Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool ListBoxHeader(string label, int items_count, int height_in_items) パラメータ label items_count height_in_items 戻り値 LoadIniSettingsFromDisk(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void LoadIniSettingsFromDisk(string ini_filename) パラメータ ini_filename LogButtons() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void LogButtons() LogFinish() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void LogFinish() LogText(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void LogText(string fmt) パラメータ fmt LogToClipboard(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void LogToClipboard(int auto_open_depth) パラメータ auto_open_depth LogToFile(Int32, String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void LogToFile(int auto_open_depth, string filename) パラメータ auto_open_depth filename LogToTTY(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void LogToTTY(int auto_open_depth) パラメータ auto_open_depth MenuItem(String, String, Boolean, Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool MenuItem(string label, string shortcut, bool selected, bool enabled) パラメータ label shortcut selected enabled 戻り値 MenuItem(String, String, ref Boolean, Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool MenuItem(string label, string shortcut, ref bool p_selected, bool enabled) パラメータ label shortcut p_selected enabled 戻り値 NewFrame() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void NewFrame() NewLine() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void NewLine() NextColumn() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void NextColumn() OpenDialog(String, String) 1つの開くファイルを選択するダイアログを開きます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public string OpenDialog(string filter, string defaultPath) パラメータ filter 読み込むファイルの拡張子のフィルタ defaultPath ファイルダイアログの初期位置のパス 戻り値 例外 型 Condition ArgumentNullException filter , defaultPath のいずれかがnull OpenDialogMultiple(String, String) 複数の開くファイルを選択するダイアログを開きます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public string OpenDialogMultiple(string filter, string defaultPath) パラメータ filter 読み込むファイルの拡張子のフィルタ defaultPath ファイルダイアログの初期位置のパス 戻り値 例外 型 Condition ArgumentNullException filter , defaultPath のいずれかがnull OpenPopup(String, ToolPopupFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void OpenPopup(string str_id, ToolPopupFlags popup_flags) パラメータ str_id popup_flags OpenPopupOnItemClick(String, ToolPopupFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void OpenPopupOnItemClick(string str_id, ToolPopupFlags popup_flags) パラメータ str_id popup_flags PickFolder(String) フォルダを選択するダイアログを開きます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public string PickFolder(string defaultPath) パラメータ defaultPath ファイルダイアログの初期位置のパス 戻り値 例外 型 Condition ArgumentNullException defaultPath がnull PlotHistogram(String, Span<Single>, Int32, Int32, String, Single, Single, Vector2F, Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PlotHistogram(string label, Span<float> values, int values_count, int valuesOffset = 0, string overlayText = null, float scaleMin = -3.40282347E+38F, float scaleMax = 3.40282347E+38F, Vector2F graphSize = default(Vector2F), int stride = 4) パラメータ label values values_count valuesOffset overlayText scaleMin scaleMax graphSize stride PlotLines(String, Span<Single>, Int32, Int32, String, Single, Single, Vector2F, Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PlotLines(string label, Span<float> values, int valuesCount, int valuesOffset = 0, string overlayText = null, float scaleMin = -3.40282347E+38F, float scaleMax = 3.40282347E+38F, Vector2F graphSize = default(Vector2F), int stride = 4) パラメータ label values valuesCount valuesOffset overlayText scaleMin scaleMax graphSize stride PopAllowKeyboardFocus() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PopAllowKeyboardFocus() PopButtonRepeat() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PopButtonRepeat() PopClipRect() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PopClipRect() PopFont() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PopFont() PopID() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PopID() PopItemWidth() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PopItemWidth() PopStyleColor(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PopStyleColor(int count) パラメータ count PopStyleVar(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PopStyleVar(int count) パラメータ count PopTextWrapPos() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PopTextWrapPos() ProgressBar(Single, Vector2F, String) プログレスバーを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void ProgressBar(float fraction, Vector2F size_arg, string overlay) パラメータ fraction 進行度(0.0~1.0) size_arg overlay 表示されるテキスト 例外 型 Condition ArgumentNullException overlay がnull PushAllowKeyboardFocus(Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PushAllowKeyboardFocus(bool allow_keyboard_focus) パラメータ allow_keyboard_focus PushButtonRepeat(Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PushButtonRepeat(bool repeat) パラメータ repeat PushClipRect(Vector2F, Vector2F, Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PushClipRect(Vector2F clip_rect_min, Vector2F clip_rect_max, bool intersect_with_current_clip_rect) パラメータ clip_rect_min clip_rect_max intersect_with_current_clip_rect PushID(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PushID(int int_id) パラメータ int_id PushID(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PushID(string str_id) パラメータ str_id PushID(String, String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PushID(string str_id_begin, string str_id_end) パラメータ str_id_begin str_id_end PushItemWidth(Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PushItemWidth(float item_width) パラメータ item_width PushStyleColor(ToolCol, Vector4F) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PushStyleColor(ToolCol idx, Vector4F col) パラメータ idx col PushStyleColor(ToolCol, Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PushStyleColor(ToolCol idx, int col) パラメータ idx col PushStyleVar(ToolStyleVar, Vector2F) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PushStyleVar(ToolStyleVar idx, Vector2F val) パラメータ idx val PushStyleVar(ToolStyleVar, Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PushStyleVar(ToolStyleVar idx, float val) パラメータ idx val PushTextWrapPos(Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void PushTextWrapPos(float wrap_local_pos_x) パラメータ wrap_local_pos_x RadioButton(String, Boolean) ラジオボタンを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool RadioButton(string label, bool active) パラメータ label 横に表示するラベルのテキスト active チェックが入っているかどうか 戻り値 例外 型 Condition ArgumentNullException label がnull RadioButton(String, ref Int32, Int32) ラジオボタンを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool RadioButton(string label, ref int v, int v_button) パラメータ label 横に表示するラベルのテキスト v v_button 戻り値 例外 型 Condition ArgumentNullException label がnull ResetMouseDragDelta(ToolMouseButton) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void ResetMouseDragDelta(ToolMouseButton button) パラメータ button SameLine(Single, Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SameLine(float offset_from_start_x, float spacing) パラメータ offset_from_start_x spacing SaveDialog(String, String) 保存するファイルを選択するダイアログを開きます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public string SaveDialog(string filter, string defaultPath) パラメータ filter 保存するファイルの拡張子のフィルタ defaultPath ファイルダイアログの初期位置のパス 戻り値 例外 型 Condition ArgumentNullException filter , defaultPath のいずれかがnull SaveIniSettingsToDisk(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SaveIniSettingsToDisk(string ini_filename) パラメータ ini_filename Selectable(String, Boolean, ToolSelectableFlags, Vector2F) 選択式のテキストを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Selectable(string label, bool selected, ToolSelectableFlags flags, Vector2F size) パラメータ label 表示するテキスト selected 選択されているかどうか flags 適用する設定 size 戻り値 例外 型 Condition ArgumentNullException label がnull Selectable(String, ref Boolean, ToolSelectableFlags, Vector2F) 選択式のテキストを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool Selectable(string label, ref bool p_selected, ToolSelectableFlags flags, Vector2F size) パラメータ label 表示するテキスト p_selected flags 適用する設定 size 戻り値 例外 型 Condition ArgumentNullException label がnull Separator() 仕切りを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Separator() SetClipboardText(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetClipboardText(string text) パラメータ text SetColorEditOptions(ToolColorEditFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetColorEditOptions(ToolColorEditFlags flags) パラメータ flags SetColumnOffset(Int32, Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetColumnOffset(int column_index, float offset_x) パラメータ column_index offset_x SetColumnWidth(Int32, Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetColumnWidth(int column_index, float width) パラメータ column_index width SetCursorPos(Vector2F) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetCursorPos(Vector2F local_pos) パラメータ local_pos SetCursorPosX(Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetCursorPosX(float local_x) パラメータ local_x SetCursorPosY(Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetCursorPosY(float local_y) パラメータ local_y SetCursorScreenPos(Vector2F) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetCursorScreenPos(Vector2F pos) パラメータ pos SetItemAllowOverlap() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetItemAllowOverlap() SetItemDefaultFocus() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetItemDefaultFocus() SetKeyboardFocusHere(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetKeyboardFocusHere(int offset) パラメータ offset SetMouseCursor(ToolMouseCursor) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetMouseCursor(ToolMouseCursor cursor_type) パラメータ cursor_type SetNextItemOpen(Boolean, ToolCond) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetNextItemOpen(bool is_open, ToolCond cond) パラメータ is_open cond SetNextItemWidth(Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetNextItemWidth(float item_width) パラメータ item_width SetNextWindowBgAlpha(Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetNextWindowBgAlpha(float alpha) パラメータ alpha SetNextWindowCollapsed(Boolean, ToolCond) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetNextWindowCollapsed(bool collapsed, ToolCond cond) パラメータ collapsed cond SetNextWindowContentSize(Vector2F) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetNextWindowContentSize(Vector2F size) パラメータ size SetNextWindowDockID(Int32, ToolCond) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetNextWindowDockID(int dock_id, ToolCond cond) パラメータ dock_id cond SetNextWindowFocus() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetNextWindowFocus() SetNextWindowPos(Vector2F, ToolCond, Vector2F) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetNextWindowPos(Vector2F pos, ToolCond cond, Vector2F pivot) パラメータ pos cond pivot SetNextWindowSize(Vector2F, ToolCond) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetNextWindowSize(Vector2F size, ToolCond cond) パラメータ size cond SetNextWindowViewport(Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetNextWindowViewport(int viewport_id) パラメータ viewport_id SetScrollFromPosX(Single, Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetScrollFromPosX(float local_x, float center_x_ratio) パラメータ local_x center_x_ratio SetScrollFromPosY(Single, Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetScrollFromPosY(float local_y, float center_y_ratio) パラメータ local_y center_y_ratio SetScrollHereX(Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetScrollHereX(float center_x_ratio) パラメータ center_x_ratio SetScrollHereY(Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetScrollHereY(float center_y_ratio) パラメータ center_y_ratio SetScrollX(Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetScrollX(float scroll_x) パラメータ scroll_x SetScrollY(Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetScrollY(float scroll_y) パラメータ scroll_y SetTabItemClosed(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetTabItemClosed(string tab_or_docked_window_label) パラメータ tab_or_docked_window_label SetTooltip(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetTooltip(string fmt) パラメータ fmt SetWindowCollapsed(Boolean, ToolCond) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetWindowCollapsed(bool collapsed, ToolCond cond) パラメータ collapsed cond SetWindowCollapsed(String, Boolean, ToolCond) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetWindowCollapsed(string name, bool collapsed, ToolCond cond) パラメータ name collapsed cond SetWindowFocus() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetWindowFocus() SetWindowFocus(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetWindowFocus(string name) パラメータ name SetWindowFontScale(Single) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetWindowFontScale(float scale) パラメータ scale SetWindowPos(Vector2F, ToolCond) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetWindowPos(Vector2F pos, ToolCond cond) パラメータ pos cond SetWindowPos(String, Vector2F, ToolCond) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetWindowPos(string name, Vector2F pos, ToolCond cond) パラメータ name pos cond SetWindowSize(Vector2F, ToolCond) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetWindowSize(Vector2F size, ToolCond cond) パラメータ size cond SetWindowSize(String, Vector2F, ToolCond) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void SetWindowSize(string name, Vector2F size, ToolCond cond) パラメータ name size cond ShowAboutWindow(ref Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void ShowAboutWindow(ref bool p_open) パラメータ p_open ShowAboutWindowNoCloseButton() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void ShowAboutWindowNoCloseButton() ShowDemoWindow(ref Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void ShowDemoWindow(ref bool p_open) パラメータ p_open ShowDemoWindowNoCloseButton() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void ShowDemoWindowNoCloseButton() ShowFontSelector(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void ShowFontSelector(string label) パラメータ label ShowMetricsWindow(ref Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void ShowMetricsWindow(ref bool p_open) パラメータ p_open ShowMetricsWindowNoCloseButton() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void ShowMetricsWindowNoCloseButton() ShowStyleSelector(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool ShowStyleSelector(string label) パラメータ label 戻り値 ShowUserGuide() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void ShowUserGuide() SliderAngle(String, ref Single, Single, Single, String, ToolSliderFlags) スライドで値が増減する，角度を扱うバーを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool SliderAngle(string label, ref float v_rad, float v_degrees_min, float v_degrees_max, string format, ToolSliderFlags flags) パラメータ label 横に表示するラベルのテキスト v_rad v_degrees_min v_degrees_max format flags 戻り値 例外 型 Condition ArgumentNullException label , format のいずれかがnull SliderFloat(String, ref Single, Single, Single, String, ToolSliderFlags) 1つのスライドで値が増減するバーを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool SliderFloat(string label, ref float v, float v_min, float v_max, string format, ToolSliderFlags flags) パラメータ label 横に表示するラベルのテキスト v v_min v_max format flags 戻り値 例外 型 Condition ArgumentNullException label , format のいずれかがnull SliderFloat2(String, Span<Single>, Single, Single, String, ToolSliderFlags) 2つのスライドで値を増減するバーを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool SliderFloat2(string label, Span<float> span, float vMin, float vMax, string format, ToolSliderFlags flags) パラメータ label 横に表示されるラベルの文字列 span 各バーの値を格納するSpan vMin 最小値 vMax 最大値 format flags 戻り値 入力が決定されたらtrue，それ以外でfalse 例外 型 Condition ArgumentException span の大きさが2未満 ArgumentNullException span がnull SliderFloat3(String, Span<Single>, Single, Single, String, ToolSliderFlags) 3つのスライドで値を増減するバーを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool SliderFloat3(string label, Span<float> span, float vMin, float vMax, string format, ToolSliderFlags flags) パラメータ label 横に表示されるラベルの文字列 span 各バーの値を格納するSpan vMin 最小値 vMax 最大値 format flags 戻り値 入力が決定されたらtrue，それ以外でfalse 例外 型 Condition ArgumentException span の大きさが3未満 ArgumentNullException span がnull SliderFloat4(String, Span<Single>, Single, Single, String, ToolSliderFlags) 4つのスライドで値を増減するバーを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool SliderFloat4(string label, Span<float> span, float vMin, float vMax, string format, ToolSliderFlags flags) パラメータ label 横に表示されるラベルの文字列 span 各バーの値を格納するSpan vMin 最小値 vMax 最大値 format flags 戻り値 入力が決定されたらtrue，それ以外でfalse 例外 型 Condition ArgumentException span の大きさが4未満 ArgumentNullException span がnull SliderInt(String, ref Int32, Int32, Int32, String, ToolSliderFlags) 1つのスライドで値が増減するバーを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool SliderInt(string label, ref int v, int v_min, int v_max, string format, ToolSliderFlags flags) パラメータ label 横に表示するラベルのテキスト v v_min v_max format flags 戻り値 例外 型 Condition ArgumentNullException label , format のいずれかがnull SliderInt2(String, Span<Int32>, Int32, Int32, String, ToolSliderFlags) 2つのスライドで値を増減するバーを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool SliderInt2(string label, Span<int> span, int vMin, int vMax, string format, ToolSliderFlags flags) パラメータ label 横に表示されるラベルの文字列 span 各バーの値を格納するSpan vMin 最小値 vMax 最大値 format flags 戻り値 入力が決定されたらtrue，それ以外でfalse 例外 型 Condition ArgumentException span の大きさが2未満 SliderInt3(String, Span<Int32>, Int32, Int32, String, ToolSliderFlags) 3つのスライドで値を増減するバーを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool SliderInt3(string label, Span<int> span, int vMin, int vMax, string format, ToolSliderFlags flags) パラメータ label 横に表示されるラベルの文字列 span 各バーの値を格納するSpan vMin 最小値 vMax 最大値 format flags 戻り値 入力が決定されたらtrue，それ以外でfalse 例外 型 Condition ArgumentException span の大きさが3未満 SliderInt4(String, Span<Int32>, Int32, Int32, String, ToolSliderFlags) 4つのスライドで値を増減するバーを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool SliderInt4(string label, Span<int> span, int vMin, int vMax, string format, ToolSliderFlags flags) パラメータ label 横に表示されるラベルの文字列 span 各バーの値を格納するSpan vMin 最小値 vMax 最大値 format flags 戻り値 入力が決定されたらtrue，それ以外でfalse 例外 型 Condition ArgumentException span の大きさが4未満 ArgumentNullException span がnull SmallButton(String) 小さなボタンを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool SmallButton(string label) パラメータ label 表示するテキスト 戻り値 例外 型 Condition ArgumentNullException label がnull Spacing() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Spacing() TabItemButton(String, ToolTabItemFlags) <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool TabItemButton(string label, ToolTabItemFlags flags) パラメータ label flags 戻り値 Text(String) テキストを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Text(string fmt) パラメータ fmt 例外 型 Condition ArgumentNullException fmt がnull TextColored(Vector4F, String) 色付きテキストを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void TextColored(Vector4F col, string fmt) パラメータ col fmt 例外 型 Condition ArgumentNullException fmt がnull TextDisabled(String) 灰字のテキストを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void TextDisabled(string fmt) パラメータ fmt 例外 型 Condition ArgumentNullException fmt がnull TextUnformatted(String, String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void TextUnformatted(string text, string text_end) パラメータ text text_end TextWrapped(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void TextWrapped(string fmt) パラメータ fmt TreeNode(String) ツリーのノードを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool TreeNode(string label) パラメータ label 表示するテキスト 戻り値 例外 型 Condition ArgumentNullException label がnull TreeNode(String, String) ツリーのノードを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool TreeNode(string str_id, string fmt) パラメータ str_id fmt 戻り値 例外 型 Condition ArgumentNullException str_id , fmt のいずれかがnull TreeNodeEx(String, ToolTreeNodeFlags) ツリーのノードを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool TreeNodeEx(string label, ToolTreeNodeFlags flags) パラメータ label 表示するテキスト flags 適用する設定 戻り値 例外 型 Condition ArgumentNullException label がnull TreeNodeEx(String, ToolTreeNodeFlags, String) ツリーのノードを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool TreeNodeEx(string str_id, ToolTreeNodeFlags flags, string fmt) パラメータ str_id flags 適用する設定 fmt 戻り値 例外 型 Condition ArgumentNullException str_id , fmt のいずれかがnull TreePop() TreeNodeのツリーを開きます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void TreePop() TreePush(String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void TreePush(string str_id) パラメータ str_id Unindent(Single) 右にずらすインデントを1つ分打消します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Unindent(float indent_w) パラメータ indent_w UpdatePlatformWindows() <!-- <h5 class=\"decalaration\">宣言</h5> --> public void UpdatePlatformWindows() Value(String, Boolean) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Value(string prefix, bool b) パラメータ prefix b Value(String, Int32) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Value(string prefix, int v) パラメータ prefix v Value(String, Single, String) <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Value(string prefix, float v, string float_format) パラメータ prefix v float_format VSliderFloat(String, Vector2F, ref Single, Single, Single, String, ToolSliderFlags) スライドで値が増減する縦バーを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool VSliderFloat(string label, Vector2F size, ref float v, float v_min, float v_max, string format, ToolSliderFlags flags) パラメータ label 横に表示するラベルのテキスト size サイズ v v_min v_max format flags 戻り値 例外 型 Condition ArgumentNullException label , format のいずれかがnull VSliderInt(String, Vector2F, ref Int32, Int32, Int32, String, ToolSliderFlags) スライドで値が増減する縦バーを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool VSliderInt(string label, Vector2F size, ref int v, int v_min, int v_max, string format, ToolSliderFlags flags) パラメータ label 横に表示するラベルのテキスト size サイズ v v_min v_max format flags 戻り値 例外 型 Condition ArgumentNullException label , format のいずれかがnull <!-- -->"
  },
  "References/Altseed2.ToolBackendFlags.html": {
    "href": "References/Altseed2.ToolBackendFlags.html",
    "title": "ToolBackendFlags 列挙体 | Altseed2",
    "keywords": "ToolBackendFlags 列挙体 メンバー HasGamepad HasMouseCursors HasMouseHoveredViewport HasSetMousePos None PlatformHasViewports RendererHasViewports RendererHasVtxOffset"
  },
  "References/Altseed2.ToolButtonFlags.html": {
    "href": "References/Altseed2.ToolButtonFlags.html",
    "title": "ToolButtonFlags 列挙体 | Altseed2",
    "keywords": "ToolButtonFlags 列挙体 メンバー MouseButtonLeft MouseButtonMiddle MouseButtonRight None"
  },
  "References/Altseed2.ToolCol.html": {
    "href": "References/Altseed2.ToolCol.html",
    "title": "ToolCol 列挙体 | Altseed2",
    "keywords": "ToolCol 列挙体 メンバー Border BorderShadow Button ButtonActive ButtonHovered CheckMark ChildBg COUNT DockingEmptyBg DockingPreview DragDropTarget FrameBg FrameBgActive FrameBgHovered Header HeaderActive HeaderHovered MenuBarBg ModalWindowDimBg NavHighlight NavWindowingDimBg NavWindowingHighlight PlotHistogram PlotHistogramHovered PlotLines PlotLinesHovered PopupBg ResizeGrip ResizeGripActive ResizeGripHovered ScrollbarBg ScrollbarGrab ScrollbarGrabActive ScrollbarGrabHovered Separator SeparatorActive SeparatorHovered SliderGrab SliderGrabActive Tab TabActive TabHovered TabUnfocused TabUnfocusedActive Text TextDisabled TextSelectedBg TitleBg TitleBgActive TitleBgCollapsed WindowBg"
  },
  "References/Altseed2.ToolColorEditFlags.html": {
    "href": "References/Altseed2.ToolColorEditFlags.html",
    "title": "ToolColorEditFlags 列挙体 | Altseed2",
    "keywords": "ToolColorEditFlags 列挙体 ツール機能における色の設定を表します メンバー AlphaBar AlphaPreview AlphaPreviewHalf DataTypeMask DisplayHex DisplayHSV DisplayMask DisplayRGB Float HDR InputHSV InputMask InputRGB NoAlpha NoBorder NoDragDrop NoInputs NoLabel None NoOptions NoPicker NoSidePreview NoSmallPreview NoTooltip OptionsDefault PickerHueBar PickerHueWheel PickerMask Uint8"
  },
  "References/Altseed2.ToolComboFlags.html": {
    "href": "References/Altseed2.ToolComboFlags.html",
    "title": "ToolComboFlags 列挙体 | Altseed2",
    "keywords": "ToolComboFlags 列挙体 ツール機能のBeginComboに適用する設定を表します。 メンバー HeightLarge HeightLargest HeightRegular HeightSmall NoArrowButton None NoPreview PopupAlignLeft"
  },
  "References/Altseed2.ToolCond.html": {
    "href": "References/Altseed2.ToolCond.html",
    "title": "ToolCond 列挙体 | Altseed2",
    "keywords": "ToolCond 列挙体 バイナリ演算子を使用して複数の値を結合しないでください メンバー Always Appearing FirstUseEver None Once"
  },
  "References/Altseed2.ToolConfigFlags.html": {
    "href": "References/Altseed2.ToolConfigFlags.html",
    "title": "ToolConfigFlags 列挙体 | Altseed2",
    "keywords": "ToolConfigFlags 列挙体 メンバー DockingEnable DpiEnableScaleFonts DpiEnableScaleViewports IsSRGB IsTouchScreen NavEnableGamepad NavEnableKeyboard NavEnableSetMousePos NavNoCaptureKeyboard NoMouse NoMouseCursorChange None ViewportsEnable"
  },
  "References/Altseed2.ToolDataType.html": {
    "href": "References/Altseed2.ToolDataType.html",
    "title": "ToolDataType 列挙体 | Altseed2",
    "keywords": "ToolDataType 列挙体 メンバー COUNT Double Float S16 S32 S64 S8 U16 U32 U64 U8"
  },
  "References/Altseed2.ToolDir.html": {
    "href": "References/Altseed2.ToolDir.html",
    "title": "ToolDir 列挙体 | Altseed2",
    "keywords": "ToolDir 列挙体 ツール機能で使用する方向 メンバー COUNT Down Left None Right Up"
  },
  "References/Altseed2.ToolDockNodeFlags.html": {
    "href": "References/Altseed2.ToolDockNodeFlags.html",
    "title": "ToolDockNodeFlags 列挙体 | Altseed2",
    "keywords": "ToolDockNodeFlags 列挙体 メンバー AutoHideTabBar KeepAliveOnly NoDockingInCentralNode None NoResize NoSplit PassthruCentralNode"
  },
  "References/Altseed2.ToolDragDropFlags.html": {
    "href": "References/Altseed2.ToolDragDropFlags.html",
    "title": "ToolDragDropFlags 列挙体 | Altseed2",
    "keywords": "ToolDragDropFlags 列挙体 メンバー AcceptBeforeDelivery AcceptNoDrawDefaultRect AcceptNoPreviewTooltip AcceptPeekOnly None SourceAllowNullID SourceAutoExpirePayload SourceExtern SourceNoDisableHover SourceNoHoldToOpenOthers SourceNoPreviewTooltip"
  },
  "References/Altseed2.ToolDrawCornerFlags.html": {
    "href": "References/Altseed2.ToolDrawCornerFlags.html",
    "title": "ToolDrawCornerFlags 列挙体 | Altseed2",
    "keywords": "ToolDrawCornerFlags 列挙体 メンバー All Bot BotLeft BotRight Left None Right Top TopLeft TopRight"
  },
  "References/Altseed2.ToolDrawListFlags.html": {
    "href": "References/Altseed2.ToolDrawListFlags.html",
    "title": "ToolDrawListFlags 列挙体 | Altseed2",
    "keywords": "ToolDrawListFlags 列挙体 メンバー AllowVtxOffset AntiAliasedFill AntiAliasedLines AntiAliasedLinesUseTex None"
  },
  "References/Altseed2.ToolFocusedFlags.html": {
    "href": "References/Altseed2.ToolFocusedFlags.html",
    "title": "ToolFocusedFlags 列挙体 | Altseed2",
    "keywords": "ToolFocusedFlags 列挙体 メンバー AnyWindow ChildWindows None RootAndChildWindows RootWindow"
  },
  "References/Altseed2.ToolFontAtlasFlags.html": {
    "href": "References/Altseed2.ToolFontAtlasFlags.html",
    "title": "ToolFontAtlasFlags 列挙体 | Altseed2",
    "keywords": "ToolFontAtlasFlags 列挙体 メンバー NoBakedLines NoMouseCursors None NoPowerOfTwoHeight"
  },
  "References/Altseed2.ToolGlyphRange.html": {
    "href": "References/Altseed2.ToolGlyphRange.html",
    "title": "ToolGlyphRange 列挙体 | Altseed2",
    "keywords": "ToolGlyphRange 列挙体 ツール機能を使ってフォントを読み込む際の範囲を指定します。ビット演算は行わないでください。 メンバー ChineseFull ChineseSimplifiedCommon Cyrillic Default Japanese Korean Thai"
  },
  "References/Altseed2.ToolHoveredFlags.html": {
    "href": "References/Altseed2.ToolHoveredFlags.html",
    "title": "ToolHoveredFlags 列挙体 | Altseed2",
    "keywords": "ToolHoveredFlags 列挙体 メンバー AllowWhenBlockedByActiveItem AllowWhenBlockedByPopup AllowWhenDisabled AllowWhenOverlapped AnyWindow ChildWindows None RectOnly RootAndChildWindows RootWindow"
  },
  "References/Altseed2.ToolInputTextFlags.html": {
    "href": "References/Altseed2.ToolInputTextFlags.html",
    "title": "ToolInputTextFlags 列挙体 | Altseed2",
    "keywords": "ToolInputTextFlags 列挙体 ツール機能においてインプットされるテキストの設定を表します メンバー AllowTabInput AlwaysInsertMode AutoSelectAll CallbackAlways CallbackCharFilter CallbackCompletion CallbackEdit CallbackHistory CallbackResize CharsDecimal CharsHexadecimal CharsNoBlank CharsScientific CharsUppercase CtrlEnterForNewLine EnterReturnsTrue Multiline NoHorizontalScroll NoMarkEdited None NoUndoRedo Password ReadOnly"
  },
  "References/Altseed2.ToolKey.html": {
    "href": "References/Altseed2.ToolKey.html",
    "title": "ToolKey 列挙体 | Altseed2",
    "keywords": "ToolKey 列挙体 メンバー A Backspace C COUNT Delete DownArrow End Enter Escape Home Insert KeyPadEnter LeftArrow PageDown PageUp RightArrow Space Tab UpArrow V X Y Z"
  },
  "References/Altseed2.ToolKeyModFlags.html": {
    "href": "References/Altseed2.ToolKeyModFlags.html",
    "title": "ToolKeyModFlags 列挙体 | Altseed2",
    "keywords": "ToolKeyModFlags 列挙体 メンバー Alt Ctrl None Shift Super"
  },
  "References/Altseed2.ToolMouseButton.html": {
    "href": "References/Altseed2.ToolMouseButton.html",
    "title": "ToolMouseButton 列挙体 | Altseed2",
    "keywords": "ToolMouseButton 列挙体 メンバー COUNT Left Middle Right"
  },
  "References/Altseed2.ToolMouseCursor.html": {
    "href": "References/Altseed2.ToolMouseCursor.html",
    "title": "ToolMouseCursor 列挙体 | Altseed2",
    "keywords": "ToolMouseCursor 列挙体 メンバー Arrow COUNT Hand None NotAllowed ResizeAll ResizeEW ResizeNESW ResizeNS ResizeNWSE TextInput"
  },
  "References/Altseed2.ToolNavInput.html": {
    "href": "References/Altseed2.ToolNavInput.html",
    "title": "ToolNavInput 列挙体 | Altseed2",
    "keywords": "ToolNavInput 列挙体 メンバー Activate Cancel COUNT DpadDown DpadLeft DpadRight DpadUp FocusNext FocusPrev Input LStickDown LStickLeft LStickRight LStickUp Menu TweakFast TweakSlow"
  },
  "References/Altseed2.ToolPopupFlags.html": {
    "href": "References/Altseed2.ToolPopupFlags.html",
    "title": "ToolPopupFlags 列挙体 | Altseed2",
    "keywords": "ToolPopupFlags 列挙体 メンバー AnyPopup AnyPopupId AnyPopupLevel MouseButtonLeft MouseButtonMiddle MouseButtonRight None NoOpenOverExistingPopup NoOpenOverItems"
  },
  "References/Altseed2.ToolSelectableFlags.html": {
    "href": "References/Altseed2.ToolSelectableFlags.html",
    "title": "ToolSelectableFlags 列挙体 | Altseed2",
    "keywords": "ToolSelectableFlags 列挙体 ツール機能のSelectableに適用する設定を表します。 メンバー AllowDoubleClick AllowItemOverlap Disabled DontClosePopups None SpanAllColumns"
  },
  "References/Altseed2.ToolSliderFlags.html": {
    "href": "References/Altseed2.ToolSliderFlags.html",
    "title": "ToolSliderFlags 列挙体 | Altseed2",
    "keywords": "ToolSliderFlags 列挙体 メンバー AlwaysClamp Logarithmic NoInput None NoRoundToFormat"
  },
  "References/Altseed2.ToolStyleVar.html": {
    "href": "References/Altseed2.ToolStyleVar.html",
    "title": "ToolStyleVar 列挙体 | Altseed2",
    "keywords": "ToolStyleVar 列挙体 メンバー Alpha ButtonTextAlign ChildBorderSize ChildRounding COUNT FrameBorderSize FramePadding FrameRounding GrabMinSize GrabRounding IndentSpacing ItemInnerSpacing ItemSpacing PopupBorderSize PopupRounding ScrollbarRounding ScrollbarSize SelectableTextAlign TabRounding WindowBorderSize WindowMinSize WindowPadding WindowRounding WindowTitleAlign"
  },
  "References/Altseed2.ToolTabBarFlags.html": {
    "href": "References/Altseed2.ToolTabBarFlags.html",
    "title": "ToolTabBarFlags 列挙体 | Altseed2",
    "keywords": "ToolTabBarFlags 列挙体 ツール機能のタブバーにおける設定を表します メンバー AutoSelectNewTabs FittingPolicyResizeDown FittingPolicyScroll NoCloseWithMiddleMouseButton None NoTabListScrollingButtons NoTooltip Reorderable TabListPopupButton"
  },
  "References/Altseed2.ToolTabItemFlags.html": {
    "href": "References/Altseed2.ToolTabItemFlags.html",
    "title": "ToolTabItemFlags 列挙体 | Altseed2",
    "keywords": "ToolTabItemFlags 列挙体 メンバー Leading NoCloseWithMiddleMouseButton None NoPushId NoReorder NoTooltip SetSelected Trailing UnsavedDocument"
  },
  "References/Altseed2.ToolTreeNodeFlags.html": {
    "href": "References/Altseed2.ToolTreeNodeFlags.html",
    "title": "ToolTreeNodeFlags 列挙体 | Altseed2",
    "keywords": "ToolTreeNodeFlags 列挙体 ツール機能のTreeNodeに適用する設定を表します。 メンバー AllowItemOverlap Bullet CollapsingHeader DefaultOpen Framed FramePadding Leaf NavLeftJumpsBackHere NoAutoOpenOnLog None NoTreePushOnOpen OpenOnArrow OpenOnDoubleClick Selected SpanAvailWidth SpanFullWidth"
  },
  "References/Altseed2.ToolUsage.html": {
    "href": "References/Altseed2.ToolUsage.html",
    "title": "ToolUsage 列挙体 | Altseed2",
    "keywords": "ToolUsage 列挙体 ツール機能の使用方法(描画位置) メンバー Main Overwrapped"
  },
  "References/Altseed2.ToolViewportFlags.html": {
    "href": "References/Altseed2.ToolViewportFlags.html",
    "title": "ToolViewportFlags 列挙体 | Altseed2",
    "keywords": "ToolViewportFlags 列挙体 メンバー CanHostOtherWindows Minimized NoAutoMerge NoDecoration NoFocusOnAppearing NoFocusOnClick NoInputs None NoRendererClear NoTaskBarIcon TopMost"
  },
  "References/Altseed2.ToolWindowFlags.html": {
    "href": "References/Altseed2.ToolWindowFlags.html",
    "title": "ToolWindowFlags 列挙体 | Altseed2",
    "keywords": "ToolWindowFlags 列挙体 ツール機能のウィンドウにおける設定を表します メンバー AlwaysAutoResize AlwaysHorizontalScrollbar AlwaysUseWindowPadding AlwaysVerticalScrollbar ChildMenu ChildWindow DockNodeHost HorizontalScrollbar MenuBar Modal NavFlattened NoBackground NoBringToFrontOnFocus NoCollapse NoDecoration NoDocking NoFocusOnAppearing NoInputs NoMouseInputs NoMove NoNav NoNavFocus NoNavInputs None NoResize NoSavedSettings NoScrollbar NoScrollWithMouse NoTitleBar Popup Tooltip UnsavedDocument"
  },
  "References/Altseed2.TransformerNode.html": {
    "href": "References/Altseed2.TransformerNode.html",
    "title": "TransformerNode クラス | Altseed2",
    "keywords": "TransformerNode クラス 親ノードの座標変形を制御するノード 継承関係 Object Altseed2.Registerable < Node > Node TransformerNode AnchorTransformerNode 継承したメンバー Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー プロパティ AbsoluteTransform 親ノードにおける先祖の変形および Altseed2.Rendered への変形を加味した最終的な変形行列を取得します。 InheritedTransform 親ノードにおける先祖の変形を加味した変形行列を設定します。 Transform 親ノードにおける変形行列を取得します。 TransformerNodeInfo 情報表示 プロパティ AbsoluteTransform 親ノードにおける先祖の変形および Altseed2.Rendered への変形を加味した最終的な変形行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public virtual Matrix44F AbsoluteTransform { get; set; } InheritedTransform 親ノードにおける先祖の変形を加味した変形行列を設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public virtual Matrix44F InheritedTransform { get; set; } Transform 親ノードにおける変形行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public virtual Matrix44F Transform { get; } TransformerNodeInfo 情報表示 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected TransformerNodeInfo TransformerNodeInfo { get; set; } <!-- -->"
  },
  "References/Altseed2.TransformerNodeInfo.html": {
    "href": "References/Altseed2.TransformerNodeInfo.html",
    "title": "TransformerNodeInfo クラス | Altseed2",
    "keywords": "TransformerNodeInfo クラス 継承関係 Object TransformerNodeInfo AnchorTransformerNodeInfo メンバー コンストラクタ TransformerNodeInfo(TransformerNode) メソッド Draw() Update() コンストラクタ TransformerNodeInfo(TransformerNode) <!-- <h5 class=\"decalaration\">宣言</h5> --> public TransformerNodeInfo(TransformerNode transformerNode) パラメータ transformerNode メソッド Draw() <!-- <h5 class=\"decalaration\">宣言</h5> --> protected virtual void Draw() Update() <!-- <h5 class=\"decalaration\">宣言</h5> --> protected virtual void Update() <!-- -->"
  },
  "References/Altseed2.TransformNode.html": {
    "href": "References/Altseed2.TransformNode.html",
    "title": "TransformNode クラス | Altseed2",
    "keywords": "TransformNode クラス 変形行列を備えたノードのクラス 継承関係 Object Altseed2.Registerable < Node > Node TransformNode CameraNode ColliderNode PolygonNode ShapeNode SpriteNode TextNode 継承したメンバー Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ TransformNode() TransformNode の新しいインスタンスを生成します。 プロパティ AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 Angle 角度(度数法)を取得または設定します。 CenterPosition 中心となる座標をピクセル単位で取得または設定します。 ContentSize コンテンツのサイズを取得します。 HorizontalFlip 左右を反転するかどうかを取得または設定します。 InheritedTransform 先祖の変形を加味した変形行列を取得します。 Position 座標を取得または設定します。 Scale 拡大率を取得または設定します。 VerticalFlip 上下を反転するかどうかを取得または設定します。 VisibleTransformNodeInfo メソッド DrawTransformInfo() コンストラクタ TransformNode() TransformNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public TransformNode() プロパティ AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Matrix44F AbsoluteTransform { get; set; } Angle 角度(度数法)を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Angle { get; set; } CenterPosition 中心となる座標をピクセル単位で取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F CenterPosition { get; set; } ContentSize コンテンツのサイズを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public virtual Vector2F ContentSize { get; } HorizontalFlip 左右を反転するかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool HorizontalFlip { get; set; } InheritedTransform 先祖の変形を加味した変形行列を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public virtual Matrix44F InheritedTransform { get; } Position 座標を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Position { get; set; } Scale 拡大率を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Scale { get; set; } VerticalFlip 上下を反転するかどうかを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool VerticalFlip { get; set; } VisibleTransformNodeInfo <!-- <h5 class=\"decalaration\">宣言</h5> --> public bool VisibleTransformNodeInfo { get; set; } メソッド DrawTransformInfo() <!-- <h5 class=\"decalaration\">宣言</h5> --> void DrawTransformInfo() <!-- -->"
  },
  "References/Altseed2.TransitionNode.html": {
    "href": "References/Altseed2.TransitionNode.html",
    "title": "TransitionNode クラス | Altseed2",
    "keywords": "TransitionNode クラス 画面遷移を行うノードのクラス 継承関係 Object Altseed2.Registerable < Node > Node TransitionNode RuledTransitionNode 継承したメンバー Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.FlushQueue() 予約されている追加・削除を直ちに実行します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ TransitionNode() TransitionNode の新しいインスタンスを作成します。 プロパティ NextNode トランジションによって追加されるノード PrevNode トランジションによって取り除かれるノード メソッド GetCoroutine() トランジションを行うコルーチン OnClosing(Single) ノードが入れ替わる前の処理を記述します。 OnNodeSwapped() ノードが入れ替わった直後の処理を記述します。 OnNodeSwapping() ノードが入れ替わる直前の処理を記述します。 OnOpening(Single) ノードが入れ替わった後の処理を記述します。 OnTransitionBegin() トランジションが開始する瞬間の処理を記述します。 OnTransitionEnd() トランジションが終了する直前の処理を記述します。 StartTransition(Node, Node) トランジションを開始します。 コンストラクタ TransitionNode() TransitionNode の新しいインスタンスを作成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public TransitionNode() プロパティ NextNode トランジションによって追加されるノード <!-- <h5 class=\"decalaration\">宣言</h5> --> public Node NextNode { get; } PrevNode トランジションによって取り除かれるノード <!-- <h5 class=\"decalaration\">宣言</h5> --> public Node PrevNode { get; } メソッド GetCoroutine() トランジションを行うコルーチン <!-- <h5 class=\"decalaration\">宣言</h5> --> IEnumerator<int> GetCoroutine() 戻り値 OnClosing(Single) ノードが入れ替わる前の処理を記述します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected virtual void OnClosing(float progress) パラメータ progress 0.0f ~ 1.0fの範囲で、ノードが入れ替わるまでの進行度を受け取ります。 OnNodeSwapped() ノードが入れ替わった直後の処理を記述します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected virtual void OnNodeSwapped() OnNodeSwapping() ノードが入れ替わる直前の処理を記述します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected virtual void OnNodeSwapping() OnOpening(Single) ノードが入れ替わった後の処理を記述します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected virtual void OnOpening(float progress) パラメータ progress 0.0f ~ 1.0fの範囲で、ノードが入れ替わった後の進行度を受け取ります。 OnTransitionBegin() トランジションが開始する瞬間の処理を記述します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected virtual void OnTransitionBegin() OnTransitionEnd() トランジションが終了する直前の処理を記述します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> protected virtual void OnTransitionEnd() StartTransition(Node, Node) トランジションを開始します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void StartTransition(Node prevNode, Node nextNode) パラメータ prevNode nextNode <!-- -->"
  },
  "References/Altseed2.TriangleNode.html": {
    "href": "References/Altseed2.TriangleNode.html",
    "title": "TriangleNode クラス | Altseed2",
    "keywords": "TriangleNode クラス 三角形を描画するノードのクラス 継承関係 Object Altseed2.Registerable < Node > Node TransformNode ShapeNode TriangleNode 継承したメンバー ShapeNode.CameraGroup カメラグループを取得または設定します。 ShapeNode.ZOrder 描画時の重ね順を取得または設定します。 ShapeNode.IsDrawn このノードを描画するかどうかを取得または設定します。 ShapeNode.IsDrawnActually 先祖の IsDrawn を考慮して、このノードを描画するかどうかを取得します。 ShapeNode.FlushQueue() 予約されている追加・削除を直ちに実行します。 ShapeNode.AlphaBlend ブレンドモードを取得または設定します。 ShapeNode.Src Texture を切り出す範囲を取得または設定します。 ShapeNode.Texture 描画するテクスチャを取得または設定します。 ShapeNode.Material 描画に適用するマテリアルを取得または設定します。 ShapeNode.InheritedTransform 先祖の変形を加味した変形行列を取得します。 ShapeNode.ContentSize コンテンツのサイズを取得します。 TransformNode.AbsoluteTransform 先祖の変形および CenterPosition を加味した最終的な変形行列を取得します。 TransformNode.Angle 角度(度数法)を取得または設定します。 TransformNode.Position 座標を取得または設定します。 TransformNode.CenterPosition 中心となる座標をピクセル単位で取得または設定します。 TransformNode.Scale 拡大率を取得または設定します。 TransformNode.HorizontalFlip 左右を反転するかどうかを取得または設定します。 TransformNode.VerticalFlip 上下を反転するかどうかを取得または設定します。 TransformNode.VisibleTransformNodeInfo TransformNode.DrawTransformInfo() Node.Parent 親ノードを取得または設定します。 Node.Status このノードの登録状況を取得または設定します。 Node.Children 子要素のコレクションを取得します。 Node.AddChildNode(Node) 子要素を追加します。 Node.RemoveChildNode(Node) 子要素を削除します。 Node.OnAdded() エンジンに追加された時に実行します。 Node.OnRemoved() エンジンから削除された時に実行します。 Node.OnUpdate() 自身が更新された時に実行します。 Node.IsRegistered エンジンに登録され、ノードツリーを辿って Altseed2.RootNode にたどり着けるかどうかを取得します。 Node.IsUpdated この Node が更新されるかどうかを取得または設定します。 Node.IsUpdatedActually 先祖の IsUpdated を考慮して、このノードが更新されるかどうかを取得します。 Node.PropagateIsUpdatedActually(Node, Boolean) 子孫ノード Node に対して IsUpdatedActually を伝播させます。 Node.EnumerateAncestors() 先祖ノードを列挙します。 Node.EnumerateDescendants() 子孫ノードを列挙します。 メンバー コンストラクタ TriangleNode() TriangleNode の新しいインスタンスを生成します。 プロパティ Color 色を取得または設定します。 Point1 頂点1を取得または設定します。 Point2 頂点2を取得または設定します。 Point3 頂点3を取得または設定します。 コンストラクタ TriangleNode() TriangleNode の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public TriangleNode() プロパティ Color 色を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Color Color { get; set; } Point1 頂点1を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Point1 { get; set; } Point2 頂点2を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Point2 { get; set; } Point3 頂点3を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Point3 { get; set; } <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"Altseed2.ICullableDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> <div> <xref uid=\"Altseed2.IDrawn\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Vector2F.html": {
    "href": "References/Altseed2.Vector2F.html",
    "title": "Vector2F 構造体 | Altseed2",
    "keywords": "Vector2F 構造体 Single 型の二次元ベクトルを表す構造体 メンバー コンストラクタ Vector2F(Single, Single) Vector2F の新しいインスタンスを生成します。 フィールド One X X座標 Y Y座標 Zero プロパティ Degree ベクトルの度数法の角度を取得または設定します。 Length ベクトルの長さを取得または設定します。 Normal このベクトルの単位ベクトル取得します。 Radian ベクトルの弧度法の角度を取得または設定します。 SquaredLength ベクトルの長さの2乗取得します。 メソッド Cross(Vector2F, Vector2F) 2つのベクトルの外積を求めます。 Distance(Vector2F, Vector2F) 2つのベクトル間の距離を求めます。 Dot(Vector2F, Vector2F) 2つのベクトルの内積を求めます。 Normalize() 単位ベクトル化します。 To2I() Vector2I に型変換します。 ToString() このベクトルを表す文字列取得します。 コンストラクタ Vector2F(Single, Single) Vector2F の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F(float x, float y) パラメータ x X座標 y Y座標 フィールド One <!-- <h5 class=\"decalaration\">宣言</h5> --> static readonly Vector2F One X X座標 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float X Y Y座標 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Y Zero <!-- <h5 class=\"decalaration\">宣言</h5> --> static readonly Vector2F Zero プロパティ Degree ベクトルの度数法の角度を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Degree { get; set; } Length ベクトルの長さを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Length { get; set; } Normal このベクトルの単位ベクトル取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F Normal { get; } Radian ベクトルの弧度法の角度を取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Radian { get; set; } SquaredLength ベクトルの長さの2乗取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float SquaredLength { get; } メソッド Cross(Vector2F, Vector2F) 2つのベクトルの外積を求めます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float Cross(Vector2F left, Vector2F right) パラメータ left 使用するベクトル1 right 使用するベクトル2 戻り値 left と right の外積 Distance(Vector2F, Vector2F) 2つのベクトル間の距離を求めます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float Distance(Vector2F v1, Vector2F v2) パラメータ v1 距離を求めるベクトル1 v2 距離を求めるベクトル2 戻り値 v1 と v2 の間の距離 Dot(Vector2F, Vector2F) 2つのベクトルの内積を求めます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float Dot(Vector2F v1, Vector2F v2) パラメータ v1 使用するベクトル1 v2 使用するベクトル2 戻り値 v1 と v2 の内積 Normalize() 単位ベクトル化します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Normalize() To2I() Vector2I に型変換します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2I To2I() 戻り値 このインスタンスと等価な Vector2I の新しいインスタンス ToString() このベクトルを表す文字列取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override string ToString() 戻り値 このベクトルを表す文字列取得します。 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.IEquatable`1\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Vector2I.html": {
    "href": "References/Altseed2.Vector2I.html",
    "title": "Vector2I 構造体 | Altseed2",
    "keywords": "Vector2I 構造体 Int32 型の二次元ベクトルを表す構造体 メンバー コンストラクタ Vector2I(Int32, Int32) Vector2I の新しいインスタンスを生成します。 フィールド X X座標 Y Y座標 メソッド Cross(Vector2I, Vector2I) 2つのベクトルの外積を求めます。 Distance(Vector2I, Vector2I) 2点間の距離取得します。 Dot(Vector2I, Vector2I) 2つのベクトルの内積を求めます。 To2F() Vector2F に型変換します。 ToString() このベクトルを表す文字列取得します。 コンストラクタ Vector2I(Int32, Int32) Vector2I の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2I(int x, int y) パラメータ x X座標 y Y座標 フィールド X X座標 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int X Y Y座標 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int Y メソッド Cross(Vector2I, Vector2I) 2つのベクトルの外積を求めます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static int Cross(Vector2I left, Vector2I right) パラメータ left 使用するベクトル1 right 使用するベクトル2 戻り値 left と right の外積 Distance(Vector2I, Vector2I) 2点間の距離取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float Distance(Vector2I v1, Vector2I v2) パラメータ v1 v1ベクトル v2 v2ベクトル 戻り値 v1とv2の距離 Dot(Vector2I, Vector2I) 2つのベクトルの内積を求めます。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static int Dot(Vector2I v1, Vector2I v2) パラメータ v1 使用するベクトル1 v2 使用するベクトル2 戻り値 v1 と v2 の内積 To2F() Vector2F に型変換します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F To2F() 戻り値 このインスタンスと等価な Vector2F の新しいインスタンス ToString() このベクトルを表す文字列取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override string ToString() 戻り値 このベクトルを表す文字列取得します。 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.IEquatable`1\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Vector3F.html": {
    "href": "References/Altseed2.Vector3F.html",
    "title": "Vector3F 構造体 | Altseed2",
    "keywords": "Vector3F 構造体 3次元ベクトル メンバー コンストラクタ Vector3F(Single, Single, Single) Vector3F の新しいインスタンスを生成します。 フィールド X X成分 Y Y成分 Z Z成分 プロパティ Length ベクトルの長さを取得または設定します。 Normal このベクトルの単位ベクトルを取得します。 SquaredLength ベクトルの長さの二乗を取得します。 メソッド Cross(Vector3F, Vector3F) 外積を取得します。 Distance(Vector3F, Vector3F) 2点間の距離を取得します。 Dot(Vector3F, Vector3F) 内積を取得します。 Normalize() このベクトルを単位ベクトル化します。 To3I() Vector3I に型変換します。 ToString() このベクトルを表す文字列取得します。 コンストラクタ Vector3F(Single, Single, Single) Vector3F の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector3F(float x, float y, float z) パラメータ x X成分 y Y成分 z Z成分 フィールド X X成分 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float X Y Y成分 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Y Z Z成分 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Z プロパティ Length ベクトルの長さを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Length { get; set; } Normal このベクトルの単位ベクトルを取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector3F Normal { get; } SquaredLength ベクトルの長さの二乗を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float SquaredLength { get; } メソッド Cross(Vector3F, Vector3F) 外積を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Vector3F Cross(Vector3F v1, Vector3F v2) パラメータ v1 v1ベクトル v2 v2ベクトル 戻り値 外積v1×v2 Remarks 右手の親指がv1、人差し指がv2としたとき、中指の方向を返します。。 Distance(Vector3F, Vector3F) 2点間の距離を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float Distance(Vector3F v1, Vector3F v2) パラメータ v1 v1ベクトル v2 v2ベクトル 戻り値 v1とv2の距離 Dot(Vector3F, Vector3F) 内積を取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float Dot(Vector3F v1, Vector3F v2) パラメータ v1 v1ベクトル v2 v2ベクトル 戻り値 内積v1・v2 Normalize() このベクトルを単位ベクトル化します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Normalize() To3I() Vector3I に型変換します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector3I To3I() 戻り値 このインスタンスと等価な Vector3I の新しいインスタンス ToString() このベクトルを表す文字列取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override string ToString() 戻り値 このベクトルを表す文字列取得します。 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.IEquatable`1\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Vector3I.html": {
    "href": "References/Altseed2.Vector3I.html",
    "title": "Vector3I 構造体 | Altseed2",
    "keywords": "Vector3I 構造体 3次元ベクトル メンバー コンストラクタ Vector3I(Int32, Int32, Int32) Vector3I の新しいインスタンスを生成します。 フィールド X X成分 Y Y成分 Z Z成分 メソッド Cross(Vector3I, Vector3I) 外積取得します。 Distance(Vector3I, Vector3I) 2点間の距離取得します。 Dot(Vector3I, Vector3I) 内積取得します。 To3F() Vector3F に型変換します。 ToString() このベクトルを表す文字列取得します。 コンストラクタ Vector3I(Int32, Int32, Int32) Vector3I の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector3I(int x, int y, int z) パラメータ x X成分 y Y成分 z Z成分 フィールド X X成分 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int X Y Y成分 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int Y Z Z成分 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int Z メソッド Cross(Vector3I, Vector3I) 外積取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static Vector3I Cross(Vector3I v1, Vector3I v2) パラメータ v1 v1ベクトル v2 v2ベクトル 戻り値 外積v1×v2 Remarks 右手の親指がv1、人差し指がv2としたとき、中指の方向を返します。。 Distance(Vector3I, Vector3I) 2点間の距離取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float Distance(Vector3I v1, Vector3I v2) パラメータ v1 v1ベクトル v2 v2ベクトル 戻り値 v1とv2の距離 Dot(Vector3I, Vector3I) 内積取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static int Dot(Vector3I v1, Vector3I v2) パラメータ v1 v1ベクトル v2 v2ベクトル 戻り値 内積v1・v2 To3F() Vector3F に型変換します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector3F To3F() 戻り値 このインスタンスと等価な Vector3F の新しいインスタンス ToString() このベクトルを表す文字列取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override string ToString() 戻り値 このベクトルを表す文字列取得します。 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.IEquatable`1\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Vector4F.html": {
    "href": "References/Altseed2.Vector4F.html",
    "title": "Vector4F 構造体 | Altseed2",
    "keywords": "Vector4F 構造体 4次元ベクトル メンバー コンストラクタ Vector4F(Single, Single, Single, Single) Vector4F の新しいインスタンスを生成します。 フィールド W W成分 X X成分 Y Y成分 Z Z成分 プロパティ Length ベクトルの長さを取得または設定します。 Normal このベクトルの単位ベクトル取得します。 SquaredLength ベクトルの長さの二乗取得します。 メソッド Distance(Vector4F, Vector4F) 2点間の距離取得します。 Dot(Vector4F, Vector4F) 外積取得します。 Normalize() このベクトルを単位ベクトル化します。 To4I() Vector4I に型変換する ToString() このベクトルを表す文字列取得します。 コンストラクタ Vector4F(Single, Single, Single, Single) Vector4F の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector4F(float x, float y, float z, float w) パラメータ x X座標 y Y座標 z Z座標 w W座標 フィールド W W成分 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float W X X成分 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float X Y Y成分 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Y Z Z成分 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Z プロパティ Length ベクトルの長さを取得または設定します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float Length { get; set; } Normal このベクトルの単位ベクトル取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector4F Normal { get; } SquaredLength ベクトルの長さの二乗取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public float SquaredLength { get; } メソッド Distance(Vector4F, Vector4F) 2点間の距離取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float Distance(Vector4F v1, Vector4F v2) パラメータ v1 v1ベクトル v2 v2ベクトル 戻り値 v1とv2の距離 Dot(Vector4F, Vector4F) 外積取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float Dot(Vector4F v1, Vector4F v2) パラメータ v1 v1ベクトル v2 v2ベクトル 戻り値 外積v1×v2 Normalize() このベクトルを単位ベクトル化します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public void Normalize() To4I() Vector4I に型変換する <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector4I To4I() 戻り値 このインスタンスと等価な Vector4I の新しいインスタンス ToString() このベクトルを表す文字列取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override string ToString() 戻り値 このベクトルを表す文字列取得します。 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.IEquatable`1\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Vector4I.html": {
    "href": "References/Altseed2.Vector4I.html",
    "title": "Vector4I 構造体 | Altseed2",
    "keywords": "Vector4I 構造体 4次元ベクトル メンバー コンストラクタ Vector4I(Int32, Int32, Int32, Int32) Vector4I の新しいインスタンスを生成します。 フィールド W W成分 X X成分 Y Y成分 Z Z成分 メソッド Distance(Vector4I, Vector4I) 2点間の距離取得します。 Dot(Vector4I, Vector4I) 外積取得します。 To4F() Vector4F に型変換する ToString() このベクトルを表す文字列取得します。 コンストラクタ Vector4I(Int32, Int32, Int32, Int32) Vector4I の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector4I(int x, int y, int z, int w) パラメータ x X座標 y Y座標 z Z座標 w W座標 フィールド W W成分 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int W X X成分 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int X Y Y成分 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int Y Z Z成分 <!-- <h5 class=\"decalaration\">宣言</h5> --> public int Z メソッド Distance(Vector4I, Vector4I) 2点間の距離取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static float Distance(Vector4I v1, Vector4I v2) パラメータ v1 v1ベクトル v2 v2ベクトル 戻り値 v1とv2の距離 Dot(Vector4I, Vector4I) 外積取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public static int Dot(Vector4I v1, Vector4I v2) パラメータ v1 v1ベクトル v2 v2ベクトル 戻り値 外積v1×v2 To4F() Vector4F に型変換する <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector4F To4F() 戻り値 このインスタンスと等価な Vector4F の新しいインスタンス ToString() このベクトルを表す文字列取得します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public override string ToString() 戻り値 このベクトルを表す文字列取得します。 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.IEquatable`1\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.Vertex.html": {
    "href": "References/Altseed2.Vertex.html",
    "title": "Vertex 構造体 | Altseed2",
    "keywords": "Vertex 構造体 頂点の情報を格納する構造体 メンバー コンストラクタ Vertex(Vector3F, Color, Vector2F, Vector2F) Vertex の新しいインスタンスを生成します。 フィールド Color 色 Position 座標 UV1 UV値1 UV2 UV値2 コンストラクタ Vertex(Vector3F, Color, Vector2F, Vector2F) Vertex の新しいインスタンスを生成します。 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vertex(Vector3F position, Color color, Vector2F uv1, Vector2F uv2) パラメータ position 座標 color 色 uv1 UV1 uv2 UV2 フィールド Color 色 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Color Color Position 座標 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector3F Position UV1 UV値1 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F UV1 UV2 UV値2 <!-- <h5 class=\"decalaration\">宣言</h5> --> public Vector2F UV2 <!-- <h3 id=\"implements\">Implements</h3> <div> <xref uid=\"System.IEquatable`1\" altProperty=\"fullName\" displayProperty=\"nameWithType\"/> </div> -->"
  },
  "References/Altseed2.VerticalAlignment.html": {
    "href": "References/Altseed2.VerticalAlignment.html",
    "title": "VerticalAlignment 列挙体 | Altseed2",
    "keywords": "VerticalAlignment 列挙体 垂直方向の配置 メンバー Bottom 下揃え Center 中央揃え Top 上揃え"
  },
  "References/Altseed2.WritingDirection.html": {
    "href": "References/Altseed2.WritingDirection.html",
    "title": "WritingDirection 列挙体 | Altseed2",
    "keywords": "WritingDirection 列挙体 テキストの描画方向 メンバー Horizontal Vertical"
  },
  "Tutorials/Chap0/index.html": {
    "href": "Tutorials/Chap0/index.html",
    "title": "0章 : Altseed2 を初めよう | Altseed2",
    "keywords": "0章 : Altseed2 を初めよう チュートリアルを始める前に この章の目標は、C#とAltseed2を使って開発を進める前に、必要なツールを導入しておくことです。 ゲームに限らず、どんなアプリケーションを開発するにしても、そのための環境が必要になります。 ここでいう環境とは、アプリケーションを開発するために必要なツールやシステムの組み合わせのことを指します。 すなわち、ゲームを開発する準備段階として、開発に必要なツールを揃えておかなければなりません。 それでは早速必要なツールを導入してみましょう。 Visual Studioのインストール WindowsやMacで C#を使用してアプリケーションを開発するには、Visual Studioというツールが必要になります。 Visual Studioは、プログラムのソースコードから実行可能なアプリケーションを生成するツールです。 Visual Studioのインストーラは Visual Studioのウェブページ からダウンロードすることができます。 Windows の場合 まず「Visual Studio2019」の「コミュニティ」を選択し、インストーラをダウンロードしてください。 ダウンロードされたインストーラをクリックし、起動すると、次のようなウィンドウが出てきます。 「続行」をクリックしてください。 次に、Visual Studioをインストールするに際し、併せてインストールするものを選んでいきます。 Altseed2 を使った開発には「.NET Core」が必要です。 「.NET デスクトップ開発」と「.NET Core クロスプラットフォームの開発」にチェックをつけておきましょう。 インストールしたいものが決まったら「インストール」をクリックしましょう。 インストールが始まると、次のような画面が表示されます。 Visual Studioなるツールは、容量がとても大きいため、インストールに多くの時間を要します。 じっくり待ちましょう。 インストールが完了し、Visual Studioが起動すると、この画面が表示されるはずです。 ここまでできたら、晴れて Visual Studioの準備は完了となります。 なお、Visual Studioからサインインを求められることがあります。 ライセンス認証に必須ですが、今すぐ必要ということはないため、あとでやっておきましょう。 Mac の場合 まず「Visual Studio for Mac」を選択し、インストーラをダウンロードしてください。 ダウンロードされたインストーラをクリックし、起動すると、次のようなウィンドウが出てきます。 「Install Visual Studio for Mac」をクリックし、新しくウィンドウを表示させます。 暫く待って、このような画面が出たら「続行」をクリックします。 次に、Visual Studioをインストールするに際し、併せてインストールするものを選んでいきます。 Altseed2 を使った開発には「.NET Core」が必要です。 「.NET Core」にチェックをつけておきましょう。 インストールしたいものが決まったら「インストール」をクリックしましょう。 インストールが始まると、次のような画面が表示されます。 Visual Studioなるツールは、容量がとても大きいため、インストールに多くの時間を要します。 じっくり待ちましょう。 インストール中にパスワードの入力が求められることがあります。 その場合は、Mac にログインするときのパスワードを入力しましょう。 インストールが完了し、Visual Studioが起動すると、この画面が表示されるはずです。 ここまでできたら、晴れて Visual Studioの準備は完了となります。 なお、Visual Studioからサインインを求められることがあります。 ライセンス認証に必須ですが、今すぐ必要ということはないため、あとでやっておきましょう。 また、キーボードの配置を選択する画面が出てきますが、デフォルトのままで問題ないでしょう。 プロジェクトの作成 インストールが終わったら、プロジェクトを作成します。 プロジェクトとは、実行可能なアプリケーションを作るために必要なファイルをまとめたものを指します。 基本的に、1 つのアプリケーションを作成するときに 1 つのプロジェクトが必要になります。 Windowsの場合 まず、Visual Studioを起動したら「新しいプロジェクトの作成」をクリックします。 次に、プロジェクトのテンプレートを決めます。 今回は、「コンソールアプリ (.NET Core)」を選択します。 ただし、今回は C#を使用するため、アイコンに「C#」と書かれていることを確認してください。 選択したら「次へ」をクリックします。 次に、プロジェクトの名前と、プロジェクトを作成する場所の設定を行います。 プロジェクトの名前は「Tutorial」などに設定しておくと良いでしょう。 それ以外の設定は変更しなくても問題ありません。 ただし、プロジェクトを作成した場所は、どこかに記録するなどして覚えておきましょう。 「作成」を押してしばらく待つと、この画面が出てきます。 これが、Visual Studioのエディタ画面です。 ここまで来たら、プロジェクトの作成は完了となります。 Macの場合 まず、Visual Studioを起動したら「新規」をクリックします。 次に、プロジェクトのテンプレートを決めます。 今回は、ウィンドウ左側のメニューの中から「.NET Core」の「アプリ」をクリック、その後、ウィンドウ中央のメニューの中から「全般」の「コンソールアプリケーション」をクリックしてください。 「C#▼」と書かれている部分をクリックすると、使用する言語を変更することができます。 しかし、今回は C#を使用するため、このままにしてください。 選択したら「次へ」をクリックします。 次に、プロジェクトの名前と、プロジェクトを作成する場所の設定を行います。 プロジェクトの名前は「Tutorial」などに設定しておくと良いでしょう。 それ以外の設定は変更しなくても問題ありません。 ただし、プロジェクトを作成した場所は、どこかに記録するなどして覚えておきましょう。 「作成」を押してしばらく待つと、この画面が出てきます。 これが、Visual Studioのエディタ画面です。 ここまで来たら、プロジェクトの作成は完了となります。 Altseed2 の導入 Altseed2 といった「拡張機能」も、導入しない限りは使うことができません。 Visual Studioには「NuGet」という、拡張機能を管理するアプリケーションが同梱されています。 今回はこのNuGetを使用してAltseed2を導入していきます。 Windows の場合 右側のソリューションエクスプローラから「依存関係」を右クリックして、「NuGetパッケージの管理」をクリックしてください。(ソリューションエクスプローラが表示されていない場合は、上のメニューバーの「表示」から「ソリューションエクスプローラ」をクリックしてください) すると、このような画面が表示されます。 左上の検索欄から「Altseed2」と入力してください。 すると、拡張機能の一覧に「Altseed2」が出てきます。 「Altseed2」を選択して、「インストール」をクリックしてください。 「インストール」をクリックすると、次のような画面が表示されます。 「OK」をクリックして、インストールを開始してください。 しばらく待つと、このような画面が表示されます。 「同意する」をクリックしてください。 インストールが終わり、ソリューションエクスプローラーの「依存関係」の「パッケージ」の下にAltseed2と表示されていれば、Altseed2 の導入も完了です。 Mac の場合 左側のメニューから「依存関係」をダブルクリックしてください。 すると、このような画面が表示されます。 左上の検索欄から「Altseed2」と入力してください。 すると、拡張機能の一覧に「Altseed2」が出てきます。 チェックボックスにチェックを入れて「パッケージの追加」をクリックしてください。 しばらく待つと、このような画面が表示されます。 「同意する」をクリックしてください。 このように、「Altseed2 は正常に追加されました。」という表示が出れば、Altseed2 の導入も完了です。 ゲームに使用する画像や音声を用意する さて、これでゲームを開発するために必要最低限のツールは全て出揃いました。 これだけでゲームを作ってもいいのですが、より多彩な表現を盛り込むためには、画像や音声のファイルを用意する必要があります。 今回開発するゲームで使用する画像や音声は、下記のリンクからダウンロードすることができます。 リソースファイル まず、ダウンロードして得られたzipファイルを解凍します。 次に、解凍したzipファイルの中身を、指定した場所に配置します。 Windowsの場合は、 ~/source/repos/Tutorial/Tutorial/bin/Debug/netcoreapp3.1 に配置してください。 Macの場合は、 ~/Projects/Tutorial/Tutorial/bin/Debug/netcoreapp3.1 に配置してください。 このようにすることで、ゲームから画像や音声のデータを使用することができます。 まとめと次回予告 今回は、Visual Studio と Altseed2 の導入作業をしてきました。 「プロジェクトの作成」や「Altseed2 の導入」は、常にこの手順で行うため、覚えておくと吉です。 次回からいよいよ、シューティングゲームの開発を行っていきます。"
  },
  "Tutorials/Chap1/index.html": {
    "href": "Tutorials/Chap1/index.html",
    "title": "1章 : ウィンドウを表示してみよう | Altseed2",
    "keywords": "1章 : ウィンドウを表示してみよう この章の目標 この章の目標は、Altseed2を使ってウィンドウを表示することです。 プレイヤーや弾を描画する前に、そもそも「画像を表示するウィンドウ」がなければ何もできません。 そこで、最初にAltseed2を使ってウィンドウを表示してみましょう。 新たに導入する知識 本章で使用するC#の機能は下記のWebページに説明されています。 必要次第参照してください。 C# によるプログラミング入門 : コメント C# によるプログラミング入門 : 条件分岐 ここでは if 文を使用します。 C# によるプログラミング入門 : 反復処理 ウインドウの表示 0章でVisualStudioのセットアップができたと思います。 VisualStudioの右側にソリューションエクスプローラーと呼ばれるものがあると思います。 このProgram.csを開いてください。コードが表示されます。 ウィンドウを表示するプログラムは以下になります。 using Altseed2; using System; namespace Tutorial { class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } そのままコピーアンドペーストすると namespace が書き変わってしまうので namespace は変えないように気を付けてください。 コードですが using や namespace などよくわからない単語がありますが、この辺りはまだそこまで気にしなくていいです。気になる方はこちらを読んでください。 C# によるプログラミング入門 : 名前空間 上のコードを実行します。VisualStudio画面上部の開始ボタンを押すか F5 キーを押すことで実行することができます。 実行に成功すると以下のようなウィンドウが表示で来ると思います。 コードの解説をしていきます。 重要なのは Main の中です。C#では実行するとこのMainの中身が呼び出されます。ここが今回ウィンドウを表示させている部分です。 まず Engine.Initialize でAltseedの初期化をしています。 ここでウインドウに表示されるタイトルや画面サイズ、その他のオプション(フルスクリーンにするかどうか等)を設定できます。 この初期化はAltseedを使用する場合、必ず実行しなければいけません。 初期化に成功すると、ウインドウが表示されます。 今回は Engine.Initialize(\"Tutorial\", 960, 720); となっています \"Tutorial\" は表示されるウィンドウの名前、 960 は横幅、 720 は縦幅になります。 これでAltseedはWindowを表示してくれるのですが、それだけではすぐにプログラムが終了してしまうので、プログラムが終了しないように while ループでEngineを更新させてあげる必要があります。 while (Engine.DoEvents()) でウインドウが閉じられていないか確認することができます。 Engine.DoEvents メソッドはウインドウが閉じられていない場合、正( true )、閉じられた場合、否( false )を返します。 while は true が返され続ける限り、 {} の中身を何度も実行し、 false が返された場合、実行せずに {} の後に移動します。 ウインドウ右上の×ボタン等を押すと、 false を返し、 while の中身の実行を終了します。 while ループの中身を説明していきます。 Engine.Update() というものがあると思います。これを実行することで Altseed が更新を続けることができます。 もう一つ、Escキーを押したときにウィンドウを閉じる処理が書いてあります。 // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } Engine.Keyboard.GetKeyState はキーの状態、例えば、「押されている」「押されていない」などを返すメソッドです。ここではEscキーの状態を返します。 if は true が返されると {} の中身を実行します。ここではキーの状態が ButtonState.Push だったら {} の中身を実行します。 {} には break が書いてあります。これは while ループをその場で抜ける機能です。 while ループを抜けると、終了処理が実行されます。この時にウインドウが開いたままならば、自動的にウインドウを閉じます。 以下の通り ButtonState.Push 以外にも取得できるキーの状態があります。うまく組み合わせて使っていきましょう。 キーの状態 説明 ButtonState.Free キーを押していない状態 ButtonState.Hold キーを押している状態 ButtonState.Push Free から Hold に変わる瞬間の状態 ButtonState.Release Hold から Free に変わる瞬間の状態 まとめ 1章では一番基本となるWindowの表示を行いました。 2章ではウィンドウにキャラクターを描画していきます。"
  },
  "Tutorials/Chap10/index.html": {
    "href": "Tutorials/Chap10/index.html",
    "title": "10章 : いざ、公開準備 | Altseed2",
    "keywords": "10章 : いざ、公開準備"
  },
  "Tutorials/Chap2/index.html": {
    "href": "Tutorials/Chap2/index.html",
    "title": "2章 : キャラクターを描画してみよう | Altseed2",
    "keywords": "2章 : キャラクターを描画してみよう 前章では、ウィンドウを表示するところまで進みました。 この章では自機となるキャラクターを表示し、移動させるところまで進みます。 キャラクターの描写 まずは、キャラクターを表示してみましょう。 以下のコードを追加します。 using Altseed2; using System; namespace Tutorial { class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); + // 自機 + var player = new SpriteNode(); + // 自機のテクスチャを読み込む + player.Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); + // 自機の座標を設定 + player.Position = new Vector2F(100, 360); + // 自機の中心座標を設定 + player.CenterPosition = player.ContentSize / 2; + + // 自機をエンジンに追加 + Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } これを実行してみると、キャラクターが表示されているのが確認できると思います。 追加したコードのしていることは、15行目から順に SpriteNodeインスタンスを生成し、\"player\"に格納する。 自機の画像を読み込み、playerのテクスチャに設定する。 自機の座標を x: 100 / y: 360 に設定する。 自機の中心座標を、自機のテクスチャ画像サイズの縦横それぞれの半分だけずらした位置に設定する。 となります。 ちなみに、新しく登場した「インスタンス」という語については、以下を参考にすると良いでしょう。 C#によるプログラミング入門 : クラス Note 自機の中心座標 自機の中心座標は、自機画像の左上を原点(0,0)とした相対座標になります。デフォルトの中心座標は原点、つまり左上になります。 ここでやっている中心座標の操作は、キャラクターの移動や距離の計算等で色々不便になるため、中心座標を真ん中に持ってくるようにしています。 ここで ContentSize とありますが，これは自機のサイズを表します。この自機のサイズは読み込んだテクスチャのサイズが用いられます。 今後オブジェクトの大きさを取得したくなったら， サイズを取得したいオブジェクト.ContentSize としましょう。 キャラクターの移動 次は、表示したキャラクターを移動させてみましょう。 以下のコードを追加します。 using Altseed2; using System; namespace Tutorial { class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); // 自機 var player = new SpriteNode(); // 自機のテクスチャを読み込む player.Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 自機の座標を設定 player.Position = new Vector2F(100, 360); // 自機の中心座標を設定 player.CenterPosition = player.Texture.Size / 2; // 自機をエンジンに追加 Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); + // ↑キーでY座標を減少 + if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) + { + player.Position -= new Vector2F(0.0f, 2.5f); + } // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } このコードを追加すると、キャラクターが画面上方向に進めるようになるはずです。 この追加したコードがしていることは、34行目から順に 上矢印キーの状態が、ホールド（押しっぱなし）の状態であるかどうかを確認。 上の条件が真であれば、\"player\"の座標(position)に x: 0.0 / y: -2.5 を足す。 ということです。 Note += って何？ 「+=」という見慣れない記号が気になった人もいるでしょう。 これは下の式と同じことを示しています。 player.Position = player.Position + new Vector2F(0.0f, -2.5f); プレイヤーの移動は、プログラム的にはプレイヤーの座標を書き換えつづけることで実現するわけですが、 移動は「今プレイヤーがいる座標を基準にして、そこから〇〇だけ移動する」と考えたほうがわかりやすいですね。 ですから、「プレイヤーの座標に、今のプレイヤーの座標に(0.0, -2.5)だけ加えた座標を代入する。」という操作を行います。 このような操作はプログラミングではよく用いるため、省略してかけるようになっています。それが「+=」というわけです。 この数字の後ろにある\"f\"ですが、これはその数字が浮動小数点数型であることを示しています。 キーボードのあるキーが押されているかどうか確認したいときは、 Engine.Keyboard.GetKeyState(Key.ここに確認したいキーを入れる) を用います。 詳しくは以下を参照してください。 Keyboard 左右上下に移動 では、同様にして、下・左右方向にも動けるようにしてみましょう。 using Altseed2; using System; namespace Tutorial { class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); // 自機 var player = new SpriteNode(); // 自機のテクスチャを読み込む player.Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 自機の座標を設定 player.Position = new Vector2F(100, 360); // 自機の中心座標を設定 player.CenterPosition = player.Texture.Size / 2; // 自機をエンジンに追加 Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); // ↑キーでY座標を減少 if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) { player.Position -= new Vector2F(0.0f, 2.5f); } + // ↓キーでY座標を増加 + if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) + { + player.Position += new Vector2F(0.0f, 2.5f); + } + + // →キーでX座標を増加 + if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) + { + player.Position += new Vector2F(2.5f, 0.0f); + } + + // ←キーでX座標を減少 + if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) + { + player.Position -= new Vector2F(2.5f, 0.0f); + } + // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Keys.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } 上方向に進むコードの状態を取得するキーと、座標の足す(引く)値を変更すれば、 下・左右方向にも進めるようになりますね。 以上で自機キャラクターの表示と移動ができるようになりました！ 次の章では弾を撃てるようにしていきます。"
  },
  "Tutorials/Chap3/index.html": {
    "href": "Tutorials/Chap3/index.html",
    "title": "3章 : キャラクターに弾を撃たせてみよう | Altseed2",
    "keywords": "3章 : キャラクターに弾を撃たせてみよう 前章ではキャラクターの移動まで行いました。 次は，シューティングゲームとして大事な要素の一つ，弾の発射を実装していきましょう。 弾の生成 まず以下のコードを追加します。 using Altseed2; using System; + using System.Collections.Generic; namespace Tutorial { class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); // 自機 var player = new SpriteNode(); // 自機のテクスチャを読み込む player.Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 自機の座標を設定 player.Position = new Vector2F(100, 360); // 自機の中心座標を設定 player.CenterPosition = player.ContentSize / 2; // 自機をエンジンに追加 Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); // ↑キーでY座標を減少 if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) { player.Position -= new Vector2F(0.0f, 2.5f); } // ↓キーでY座標を増加 if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) { player.Position += new Vector2F(0.0f, 2.5f); } // →キーでX座標を増加 if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) { player.Position += new Vector2F(2.5f, 0.0f); } // ←キーでX座標を減少 if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) { player.Position -= new Vector2F(2.5f, 0.0f); } + // Zキーが押された時に実行 + if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) + { + // 発射される自機弾 + var bullet = new SpriteNode(); + // 自機弾のテクスチャを読み込む + bullet.Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); + // 自機弾の座標を設定 + bullet.Position = player.Position; + // 自機弾の中心座標を設定 + bullet.CenterPosition = bullet.ContentSize / 2; + // 自機弾の表示位置を自機より奥に設定 + bullet.ZOrder--; + + // 自機弾をエンジンに追加 + Engine.AddNode(bullet); + } // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } 結果，画像の様にZキーを押すたびに弾が生成されるようになりますが，まだ弾は動いていません。 やっていることは前章と大して変わっていませんが，1つ見たことの無いものがありますね。 // 自機弾の表示位置を自機より奥に設定 bullet.ZOrder--; ZOrder は，オブジェクトが手前側に描画されるか，奥側に描画されるかを表す数値です。 小さいほど奥側に，大きいほど手前側に表示されます。 同じ値の場合は手前/奥側に表示されるかどうかは不定です。 シューティングにおいては弾はプレイヤーや敵の奥側に表示されるものなので， ZOrder を -- 演算子を用いて1減らしています。 弾の移動 弾を動かすために以下のコードを追加します。 using Altseed2; using System; using System.Collections.Generic; namespace Tutorial { class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); + // 自機弾を格納するリスト + var list = new List<SpriteNode>(); // 自機 var player = new SpriteNode(); // 自機のテクスチャを読み込む player.Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 自機の座標を設定 player.Position = new Vector2F(100, 360); // 自機の中心座標を設定 player.CenterPosition = player.ContentSize / 2; // 自機をエンジンに追加 Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); // ↑キーでY座標を減少 if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) { player.Position -= new Vector2F(0.0f, 2.5f); } // ↓キーでY座標を増加 if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) { player.Position += new Vector2F(0.0f, 2.5f); } // →キーでX座標を増加 if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) { player.Position += new Vector2F(2.5f, 0.0f); } // ←キーでX座標を減少 if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) { player.Position -= new Vector2F(2.5f, 0.0f); } // Zキーが押された時に実行 if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) { // 発射される自機弾 var bullet = new SpriteNode(); // 自機弾のテクスチャを読み込む bullet.Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); // 自機弾の座標を設定 bullet.Position = player.Position; // 自機弾の中心座標を設定 bullet.CenterPosition = bullet.ContentSize / 2; // 自機弾の表示位置を自機より奥に設定 bullet.ZOrder--; // 自機弾をエンジンに追加 Engine.AddNode(bullet); + // 自機弾をリストに追加 + list.Add(bullet); } + // 自機弾を右に進める + for (int i = 0; i < list.Count; i++) + { + list[i].Position += new Vector2F(10.0f, 0.0f); + } // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } これで発射された弾は右側に移動するようになりました。 ここでもまた始めてみるものが出てきました。 // 自機弾を格納するリスト var list = new List<SpriteNode>(); List<T> は，\"コレクション\"と呼ばれるものの一つです。 コレクションは，要素をまとめてくれるものです。 例えば， List<int> であったら int 型の整数を複数登録出来るものです。 List<T> は Add メソッドで末尾に要素を追加出来ます。 また，n番目に追加された要素を角括弧を用いて list[n] の様にして取得する事が出来ます。 更に， list.Count とすることで登録された要素の個数を取得することもできます。 // 自機弾を右に進める for (int i = 0; i < list.Count; i++) { list[i].Position += new Vector2F(10.0f, 0.0f); } 先程追加されたコードのこの部分では番号を指定した要素の検索と一緒にfor文を用いています。 このfor文というのはC#における繰り返し構文の一つで，while文に機能を足したようなものです。 forは for (繰り返し処理の前に行う事; 繰り返す条件; 繰り返し処理の最後に行われる事) { 繰り返して行いたい処理 } という風に書きます。 ここでは， 繰り返し処理の前に行う事 として int i = 0 を行い， int 型の変数を定義して値に0をセットしました。 繰り返す条件 は i < list.Count となっており， i がリストの回数よりも小さいことが条件になっています。 繰り返し処理の最後に行われる事 では， i++ で i に1を加算しています。 この3つの記述によって，このfor文は 鉤括弧内の処理を list.Count 回繰り返す という意味を持ちます。 この for (int i = 0; i < 繰り返し回数; i++) { 繰り返したい処理 } という書き方はよく使います。 この書き方において i は， 繰り返しが何回行われたか を意味します。 つまり， // 自機弾を右に進める for (int i = 0; i < list.Count; i++) { list[i].Position += new Vector2F(10.0f, 0.0f); } では list 内の要素を1つずつ取得して，それぞれの座標を右に動かしているのです。 ここで1つ疑問が浮かぶかもしれません。 あれ？ i が0からスタートって， list[0] から始めるの？0番目っておかしくない？ となるかもしれませんが， List<T> において，検索する数字は0番目から始まります。 つまり，10個の要素が格納されている List<T> では，最初の要素は0番目に存在して最後の要素は9番目に存在しているという事です。 因みに，このfor文をwhile文に書き換えるとこんな感じになります。 int i = 0; while (i < list.Count) { list[i].Position = new Vector2F(10.0f, 0.0f); i++; } \"指定回数繰り返す\"という動作はfor文の方が便利なのでこちらを使うことをお勧めします。 他のコレクション このチュートリアルでは以下のような List<T> 以外のコレクションも使っていきます。 コレクションごとに特徴が多種多様で難しいため，余裕がない場合はここは後で読むくらいで構いません。 配列 HashSet<T> Queue<T> 配列は List<T> とよく似ていますが， Add メソッドで要素の追加をするのではなく， array[0] = 3; のように直接代入することしかできません。 また，要素数は Count ではなく Length を用いて取得します。 HashSet<T> は同じ要素を2つ以上格納できないコレクションです。つまり， set.Add(3); を何回行っても3は1つしか格納されていません。 また， List<T> や配列の様に何番目の要素は…と言った検索はできません。 その代わり，他のコレクションに比べ要素の追加や削除が高速で行えるという特徴があります。 Queue<T> は\"先入れ先出し\"とも言われるコレクションで， Enqueue メソッドで末尾に要素を追加します。 要素を取り出すときは Dequeue メソッドを使用しますが，この操作で取り出せるのは先頭の要素です。 また， Dequeue メソッドで先頭の要素を取り出したとき，その要素は Queue<T> 内から自動的に削除されます。"
  },
  "Tutorials/Chap4/index.html": {
    "href": "Tutorials/Chap4/index.html",
    "title": "4章 : クラスを自分で設計してみよう | Altseed2",
    "keywords": "4章 : クラスを自分で設計してみよう 前章ではキャラクターが弾を撃つようになりました。 しかし、このまま新しい要素を Main メソッドに書き込んでいくと、ソースコードは段々と長く、わかりにくくなっていきます。 そこで、今回はソースコードを整理して、キャラクターと弾の処理を個別に行えるようにしましょう。 新たに導入する知識 C#によるプログラミング入門 : 関数 C#によるプログラミング入門 : 継承 プレイヤーを動かす処理をメソッドを使って整理する プレイヤーや弾を移動させるソースコードが while 文の中に書き込まれていたため、 while 文の中の処理が長くなっていました。 今はまだプレイヤーの移動と弾の発射だけなので、そこまで読みにくく感じることはないかもしれません。 しかし、ここに敵の追加や移動などの処理を加えると、ソースコードはどんどん長く、わかりにくくなっていきます。 しまいには開発者本人でさえ読めなくなってしまいます。 そこでまずは、メソッドを使って一連の処理をまとめていきましょう。 手始めに、キャラクターの移動に関する処理をメソッドで表現します。 using Altseed2; using System; using System.Collections.Generic; namespace Tutorial { class Program { + // プレイヤーの移動を行う + static void MovePlayer(SpriteNode player) + { + // ↑キーでY座標を減少 + if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) + { + player.Position -= new Vector2F(0.0f, 2.5f); + } + + // ↓キーでY座標を増加 + if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) + { + player.Position += new Vector2F(0.0f, 2.5f); + } + + // →キーでX座標を増加 + if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) + { + player.Position += new Vector2F(2.5f, 0.0f); + } + + // ←キーでX座標を減少 + if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) + { + player.Position -= new Vector2F(2.5f, 0.0f); + } + } [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); // 自機弾を格納するリスト var list = new List<SpriteNode>(); // 自機 var player = new SpriteNode(); // 自機のテクスチャを読み込む player.Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 自機の座標を設定 player.Position = new Vector2F(100, 360); // 自機の中心座標を設定 player.CenterPosition = player.ContentSize / 2; // 自機をエンジンに追加 Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); - // ↑キーでY座標を減少 - if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) - { - player.Position -= new Vector2F(0.0f, 2.5f); - } - - // ↓キーでY座標を増加 - if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) - { - player.Position += new Vector2F(0.0f, 2.5f); - } - - // →キーでX座標を増加 - if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) - { - player.Position += new Vector2F(2.5f, 0.0f); - } - - // ←キーでX座標を減少 - if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) - { - player.Position -= new Vector2F(2.5f, 0.0f); - } + // プレイヤーを動かす + MovePlayer(player); // Zキーが押された時に実行 if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) { // 発射される自機弾 var bullet = new SpriteNode(); // 自機弾のテクスチャを読み込む bullet.Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); // 自機弾の座標を設定 bullet.Position = player.Position; // 自機弾の中心座標を設定 bullet.CenterPosition = bullet.ContentSize / 2; // 自機弾の表示位置を自機より奥に設定 bullet.ZOrder--; // 自機弾をエンジンに追加 Engine.AddNode(bullet); // 自機弾をリストに追加 list.Add(bullet); } // 自機弾を右に進める for (int i = 0; i < list.Count; i++) { list[i].Position += new Vector2F(10.0f, 0.0f); } // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } ソースコードでは、以下のようにメソッドを追加しました。 static void MovePlayer(SpriteNode player) { ...... } MovePlayer メソッドは引数 player の移動に関する処理を行います。 MovePlayer メソッドの中の処理は、以下のように記述することで呼び出されます。 MovePlayer(player); このように変更して、作成したプログラムを実行してみてください。 挙動は全く変わらないはずです。 プレイヤーを動かす処理を継承を使って整理する Main メソッドの中身がある程度すっきりしましたね。 しかし、これだけでは C#の良さは活かしきれません。 C#の機能にクラスというものがあったことを思い出してください。 ここからは、そのクラスを自分で設計していきましょう。 まず、プレイヤーに相当するクラスを追加します。 using Altseed2; using System; using System.Collections.Generic; namespace Tutorial { + // プレイヤーのクラス + public class Player : SpriteNode + { + } class Program { // プレイヤーの移動を行う - static void MovePlayer(SpriteNode player) + static void MovePlayer(Player player) { // ↑キーでY座標を減少 if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) { player.Position -= new Vector2F(0.0f, 2.5f); } // ↓キーでY座標を増加 if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) { player.Position += new Vector2F(0.0f, 2.5f); } // →キーでX座標を増加 if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) { player.Position += new Vector2F(2.5f, 0.0f); } // ←キーでX座標を減少 if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) { player.Position -= new Vector2F(2.5f, 0.0f); } } [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); // 自機弾を格納するリスト var list = new List<SpriteNode>(); // 自機 - var player = new SpriteNode(); + var player = new Player(); // 自機のテクスチャを読み込む player.Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 自機の座標を設定 player.Position = new Vector2F(100, 360); // 自機の中心座標を設定 player.CenterPosition = player.ContentSize / 2; // 自機をエンジンに追加 Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); // プレイヤーを動かす MovePlayer(player); // Zキーが押された時に実行 if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) { // 発射される自機弾 var bullet = new SpriteNode(); // 自機弾のテクスチャを読み込む bullet.Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); // 自機弾の座標を設定 bullet.Position = player.Position; // 自機弾の中心座標を設定 bullet.CenterPosition = bullet.ContentSize / 2; // 自機弾の表示位置を自機より奥に設定 bullet.ZOrder--; // 自機弾をエンジンに追加 Engine.AddNode(bullet); // 自機弾をリストに追加 list.Add(bullet); } // 自機弾を右に進める for (int i = 0; i < list.Count; i++) { list[i].Position += new Vector2F(10.0f, 0.0f); } // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } ソースコードでは、以下のようにクラスを追加しました。 class Player : SpriteNode { ...... } 第2章で、 SpriteNode は設計図であると述べました。 この変更では、 SpriteNode という設計図を利用して、 Player という新たな設計図を作成しています。 この機能を「継承」と呼びます。 また、 var player = new SpriteNode(); の部分が var player = new Player(); に変化しています。 このようにすることで、 player は Player クラスのインスタンスになります。 この Player クラスには、新たな機能が何も追加されていません。 そこで、プレイヤーを動かす処理を Player クラスの内部に持っていきます。 using Altseed2; using System; using System.Collections.Generic; namespace Tutorial { // プレイヤーのクラス public class Player : SpriteNode { + // 移動を行う + public void Move() + { + // ↑キーでY座標を減少 + if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) + { + Position -= new Vector2F(0.0f, 2.5f); + } + + // ↓キーでY座標を増加 + if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) + { + Position += new Vector2F(0.0f, 2.5f); + } + + // →キーでX座標を増加 + if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) + { + Position += new Vector2F(2.5f, 0.0f); + } + + // ←キーでX座標を減少 + if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) + { + Position -= new Vector2F(2.5f, 0.0f); + } + } } class Program { - // プレイヤーの移動を行う - static void MovePlayer(Player player) - { - // ↑キーでY座標を減少 - if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) - { - player.Position -= new Vector2F(0.0f, 2.5f); - } - - // ↓キーでY座標を増加 - if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) - { - player.Position += new Vector2F(0.0f, 2.5f); - } - - // →キーでX座標を増加 - if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) - { - player.Position += new Vector2F(2.5f, 0.0f); - } - - // ←キーでX座標を減少 - if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) - { - player.Position -= new Vector2F(2.5f, 0.0f); - } - } [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); // 自機弾を格納するリスト var list = new List<SpriteNode>(); // 自機 var player = new Player(); // 自機のテクスチャを読み込む player.Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 自機の座標を設定 player.Position = new Vector2F(100, 360); // 自機の中心座標を設定 player.CenterPosition = player.ContentSize / 2; // 自機をエンジンに追加 Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); // プレイヤーを動かす - MovePlayer(player); + player.Move(); // Zキーが押された時に実行 if (Engine.Keyboard.GetKeyState(Keys.Z) == ButtonState.Push) { // 発射される自機弾 var bullet = new SpriteNode(); // 自機弾のテクスチャを読み込む bullet.Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); // 自機弾の座標を設定 bullet.Position = player.Position; // 自機弾の中心座標を設定 bullet.CenterPosition = bullet.ContentSize / 2; // 自機弾の表示位置を自機より奥に設定 bullet.ZOrder--; // 自機弾をエンジンに追加 Engine.AddNode(bullet); // 自機弾をリストに追加 list.Add(bullet); } // 自機弾を右に進める for (int i = 0; i < list.Count; i++) { list[i].Position += new Vector2F(10.0f, 0.0f); } // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } MovePlayer メソッドの処理を、 Player クラスの Move メソッドに移動させました。 Player クラスは、継承元である SpriteNode クラスの情報を持っているため、 Position や Texture が自身の情報となります。 したがって Move メソッドの中では、たとえば player.Position とはせずに、単に Position と記述します。 また、 Main メソッドからの呼び出し方が変わり、 player.Move() とします。 続いて、Altseed2のUpdate機能を使って、 Player クラスの更新を Player クラスの内部で行えるようにしましょう。 using Altseed2; using System; using System.Collections.Generic; namespace Tutorial { // プレイヤーのクラス public class Player : SpriteNode { + // フレーム毎に実行 + protected override void OnUpdate() + { + // 移動を実行 + Move(); + } // 移動を行う - public void Move() + void Move() { // ↑キーでY座標を減少 if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) { Position -= new Vector2F(0.0f, 2.5f); } // ↓キーでY座標を増加 if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) { Position += new Vector2F(0.0f, 2.5f); } // →キーでX座標を増加 if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) { Position += new Vector2F(2.5f, 0.0f); } // ←キーでX座標を減少 if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) { Position -= new Vector2F(2.5f, 0.0f); } } } class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); // 自機弾を格納するリスト var list = new List<SpriteNode>(); // 自機 var player = new Player(); // 自機のテクスチャを読み込む player.Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 自機の座標を設定 player.Position = new Vector2F(100, 360); // 自機の中心座標を設定 player.CenterPosition = player.ContentSize / 2; // 自機をエンジンに追加 Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); - // プレイヤーを動かす - player.Move(); // Zキーが押された時に実行 if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) { // 発射される自機弾 var bullet = new SpriteNode(); // 自機弾のテクスチャを読み込む bullet.Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); // 自機弾の座標を設定 bullet.Position = player.Position; // 自機弾の中心座標を設定 bullet.CenterPosition = bullet.ContentSize / 2; // 自機弾の表示位置を自機より奥に設定 bullet.ZOrder--; // 自機弾をエンジンに追加 Engine.AddNode(bullet); // 自機弾をリストに追加 list.Add(bullet); } // 自機弾を右に進める for (int i = 0; i < list.Count; i++) { list[i].Position += new Vector2F(10.0f, 0.0f); } // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } OnUpdate は、Altseed2が更新されるたびに実行されるメソッドです。 この中に Move メソッドを加えることで、今までと同じように Move メソッドがAltseed2が更新されるたびに実行されます。 protected override void OnUpdate() { ...... } override は、継承元のメソッドの名前を使って処理を上書きするための機能です。 単に OnUpdate と記述するだけでなく、 override も併せて記述しなければ、正しい動作は望めません。 なお、 public void Move() の部分が void Move() に変化していることが見て取れます。 public や protected の説明は次の章にて行います。 弾を動かす処理を継承を使って整理する 今度は、先ほどと同じようにして弾のソースコードを整理していきます。 弾に相当するクラスを追加しましょう。 using Altseed2; using System; using System.Collections.Generic; namespace Tutorial { // プレイヤーのクラス public class Player : SpriteNode { // フレーム毎に実行 protected override void OnUpdate() { // 移動を実行 Move(); } // 移動を行う void Move() { // ↑キーでY座標を減少 if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) { Position -= new Vector2F(0.0f, 2.5f); } // ↓キーでY座標を増加 if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) { Position += new Vector2F(0.0f, 2.5f); } // →キーでX座標を増加 if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) { Position += new Vector2F(2.5f, 0.0f); } // ←キーでX座標を減少 if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) { Position -= new Vector2F(2.5f, 0.0f); } } } + // 弾のクラス + public class Bullet : SpriteNode + { + // フレーム毎に実行 + protected override void OnUpdate() + { + // 座標を速度分進める + Position += new Vector2F(10.0f, 0.0f); + } + } class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); - // 自機弾を格納するリスト - var list = new List<SpriteNode>(); // 自機 var player = new Player(); // 自機のテクスチャを読み込む player.Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 自機の座標を設定 player.Position = new Vector2F(100, 360); // 自機の中心座標を設定 player.CenterPosition = player.ContentSize / 2; // 自機をエンジンに追加 Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); // Zキーが押された時に実行 if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) { // 発射される自機弾 - var bullet = new SpriteNode(); + var bullet = new Bullet(); // 自機弾のテクスチャを読み込む bullet.Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); // 自機弾の座標を設定 bullet.Position = player.Position; // 自機弾の中心座標を設定 bullet.CenterPosition = bullet.ContentSize / 2; // 自機弾の表示位置を自機より奥に設定 bullet.ZOrder--; // 自機弾をエンジンに追加 Engine.AddNode(bullet); - // 自機弾をリストに追加 - list.Add(bullet); } - // 自機弾を右に進める - for (int i = 0; i < list.Count; i++) - { - list[i].Position += new Vector2F(10.0f, 0.0f); - } // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } Bullet クラスを追加しました。 public class Bullet : SpriteNode { ... } また、 var bullet = new SpriteNode(); の部分が var bullet = new Bullet(); に変化しています。 このようにすることで、 bullet は Bullet クラスのインスタンスになります。 更新処理が Bullet クラスに記述されていることで、更新するたびに弾自身が自分で移動するようになります。 そのため、 List による管理が必要なくなります。 弾を撃つ処理をプレイヤーに移動する 弾を撃っているのはプレイヤーなので、弾を撃つ処理をプレイヤーに移動してみましょう。 using Altseed2; using System; using System.Collections.Generic; namespace Tutorial { // プレイヤーのクラス public class Player : SpriteNode { // フレーム毎に実行 protected override void OnUpdate() { // 移動を実行 Move(); + // ショットを実行 + Shot(); } // 移動を行う void Move() { // ↑キーでY座標を減少 if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) { Position -= new Vector2F(0.0f, 2.5f); } // ↓キーでY座標を増加 if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) { Position += new Vector2F(0.0f, 2.5f); } // →キーでX座標を増加 if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) { Position += new Vector2F(2.5f, 0.0f); } // ←キーでX座標を減少 if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) { Position -= new Vector2F(2.5f, 0.0f); } } + // ショット + private void Shot() + { + // Zキーでショットを放つ + if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) + { + // 発射される自機弾 + var bullet = new Bullet(); + + // 自機弾のテクスチャを読み込む + bullet.Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); + // 自機弾の座標を設定 + bullet.Position = Position; + // 自機弾の中心座標を設定 + bullet.CenterPosition = bullet.ContentSize / 2; + // 自機弾の表示位置を自機より奥に設定 + bullet.ZOrder--; + + // 自機弾をエンジンに追加 + Engine.AddNode(bullet); + } + } } // 弾のクラス public class Bullet : SpriteNode { // フレーム毎に実行 protected override void OnUpdate() { // 座標を速度分進める Position += new Vector2F(10.0f, 0.0f); } } class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); // 自機 var player = new Player(); // 自機のテクスチャを読み込む player.Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 自機の座標を設定 player.Position = new Vector2F(100, 360); // 自機の中心座標を設定 player.CenterPosition = player.ContentSize / 2; // 自機をエンジンに追加 Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); - // Zキーが押された時に実行 - if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) - { - // 発射される自機弾 - var bullet = new Bullet(); - - // 自機弾のテクスチャを読み込む - bullet.Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); - // 自機弾の座標を設定 - bullet.Position = player.Position; - // 自機弾の中心座標を設定 - bullet.CenterPosition = bullet.ContentSize / 2; - // 自機弾の表示位置を自機より奥に設定 - bullet.ZOrder--; - - // 自機弾をエンジンに追加 - Engine.AddNode(bullet); - } // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } プレイヤーに関する処理のほとんどが Player クラスに移動しましたね。 Main メソッドの while 文の中身がAltseed2の更新処理だけになりました。 ここまで変更したプログラムを実行してみてください。 挙動は全く変わらないはずです。 コンストラクタを使って初期値を設定する 大分、処理がクラスにまとまってきました。 しかし、画像と最初の位置の指定がクラスの外で行われています。 これら初期値の設定も、クラスの中で行いたいものです。 そこで登場するのが「コンストラクタ」です。 using Altseed2; using System; using System.Collections.Generic; namespace Tutorial { // プレイヤーのクラス public class Player : SpriteNode { + // コンストラクタ + public Player(Vector2F position) + { + // 座標を設定 + Position = position; + + // テクスチャを読み込む + Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); + + // 中心座標を設定 + CenterPosition = ContentSize / 2; + } // フレーム毎に実行 protected override void OnUpdate() { // 移動を実行 Move(); // ショットを実行 Shot(); } // 移動を行う void Move() { // ↑キーでY座標を減少 if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) { Position -= new Vector2F(0.0f, 2.5f); } // ↓キーでY座標を増加 if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) { Position += new Vector2F(0.0f, 2.5f); } // →キーでX座標を増加 if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) { Position += new Vector2F(2.5f, 0.0f); } // ←キーでX座標を減少 if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) { Position -= new Vector2F(2.5f, 0.0f); } } // ショット private void Shot() { // Zキーでショットを放つ if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) { // 発射される自機弾 - var bullet = new Bullet(); + var bullet = new Bullet(Position); - // 自機弾のテクスチャを読み込む - bullet.Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); - // 自機弾の座標を設定 - bullet.Position = Position; - // 自機弾の中心座標を設定 - bullet.CenterPosition = bullet.ContentSize / 2; - // 自機弾の表示位置を自機より奥に設定 - bullet.ZOrder--; // 自機弾をエンジンに追加 Engine.AddNode(bullet); } } } // 弾のクラス public class Bullet : SpriteNode { + // コンストラクタ + public Bullet(Vector2F position) + { + // 座標を設定 + Position = position; + + // テクスチャを読み込む + Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); + + // 中心座標を設定 + CenterPosition = ContentSize / 2; + + // 表示位置をプレイヤーや敵より奥に設定 + ZOrder--; + } // フレーム毎に実行 protected override void OnUpdate() { // 座標を速度分進める Position += new Vector2F(10.0f, 0.0f); } } class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); // 自機 - var player = new Player(); + var player = new Player(new Vector2F(100, 360)); - // 自機のテクスチャを読み込む - player.Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); - // 自機の座標を設定 - player.Position = new Vector2F(100, 360); - // 自機の中心座標を設定 - player.CenterPosition = player.ContentSize / 2; // 自機をエンジンに追加 Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } コンストラクタは、インスタンスが生成されたときに実行されるメソッドの一種です。 インスタンス生成と同時に画像を読み込むには、このコンストラクタにその処理を記述します。 また、コンストラクタはメソッドであり、引数を持つことができます。 ソースコードでは、 Player クラスと Bullet クラスのコンストラクタに、引数 position を持たせています。 このようにすることで、プレイヤーや弾の最初の位置を外部から設定できるようになります。 次に、コンストラクタで弾の速度を設定できるようにしましょう。 Bullet クラスのコンストラクタに速度を引数として設定してそこからいじれるようにします。 using Altseed2; using System; using System.Collections.Generic; namespace Tutorial { // プレイヤーのクラス public class Player : SpriteNode { // コンストラクタ public Player(Vector2F position) { // 座標を設定 Position = position; // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; } // フレーム毎に実行 protected override void OnUpdate() { // 移動を実行 Move(); // ショットを実行 Shot(); } // 移動を行う void Move() { // ↑キーでY座標を減少 if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) { Position -= new Vector2F(0.0f, 2.5f); } // ↓キーでY座標を増加 if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) { Position += new Vector2F(0.0f, 2.5f); } // →キーでX座標を増加 if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) { Position += new Vector2F(2.5f, 0.0f); } // ←キーでX座標を減少 if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) { Position -= new Vector2F(2.5f, 0.0f); } } // ショット private void Shot() { // Zキーでショットを放つ if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) { // 発射される自機弾 var bullet = new Bullet(Position); // 自機弾をエンジンに追加 Engine.AddNode(bullet); } } } // 弾のクラス public class Bullet : SpriteNode { + // フレーム毎に進む距離 + private Vector2F velocity; // コンストラクタ - public Bullet(Vector2F position) + public Bullet(Vector2F position, Vector2F velocity) { // 座標を設定 Position = position; // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; + // 弾速を設定 + this.velocity = velocity; // 表示位置をプレイヤーや敵より奥に設定 ZOrder--; } // フレーム毎に実行 protected override void OnUpdate() { // 座標を速度分進める - Position += new Vector2F(10.0f, 0.0f); + Position += velocity; } } class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); // 自機 var player = new Player(new Vector2F(100, 360)); // 自機をエンジンに追加 Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } Bullet クラスのコンストラクタの引数を変えたので、それを呼び出すコードを修正しましょう。 using Altseed2; using System; using System.Collections.Generic; namespace Tutorial { // プレイヤーのクラス public class Player : SpriteNode { // コンストラクタ public Player(Vector2F position) { // 座標を設定 Position = position; // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; } // フレーム毎に実行 protected override void OnUpdate() { // 移動を実行 Move(); // ショットを実行 Shot(); } // 移動を行う void Move() { // ↑キーでY座標を減少 if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) { Position -= new Vector2F(0.0f, 2.5f); } // ↓キーでY座標を増加 if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) { Position += new Vector2F(0.0f, 2.5f); } // →キーでX座標を増加 if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) { Position += new Vector2F(2.5f, 0.0f); } // ←キーでX座標を減少 if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) { Position -= new Vector2F(2.5f, 0.0f); } } // ショット private void Shot() { // Zキーでショットを放つ if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) { // 発射される自機弾 - var bullet = new Bullet(Position); + var bullet = new Bullet(Position, new Vector2F(10f, 0f)); // 自機弾をエンジンに追加 Engine.AddNode(bullet); } } } // 弾のクラス public class Bullet : SpriteNode { // フレーム毎に進む距離 private Vector2F velocity; // コンストラクタ public Bullet(Vector2F position, Vector2F velocity) { // 座標を設定 Position = position; // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; // 弾速を設定 this.velocity = velocity; // 表示位置をプレイヤーや敵より奥に設定 ZOrder--; } // フレーム毎に実行 protected override void OnUpdate() { // 座標を速度分進める Position += velocity; } } class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); // 自機 var player = new Player(new Vector2F(100, 360)); // 自機をエンジンに追加 Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } プレイヤーが画面外に出ないようにする ここまででできたプログラムを実行してわかると思いますが、方向キーを押しっぱなしにしていると、プレイヤーが画面外に出てしまいます。 そこで、プレイヤーが画面外に出ないように、処理を追加する必要があります。 using Altseed2; using System; using System.Collections.Generic; namespace Tutorial { // プレイヤーのクラス public class Player : SpriteNode { // コンストラクタ public Player(Vector2F position) { // 座標を設定 Position = position; // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; } // フレーム毎に実行 protected override void OnUpdate() { // 移動を実行 Move(); // ショットを実行 Shot(); } // 移動を行う void Move() { + // 現在のX座標を取得する + var x = Position.X; + // 現在のY座標を取得する + var y = Position.Y; // ↑キーでY座標を減少 if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) { - Position -= new Vector2F(0.0f, 2.5f); + y -= 2.5f; } // ↓キーでY座標を増加 if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) { - Position += new Vector2F(0.0f, 2.5f); + y += 2.5f; } // →キーでX座標を増加 if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) { - Position += new Vector2F(2.5f, 0.0f); + x += 2.5f; } // ←キーでX座標を減少 if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) { - Position -= new Vector2F(2.5f, 0.0f); + x -= 2.5f; } + // テクスチャのサイズの半分を取得する + var halfSize = ContentSize / 2; + + // X座標が画面外に行かないように調整 + x = MathHelper.Clamp(x, Engine.WindowSize.X - halfSize.X, halfSize.X); + // Y座標が画面外に行かないように調整 + y = MathHelper.Clamp(y, Engine.WindowSize.Y - halfSize.Y, halfSize.Y); + + // 調整された座標を設定 + Position = new Vector2F(x, y); } // ショット private void Shot() { // Zキーでショットを放つ if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) { // 発射される自機弾 var bullet = new Bullet(Position, new Vector2F(10f, 0f)); // 自機弾をエンジンに追加 Engine.AddNode(bullet); } } } // 弾のクラス public class Bullet : SpriteNode { // フレーム毎に進む距離 private Vector2F velocity; // コンストラクタ public Bullet(Vector2F position, Vector2F velocity) { // 座標を設定 Position = position; // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; // 弾速を設定 this.velocity = velocity; // 表示位置をプレイヤーや敵より奥に設定 ZOrder--; } // フレーム毎に実行 protected override void OnUpdate() { // 座標を速度分進める Position += velocity; } } class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); // 自機 var player = new Player(new Vector2F(100, 360)); // 自機をエンジンに追加 Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } 追加した処理では、変更後の x 座標と y 座標について、画面に表示される範囲に収まるように数値を設定しています。 このようにすることで、プレイヤーが画面外に出ることはなくなります。 弾が画面外に出たら消える処理を追加する 弾はいずれ画面外に出ていきます。 しかし、画面外に出た弾を削除せずに、エンジンに弾を追加していくと、エンジンの処理が重くなっていきます。 そのため、弾が画面外に出て行ったら削除する処理を追加する必要があります。 using Altseed2; using System; using System.Collections.Generic; namespace Tutorial { // プレイヤーのクラス public class Player : SpriteNode { // コンストラクタ public Player(Vector2F position) { // 座標を設定 Position = position; // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; } // フレーム毎に実行 protected override void OnUpdate() { // 移動を実行 Move(); // ショットを実行 Shot(); } // 移動を行う void Move() { // 現在のX座標を取得する var x = Position.X; // 現在のY座標を取得する var y = Position.Y; // ↑キーでY座標を減少 if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) { y -= 2.5f; } // ↓キーでY座標を増加 if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) { y += 2.5f; } // →キーでX座標を増加 if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) { x += 2.5f; } // ←キーでX座標を減少 if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) { x -= 2.5f; } // テクスチャのサイズの半分を取得する var halfSize = ContentSize / 2; // X座標が画面外に行かないように調整 x = MathHelper.Clamp(x, Engine.WindowSize.X - halfSize.X, halfSize.X); // Y座標が画面外に行かないように調整 y = MathHelper.Clamp(y, Engine.WindowSize.Y - halfSize.Y, halfSize.Y); // 調整された座標を設定 Position = new Vector2F(x, y); } // ショット private void Shot() { // Zキーでショットを放つ if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) { // 発射される自機弾 var bullet = new Bullet(Position, new Vector2F(10f, 0f)); // 自機弾をエンジンに追加 Engine.AddNode(bullet); } } } // 弾のクラス public class Bullet : SpriteNode { // フレーム毎に進む距離 private Vector2F velocity; // コンストラクタ public Bullet(Vector2F position, Vector2F velocity) { // 座標を設定 Position = position; // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; // 弾速を設定 this.velocity = velocity; // 表示位置をプレイヤーや敵より奥に設定 ZOrder--; } // フレーム毎に実行 protected override void OnUpdate() { // 座標を速度分進める Position += velocity; + // 画面外に出たら自身を削除 + RemoveMyselfIfOutOfWindow(); } + // 画面外に出た時自身を消去 + private void RemoveMyselfIfOutOfWindow() + { + var halfSize = Texture.Size / 2; + if (Position.X < -halfSize.X + || Position.X > Engine.WindowSize.X + halfSize.X + || Position.Y < -halfSize.Y + || Position.Y > Engine.WindowSize.Y + halfSize.Y) + { + // 自身を削除 + Parent?.RemoveChildNode(this); + } + } } class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); // 自機 var player = new Player(new Vector2F(100, 360)); // 自機をエンジンに追加 Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } 弾が画面外に出たら、親ノードを取得して RemoveChildNode メソッドを実行します。 このメソッドを実行すると、弾のインスタンスはAltseed2の管理対象から除外されます。 すなわち、画面外に出た弾は管理されなくなるということです。 これにて、画面外の弾が消えないも解決です。 クラスごとにファイルを分ける さて、ここまでソースコードをProgram.csに書き込んできたわけですが、行数が多くなり、見通しも悪くなってきました。 そこで、新しい C#のソースファイルを追加して、ソースコードを切り分けていきましょう。 Windows の場合 まず、下図に示すように、「ShootingGame」の青く示された部分を右クリックしてください。 その後、選択肢のウィンドウが出てくるので、「追加」、「新しい項目」の順にクリックしてください。 すると、「新しい項目の追加 - ShootingGame」というウィンドウが表示されます。 ウィンドウが表示されたら、画面左側の選択肢から「コード」を選択し、その後、画面中央の選択肢から「クラス」を選択します。 次に、画面下側の入力ボックスに、ファイル名を入力します。 今回は Player クラスを別のファイルに移動したいため、ファイル名を「Player.cs」とします。 入力が終わったら、「追加」をクリックします。 ここまで終わったら、「ソリューション」のところに「Player.cs」が追加されているはずです。 あとは、Program.csに記述されている Player クラスの部分を切り取って、Player.csに貼り付けるだけです。 ただし、ただ切り貼りしただけではエラーが発生します。 これは、ソースファイルに Altseed という名前空間が知らされていないことが原因です。 Player.csの頭に「 using Altseed2; 」と記述しましょう。 これと同様の手順を踏んで、Bullet.csを追加し、 Bullet クラスを移してみてください。 Mac の場合 まず、下図に示すように、「ShootingGame」の青く示された部分を右クリックしてください。 その後、選択肢のウィンドウが出てくるので、「追加」、「新しいファイル」の順にクリックしてください。 すると、「新しいファイル」というウィンドウが表示されます。 ウィンドウが表示されたら、画面左側の選択肢から「General」を選択し、その後、画面中央の選択肢から「空のクラス」を選択します。 次に、画面下側の入力ボックスに、ファイル名を入力します。 今回は Player クラスを別のファイルに移動したいため、ファイル名を「Player」とします。 入力が終わったら、「新規」をクリックします。 ここまで終わったら、「ソリューション」のところに「Player.cs」が追加されているはずです。 あとは、Program.csに記述されている Player クラスの部分を切り取って、Player.csに貼り付けるだけです。 ただし、ただ切り貼りしただけではエラーが発生します。 これは、ソースファイルに Altseed という名前空間が知らされていないことが原因です。 Player.csの頭に「 using Altseed; 」と記述しましょう。 これと同様の手順を踏んで、Bullet.csを追加し、 Bullet クラスを移してみてください。 プレイヤーや弾をまとめて管理できるようにする ソースコードが複数のファイルに振り分けられたことで、Program.csの内容がこれだけになりました。 using Altseed2; using System; using System.Collections.Generic; namespace Tutorial { class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); // 自機 var player = new Player(new Vector2F(100, 360)); // 自機をエンジンに追加 Engine.AddNode(player); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } しかし、このソースコードでは、プレイヤーや弾を、エンジンに直接登録してしまっています。 このままでは、何か別の画面に切り替えようとした場合に、エンジンに直接登録されたオブジェクトをいちいち登録解除するのが面倒です。 そこで、プレイヤーや弾をまとめて管理できる、すなわちメインステージを追加しておきましょう。 まず、新しくMainNode.csを作成します。 手順は、先ほどソースコードを振り分ける時に行ったものと同じです。 ファイルを新規作成できたら、メインステージを表す MainNode クラスに処理を書き込んでいきます。 MainNode.csに以下のように書いてください。 using Altseed2; namespace Tutorial { // メインステージのクラス public class MainNode : Node { // キャラクターを表示するノード private Node characterNode = new Node(); // プレイヤーの参照 private Player player; // エンジンに追加された時に実行 protected override void OnAdded() { // キャラクターノードを追加 AddChildNode(characterNode); // UIを表示するノード var uiNode = new Node(); // UIノードを追加 AddChildNode(uiNode); // プレイヤーを設定 player = new Player(new Vector2F(100, 360)); // キャラクターノードにプレイヤーを追加 characterNode.AddChildNode(player); } } } OnAdded は、このノードがエンジンに登録されたときに実行されるメソッドです。 ノードの初期状態を設定するには、このメソッドを使います。 protected override void OnAdded() { ...... } さて、 MainNode クラスは、ノードを表す Node クラスを継承しています。 こうすることで、 MainNode クラスのインスタンスは、エンジンに登録されるノードとして作用します。 このノードにプレイヤーや弾を登録することで、これらをまとめて管理できるというわけです。 また、 MainNode の中にも、 characterNode や uiNode のような、 Node クラスのインスタンスがあります。 同じ画面の中でも、プレイヤーや弾といったゲーム中のオブジェクトと、残機や得点といった UI に関わるオブジェクトを、それぞれまとめて管理したいものです。 このように、 Node クラスのインスタンスをうまく利用することで、系統ごとにオブジェクトをまとめて管理することができます。 では、 MainNode クラスのインスタンスを作成し、それをエンジンに登録してみましょう。 Program.csに移って、以下のようにソースコードを書き換えてください。 using Altseed2; using System; using System.Collections.Generic; namespace Tutorial { class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); - // 自機 - var player = new Player(new Vector2F(100, 360)); - - // 自機をエンジンに追加 - Engine.AddNode(player); + // メイン画面をエンジンに追加 + Engine.AddNode(new MainNode()); // メインループ while (Engine.DoEvents()) { // エンジンを更新 Engine.Update(); // Escapeキーでゲーム終了 if (Engine.Keyboard.GetKeyState(Key.Escape) == ButtonState.Push) { break; } } // エンジンの終了処理を行う Engine.Terminate(); } } } このようにすると、 MainNode の子ノードとして登録されているオブジェクト群が更新され、先ほどと同じ挙動をします。 また、ゲームシーンとして MainNode を定義したため、 Player クラスで行っている自機弾の追加先をエンジンから、 MainNode にある characterNode に変更しましょう。 using Altseed2; namespace Tutorial { // プレイヤーのクラス public class Player : SpriteNode { // コンストラクタ public Player(Vector2F position) { // 座標を設定 Position = position; // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; } // フレーム毎に実行 protected override void OnUpdate() { // 移動を実行 Move(); // ショットを実行 Shot(); } // 移動を行う void Move() { // 現在のX座標を取得する var x = Position.X; // 現在のY座標を取得する var y = Position.Y; // ↑キーでY座標を減少 if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) { y -= 2.5f; } // ↓キーでY座標を増加 if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) { y += 2.5f; } // →キーでX座標を増加 if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) { x += 2.5f; } // ←キーでX座標を減少 if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) { x -= 2.5f; } // テクスチャのサイズの半分を取得する var halfSize = ContentSize / 2; // X座標が画面外に行かないように調整 x = MathHelper.Clamp(x, Engine.WindowSize.X - halfSize.X, halfSize.X); // Y座標が画面外に行かないように調整 y = MathHelper.Clamp(y, Engine.WindowSize.Y - halfSize.Y, halfSize.Y); // 調整された座標を設定 Position = new Vector2F(x, y); } // ショット private void Shot() { // Zキーでショットを放つ if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) { - // 発射される自機弾 - var bullet = new Bullet(Position, new Vector2F(10f, 0f)); - - // 自機弾をエンジンに追加 - Engine.AddNode(bullet); + // Zキーでショットを放つ + Parent.AddChildNode(new Bullet(Position , new Vector2F(10f, 0f))); } } } } ここで， MainNode.characterNode がないではないかと思うかもしれませんが、 Parent が MainNode.characterNode を表しています。 MainNode.csにて、 // キャラクターノードを追加 AddChildNode(characterNode); ...... // キャラクターノードにプレイヤーを追加 characterNode.AddChildNode(player); という記述があります。これは、 エンジン-MainNode-characterNode-Player という親子関係を示しています。 ここで MainNode.characterNode の参照が欲しいとなったときは Player から Parent を呼び出すことで解決できます。 背景を追加する ソースコードが整理できたので、ここから敵を追加していっても良い頃合いです。 しかしその前に、プレーンな背景で繰り広げられるゲームは、いまいち面白みに欠けますよね。 それっぽい背景が欲しいものです。 ということで、 MainNode に背景を追加する機能を追加しておきましょう。 using Altseed2; namespace Tutorial { // メインステージのクラス public class MainNode : Node { // キャラクターを表示するノード private Node characterNode = new Node(); // プレイヤーの参照 private Player player; // エンジンに追加された時に実行 protected override void OnAdded() { // キャラクターノードを追加 AddChildNode(characterNode); // UIを表示するノード var uiNode = new Node(); // UIノードを追加 AddChildNode(uiNode); + // 背景に使用するテクスチャ + var backTexture = new SpriteNode(); + // 背景のテクスチャを読み込む + backTexture.Texture = Texture2D.LoadStrict(\"Resources/Background.png\"); + // 表示位置を奥に設定 + backTexture.ZOrder = -100; + + // 背景テクスチャを追加 + AddChildNode(backTexture); // プレイヤーを設定 player = new Player(new Vector2F(100, 360)); // キャラクターノードにプレイヤーを追加 characterNode.AddChildNode(player); } } } シューティングゲームらしい絵面になりました。 まとめと次回予告 今回は、C#のオブジェクト指向の機能を活用して、ソースコードを整理し、その過程で新たな機能を追加してきました。 このように、機能ごとにクラスを分けておくことで、ソースコードが読みやすくなります。 それによって、プログラムが落ちるなど、予期しない挙動が発生したとき、その原因となっている箇所を見つけやすくもなります。 クラスを自分で設計するということは、初めのうちは難しいかもしれません。 しかし、慣れていくと、自由自在にクラスを設計することができるようになります。 次回からやっと、敵機・敵弾を追加していきます。"
  },
  "Tutorials/Chap5/index.html": {
    "href": "Tutorials/Chap5/index.html",
    "title": "5章 : 敵・敵のショットを表示してみよう | Altseed2",
    "keywords": "5章 : 敵・敵のショットを表示してみよう 今まではプレイヤーの挙動のみでした。 次は敵の実装を行います。 本章では継承を使用します。 確かに、今までも既存のクラスを継承することはありました。 この継承元のクラスは自分でも作成できます。 敵は様々な挙動をしますが、それぞれ個別に実装するのも管理するのも大変です。 それらを共通化するために継承があります。 敵クラスの実装 まずは敵を実装します。 基本的にはプレイヤーと変わりません。 プレイヤーとの違いとして、プレイヤーを攻撃するためにプレイヤーへの参照を持っていること、画面外にでたら自動的に消えることが違います。 画面外にでても常に敵が残り続けると、敵が多すぎて重くなってしまいます。 そのため、画面外に出たら消えるようになっています。 Enemy.csを追加し、下記のコードを記述します。 Enemy.cs using Altseed2; namespace Tutorial { // 敵の基礎となるクラス public class Enemy : SpriteNode { // 倒された時に加算されるスコアの値 protected int score; // プレイヤーへの参照 protected Player player; // コンストラクタ public Enemy(Player player, Vector2F position) { // 座標を設定 Position = position; // プレイヤーへの参照を設定 this.player = player; } // フレーム毎に実行 protected override void OnUpdate() { // 画面外に出たら自身を削除 RemoveMyselfIfOutOfWindow(); } // 画面外に出た時自身を消去 protected void RemoveMyselfIfOutOfWindow() { var halfSize = Texture.Size / 2; if (Position.X < -halfSize.X || Position.X > Engine.WindowSize.X + halfSize.X || Position.Y < -halfSize.Y || Position.Y > Engine.WindowSize.Y + halfSize.Y) { // 自身を削除 Parent?.RemoveChildNode(this); } } } } 前章では、 protected や public の説明をしていませんでした。 これらはアクセス指定子といいます。 そのメンバー変数やメソッドにクラスの外部から使用できるかを指定します。 public は外部から使用できる、 protected は継承先を含めたクラス内、 private 、もしくは記述なしはクラス内のみ使用可能です。 今回の場合、Enemyクラスは継承して使用するので、多くのメンバー変数が protected になっています。 また、 Parent?.RemoveChildNode(this); という記述があります。 これは、 if(Parent != null) Parent.RemoveChildNode(this); と同じ意味です。nullでなかったら、何らかの処理を記述する、ということが多々あるため、簡単に記述できるようになっています。 ただ、見ての通り、この敵は動きもしないし攻撃もしません。 それでは、このクラスを継承して敵を実装しましょう。 隕石 先ほどのEnemyクラスを継承して隕石クラスを記述します。 Meteor.csを追加し、下記のコードを記述します。 Meteor.cs using Altseed2; namespace Tutorial { // 隕石 public class Meteor : Enemy { // フレーム毎の移動速度 private Vector2F velocity; // コンストラクタ public Meteor(Player player, Vector2F position, Vector2F velocity) : base(player, position) { // 速度の設定 this.velocity = velocity; // テクスチャの設定 Texture = Texture2D.LoadStrict(\"Resources/Meteor.png\"); // 中心座標の設定 CenterPosition = ContentSize / 2; // スコアの設定 score = 1; } // 毎フレーム実行 protected override void OnUpdate() { // 座標を速度分加算 Position += velocity; // EnemyクラスのOnUpdate呼び出し base.OnUpdate(); } } } 隕石は移動するだけの敵です。 更新するごとに速度の分、位置を動かしていきます。 <!-- 更新内で ```base.OnUpdate();``` を呼んでいます。 これは、継承元のOnUpdateを呼ぶという意味です。 継承元で、画面外に出たら消すという処理を行っているため、継承元のOnUpdateを呼ぶ必要があります。 --> 敵の出現 敵のクラスを用意しただけでは、敵は出現してくれません。 そこでMainNodeを編集して、敵が出現するようにします。 MainNode.cs using Altseed2; +using System.Collections.Generic; namespace Tutorial { // メインステージのクラス public class MainNode : Node { // キャラクターを表示するノード private Node characterNode = new Node(); // プレイヤーの参照 private Player player; // エンジンに追加された時に実行 protected override void OnAdded() { // キャラクターノードを追加 AddChildNode(characterNode); // UIを表示するノード var uiNode = new Node(); // UIノードを追加 AddChildNode(uiNode); // 背景に使用するテクスチャ var backTexture = new SpriteNode(); // 背景のテクスチャを読み込む backTexture.Texture = Texture2D.LoadStrict(\"Resources/Background.png\"); // 表示位置を奥に設定 backTexture.ZOrder = -100; // 背景テクスチャを追加 AddChildNode(backTexture); // プレイヤーを設定 player = new Player(new Vector2F(100, 360)); // キャラクターノードにプレイヤーを追加 characterNode.AddChildNode(player); + // 敵を追加する。 + characterNode.AddChildNode(new Meteor(player, new Vector2F(910, 400), new Vector2F(-4.0f, 0.0f))); } } } 弾を打つ敵 弾を打つ敵を用意しますが、その前に弾を共通化します。 味方の弾と敵の弾を全く異なるクラスにしてもいいですが、ほとんどの機能は共通なので同じようなコードが2箇所に書かれてしまいます。 そのため、弾クラスを用意して、それを継承するようにします。 前章で作成した弾クラスのコンストラクタを一部修正します。 弾の画像に関する部分を消しています。 Bullet.cs using Altseed2; namespace Tutorial { // 弾のクラス public class Bullet : SpriteNode { // フレーム毎に進む距離 private Vector2F velocity; // コンストラクタ public Bullet(Vector2F position, Vector2F velocity) { // 座標を設定 Position = position; - // テクスチャを読み込む - Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); - - // 中心座標を設定 - CenterPosition = ContentSize / 2; // 弾速を設定 this.velocity = velocity; // 表示位置をプレイヤーや敵より奥に設定 ZOrder--; } // ================================================================ // 省略 // ================================================================ } } それに合わせて、プレイヤーのコードも変更します。 プレイヤーの弾クラスは弾クラスを継承するようにします。 それに合わせて、プレイヤーはプレイヤーの弾クラスを発射するようにします。 新たにBulletクラスを継承してPlayerBulletクラスを追加します。 PlayerBullet.cs using Altseed2; namespace Tutorial { // 自機弾 public class PlayerBullet : Bullet { // コンストラクタ public PlayerBullet(Vector2F position) : base(position, new Vector2F(10f, 0.0f)) { // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; } } } Player.cs PlayerBulletを撃つように変更します。 using Altseed2; namespace Tutorial { // プレイヤーのクラス public class Player : SpriteNode { // ================================================================ // 省略 // ================================================================ // ショット private void Shot() { // Zキーでショットを放つ if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) { + Parent.AddChildNode(new PlayerBullet(Position)); - Parent.AddChildNode(new Bullet(Position, new Vector2F(10f, 0f))); } } } } 次に敵の弾と弾を打つ敵クラスを実装します。 基本的には味方が弾を打つ処理と、敵の移動を組み合わせたものになります。 それぞれ、敵の弾クラスは弾クラスを継承し、弾を打つ敵クラスは敵クラスを継承します。 StraightShotEnemy.cs using Altseed2; using System; namespace Tutorial { // まっすぐな弾を発射する敵 public class StraightShotEnemy : Enemy { // カウンタ private int count = 0; // コンストラクタ public StraightShotEnemy(Player player, Vector2F position) : base(player, position) { // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/UFO.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; // 倒された時に加算されるスコアを設定 score = 20; } // フレーム毎に実行 protected override void OnUpdate() { // カウントが150の倍数で実行 if (count % 150 == 0) { // プレイヤーに対するベクトルの単位ベクトルを取得 var velocity = (player.Position - Position).Normal; // ベクトルの長さを調整(弾速になる) velocity *= 5; // 弾を追加 Shot(velocity); } // 座標を設定 Position -= new Vector2F(MathF.Sin(MathHelper.DegreeToRadian(count)) * 3.0f, 0); // EnemyのOnUpdateを実行 base.OnUpdate(); // カウントを進める count++; } // 弾を撃つ private void Shot(Vector2F velocity) { // 敵弾を画面に追加 Parent.AddChildNode(new EnemyBullet(Position, velocity)); } } } EnemyBullet.cs using Altseed2; namespace Tutorial { // 敵の弾のクラス public class EnemyBullet : Bullet { // コンストラクタ public EnemyBullet(Vector2F position, Vector2F velocity) : base(position, velocity) { // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Bullet_Red.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; } } } この敵も出現するようにしましょう。 MainNodeに敵を追加します。 MainNode.cs using Altseed2; using System.Collections.Generic; namespace Tutorial { // メインステージのクラス public class MainNode : Node { // キャラクターを表示するノード private Node characterNode = new Node(); // プレイヤーの参照 private Player player; // エンジンに追加された時に実行 protected override void OnAdded() { // ================================================================ // 省略 // ================================================================ // 敵を追加する。 + characterNode.AddChildNode(new StraightShotEnemy(player, new Vector2F(600, 620))); characterNode.AddChildNode(new Meteor(player, new Vector2F(910, 400), new Vector2F(-4.0f, 0.0f))); } } } 他の敵 他の敵もそれぞれ実装します。 複数方向に打てる敵です。 経過時間を計測し、経過時間ごとに異なる方向に弾を打ちます。 RadialShotEnemy.cs using Altseed2; namespace Tutorial { // 放射ショットの敵 public class RadialShotEnemy : Enemy { // カウンタ変数 private int count = 0; // 撃ち出すショットの個数 private int shotAmount; // フレーム毎の速度 private Vector2F velocity; // コンストラクタ public RadialShotEnemy(Player player, Vector2F position, int shotAmount) : base(player, position) { // 撃ち出すショットの個数を設定 this.shotAmount = shotAmount; // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/UFO.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; // スコアを設定 score = 30; } // フレーム毎に実行 protected override void OnUpdate() { // カウントが250の倍数だったら if (count % 250 == 0) { // 計算用のローカル変数 var half = shotAmount / 2; for (int i = 0; i < shotAmount; i++) { // 現時点の座標からプレイヤーに向かうベクトルの単位ベクトルを取得する var vector = (player.Position - Position).Normal; // ベクトルを速度分掛ける vector *= 7.0f; // ベクトルを傾ける vector.Degree += 30 * (i - half); // ショットを放つ Shot(vector); } } // カウント÷100の余りが0～49だったら if (count % 100 < 50) { // カウント÷100の余りが0だったら if (count % 100 == 0) { // 進むベクトルを設定 velocity = (player.Position - Position).Normal * 3.0f; } // 速度分ベクトルを設定 Position += velocity; } // EnemyクラスのOnUpdateを呼び出す base.OnUpdate(); // カウントを進める count++; } // 弾を撃つ private void Shot(Vector2F velocity) { // 敵弾を画面に追加 Parent.AddChildNode(new EnemyBullet(Position, velocity)); } } } プレイヤーを追いかける敵です。 プレイヤーへの参照を使用し、プレイヤーのほうに近づきます。 ChaseEnemy.cs using Altseed2; namespace Tutorial { // 追跡型敵 public class ChaseEnemy : Enemy { // 移動速度 private float speed; // コンストラクタ public ChaseEnemy(Player player, Vector2F position, float speed) : base(player, position) { // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/UFO.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; // 移動速度を設定 this.speed = speed; // 自身が倒された時に加算されるスコアを設定 score = 10; } // フレーム毎に実行 protected override void OnUpdate() { // プレイヤーへのベクトルの単位ベクトルを取得 var vector = (player.Position - Position).Normal; // ベクトルの長さを調整 vector *= speed; // ベクトル分座標を動かす Position += vector; // EnemyのOnUpdateを実行 base.OnUpdate(); } } } それぞれの敵を追加します。 using Altseed2; using System.Collections.Generic; namespace Tutorial { // メインステージのクラス public class MainNode : Node { // キャラクターを表示するノード private Node characterNode = new Node(); // プレイヤーの参照 private Player player; // エンジンに追加された時に実行 protected override void OnAdded() { // ================================================================ // 省略 // ================================================================ // 敵を追加する。 + characterNode.AddChildNode(new ChaseEnemy(player, new Vector2F(700, 160), 2.0f)); characterNode.AddChildNode(new StraightShotEnemy(player, new Vector2F(600, 620))); characterNode.AddChildNode(new Meteor(player, new Vector2F(910, 400), new Vector2F(-4.0f, 0.0f))); + characterNode.AddChildNode(new RadialShotEnemy(player, new Vector2F(400, 160), 3)); } } } 続・敵の出現 いままでのだと、敵が一気に出現するし、そのあとにも敵は出現しないので面白くありません。 そこで複数の敵が順番に出るようにします。 ここでは Queue というクラスを使用しています。 これはListと同じようなものですが、挙動が異なります。 Listは、常に内部のコレクションの最後に値を追加するのみで、追加した後は任意の値にアクセスできました。 一方、Queueは、内部のコレクションの最後に値を追加し、取得するときは一番最初に追加した値を取得して、その値をコレクションから取り除きます。 追加には、 Enqueue 、取り出しには、 Dequeue を使用します。 例えば、下記のような挙動になります。 Queue<int> queue = new Queue<int>(); queue.Enqueue(1); queue.Enqueue(2); // この時点ではqueueの中身には1,2がある int value = queue.Dequeue(); // 1が表示される。 // この時点ではqueueの中身には2がある Console.WriteLine(value); これを使用して敵を管理します。 親ノードには敵を追加せず、Queueに敵ノードを追加します。 そして、一定時間ごとにQueueから敵ノードを取り出し、追加することで敵が徐々に出現するようにします。 using Altseed2; + using System.Collections.Generic; namespace Tutorial { // メインステージのクラス public class MainNode : Node { + // カウンタ + private int count = 0; + // 敵を格納するキュー + private Queue<Enemy> enemies = new Queue<Enemy>(); // キャラクターを表示するノード private Node characterNode = new Node(); // プレイヤーの参照 private Player player; // エンジンに追加された時に実行 protected override void OnAdded() { // キャラクターノードを追加 AddChildNode(characterNode); // UIを表示するノード var uiNode = new Node(); // UIノードを追加 AddChildNode(uiNode); // 背景に使用するテクスチャ var backTexture = new SpriteNode(); // 背景のテクスチャを読み込む backTexture.Texture = Texture2D.LoadStrict(\"Resources/Background.png\"); // 表示位置を奥に設定 backTexture.ZOrder = -100; // 背景テクスチャを追加 AddChildNode(backTexture); // プレイヤーを設定 player = new Player(new Vector2F(100, 360)); // キャラクターノードにプレイヤーを追加 characterNode.AddChildNode(player); - characterNode.AddChildNode(new StraightShotEnemy(player, new Vector2F(600, 620))); - - characterNode.AddChildNode(new RadialShotEnemy(player, new Vector2F(400, 160), 3)); - - characterNode.AddChildNode(new StraightShotEnemy(player, new Vector2F(600, 620)); - - characterNode.AddChildNode(new ChaseEnemy(player, new Vector2F(700, 160), 2.0f)); + // ウェーブを初期化する + InitWave(); } + // ウェーブの初期化 + private void InitWave() + { + // enemies.Enqueue～でウェーブに敵を追加 + // 追加した順番に敵が出現する + + + enemies.Enqueue(new ChaseEnemy(player, new Vector2F(700, 160), 2.0f)); + + enemies.Enqueue(new StraightShotEnemy(player, new Vector2F(600, 620))); + + enemies.Enqueue(new Meteor(player, new Vector2F(910, 400), new Vector2F(-4.0f, 0.0f))); + + enemies.Enqueue(new RadialShotEnemy(player, new Vector2F(400, 160), 3)); + } + + // フレーム毎に実行 + protected override void OnUpdate() + { + // ステージの更新 + UpdateStage(); + + // カウントを進める + count++; + } + + // 敵召還関連 + private void UpdateStage() + { + // カウントが100の倍数だったら + if (count % 100 == 0) + { + // 敵が残っていたら画面に追加 + if (enemies.Count > 0) + { + characterNode.AddChildNode(enemies.Dequeue()); + } + } + } } } まとめ ここでは敵の処理を実装しました。 ただ、この章で弾は打てるようになりましたが、一切攻撃は命中しません。 次章では、弾が命中するようにします。"
  },
  "Tutorials/Chap6/index.html": {
    "href": "Tutorials/Chap6/index.html",
    "title": "6章 : 当たり判定の機能を使ってみよう | Altseed2",
    "keywords": "6章 : 当たり判定の機能を使ってみよう 5章では敵機と敵弾の作成までを行いました。しかしこのままでは当たり判定がないただのオブジェクトになってしまいます。 本章では敵機と敵弾に当たり判定をつけていきます。 当たり判定仕組み 「当たり判定」とは読んで字の如く、オブジェクト同士が当たっているかどうか判定するものです。当たり判定の実装方法には色々な手法が考えられますが、今回は簡単のために「円同士の当たり判定をピクセル単位で取る」という方法を扱います。 例えば下のような２つの円のオブジェクトを考え、２つの円の中心座標を考えてみましょう。２つの円の半径をa, bとおき、２つの円のx座標の差をd、y座標の差をeとおくと、中学校で習うような「三平方の定理」よりd²+e²<(a+b)²ならば２つの円は「ぶつかっている」ということになりますね。 当たり判定実装 当たり判定の仕組みは上で説明したとおりですが、自分で一から実装するのは面倒なのでAltseed2ではこの当たり判定をまとめたクラスである CircleCollider が用意されています。 早速この CircleCollider を使って当たり判定を実装していきましょう。 今回は自機、自弾、敵機、敵弾の4つに当たり判定をつけるので基底クラスとして CollidableObject クラスを用意してそれを継承していくような実装にします。 継承については以下を参照してください。 C# によるプログラミング入門 : 継承 CollidableObject のコードは以下のようになります。 using System.Collections.Generic; using Altseed2; namespace Tutorial { // 衝突可能なオブジェクト(円形) public class CollidableObject : SpriteNode { // コライダのコレクション public static HashSet<CollidableObject> objects = new HashSet<CollidableObject>(); // コライダ protected CircleCollider collider = new CircleCollider(); // OnUpdate内で衝突判定を調査するかどうか protected bool doSurvey; // 所属するメインノードへの参照 public MainNode mainNode; // コンストラクタ public CollidableObject(MainNode mainNode, Vector2F position) { // メインノードへの参照を設定 this.mainNode = mainNode; // コライダの座標を設定 collider.Position = position; // 座標を設定 Position = position; } // エンジンに追加された時に実行 protected override void OnAdded() { // コライダのコレクションに自身を追加 objects.Add(this); } // エンジンから削除された時に実行 protected override void OnRemoved() { // コライダのコレクションから自身を削除 objects.Remove(this); } // フレーム毎に実行 protected override void OnUpdate() { // フラグが成立時に衝突判定を実行 if (doSurvey) { Survey(); } // コライダの座標を更新 collider.Position = Position; } // 衝突時に実行 private void CollideWith(CollidableObject obj) { // nullだったら終了 if (obj == null) { return; } // 衝突対象がSurveyを実行しないオブジェクトだった場合，相手のOnCollisionも実行 if (!obj.doSurvey) { obj.OnCollision(this); } // 自身のOnCollisiionを実行 OnCollision(obj); } // 衝突時に実行される内容をオーバーライドして設定できる protected virtual void OnCollision(CollidableObject obj) { } // 画面外に出た時自身を消去 protected void RemoveMyselfIfOutOfWindow() { var halfSize = Texture.Size / 2; if (Position.X < -halfSize.X || Position.X > Engine.WindowSize.X + halfSize.X || Position.Y < -halfSize.Y || Position.Y > Engine.WindowSize.Y + halfSize.Y) { // 自身を削除 Parent?.RemoveChildNode(this); } } // 衝突判定を調査する private void Survey() { // objects内の全オブジェクトを検索し，衝突が確認されたオブジェクト間でCollideWithを実行 foreach (var obj in objects) if (collider.GetIsCollidedWith(obj.collider)) CollideWith(obj); } } } これまで SpriteNode を継承していたため、 CollidableObject でも SpriteNode を継承しています。 また、 Enemy クラスと Bullet クラスに定義していた RemoveMyselfIfOutOfWindow 関数ですが同じ処理が二か所にあって冗長です。基本的に同じ処理は一か所にまとめた方が良いのでそれぞれの親クラスになる CollidableObject でこの関数を定義することにします。 変数とコンストラクタを解説していきます。 // コライダのコレクション public static HashSet<CollidableObject> objects = new HashSet<CollidableObject>(); // コライダ protected CircleCollider collider = new CircleCollider(); // OnUpdate内で衝突判定を調査するかどうか protected bool doSurvey; // 所属するメインノードへの参照 public MainNode mainNode; // コンストラクタ public CollidableObject(MainNode mainNode, Vector2F position) { // メインノードへの参照を設定 this.mainNode = mainNode; // コライダの座標を設定 collider.Position = position; // 座標を設定 Position = position; } それぞれのコライダとの当たり判定をとるためにコライダのコレクションを保存しておく必要があります。コライダオブジェクトは変数 objects に保存します。 この変数 objects の宣言には static というキーワードが使われています。これは静的メンバーと呼ばれるもので、すべてのインスタンスから共有されるような変数を宣言できます。詳しい説明は以下のリンク先を参照してください。 C# によるプログラミング入門 : 静的メンバー 変数 collider はコライダの本体で、先ほど言ったようにAltseed2で用意された CircleCollider を使用します。 doSurvey と mainNode はコメントにある通りです。 コンストラクタの collider.Position = position はコライダの位置設定で Position = position は本体の描画されているオブジェクトの位置設定であることに注意してください。 次に OnUpdate です。 // フレーム毎に実行 protected override void OnUpdate() { // フラグが成立時に衝突判定を実行 if (doSurvey) { Survey(); } // コライダの座標を更新 collider.Position = Position; } 先ほど定義した doSurvey のフラグが true の場合後述する Survey 関数が呼ばれて当たり判定が開始します。 オブジェクトが動いてもコライダの位置は変わらないのでコライダとオブジェクトの位置と同期させるために collider.Position = Position; としています。 さらに OnAdded 関数と OnRemoved 関数があると思います。こちらはエンジンにオブジェクトが追加されたタイミングと消去されたタイミングで呼ばれます。この時変数 objects に追加と削除をしてエンジンに追加されているオブジェクトのみをコレクションに残しておきます。 Survey関数です。 // 衝突判定を調査する private void Survey() { // objects内の全オブジェクトを検索し，衝突が確認されたオブジェクト間でCollideWithを実行 foreach (var obj in objects) if (collider.GetIsCollidedWith(obj.collider)) CollideWith(obj); } コライダ間の衝突は GetIsCollidedWith 関数で取ることができます。この関数は衝突している場合 true を返すのでif文で衝突した場合に CollideWith が呼ばれます。 CollideWith には衝突した場合の処理を書いていきます。 ここで、 foreach とは for 文の拡張で、 foreach (var obj in objects) というのは、 「 objects の要素をとりだして、 obj と名前を付ける」 ことを objects の全要素について行ってくれます。 今回は foreach 文を使って objects から取り出した CollidableObject である obj のコライダ obj.collider と自身のコライダ collider の間での当たり判定を取っています。 また、 var というキーワードがあります。これは 型推論 と呼ばれるもので、名前の通り変数の宣言の際に型を推論してくれるというものです。なので上の foreach 文は foreach (CollidableObject obj in objects) if (collider.GetIsCollidedWith(obj.collider)) CollideWith(obj); このようにしても大丈夫です。ただ、 var を使ったほうが記述が短くて楽です。 foreach と var についての詳しい解説を以下に載せておきます。 C# によるプログラミング入門 : foreach C# によるプログラミング入門 : 型推論 CollideWith 関数では衝突時の処理を書いていきます。 // 衝突時に実行 private void CollideWith(CollidableObject obj) { // nullだったら終了 if (obj == null) { return; } // 衝突対象がSurveyを実行しないオブジェクトだった場合，相手のOnCollisionも実行 if (!obj.doSurvey) { obj.OnCollision(this); } // 自身のOnCollisiionを実行 OnCollision(obj); } ここで， Survey を実行しないオブジェクト(= doSurvey が false )に対して OnCollision を呼び出しています。 何故，全ての CollidableObject に対して Survey を実行させず， doSurvey のような面倒な処理を挟むのかというのが気になるかと思います。 後々説明しますが， doSurvey フラグは自機や敵では true ，自機弾や敵弾では false にします。 もし仮に全ての CollidableObject にて Survey を走らせるとなると，衝突判定が計算される回数は objects に登録されている CollidableObject の2乗に相当します。 弾というオブジェクトは，自機や敵の個数に比べて大量に画面上に出現する機会が多いです。その為，弾幕シューティングを作ったときなどは処理が重くなることがあります。 それを避けるために doSurvey というフラグを用いて Survey を実行する回数を最小限に留める事が出来ます。 プログラミングを行う際はこのようにパフォーマンスを意識するという事も大事です(最初のうちは動くこと重視，慣れてきたら意識すると良いです)。 オブジェクトにより当たった時の処理は異なるので継承先で OnCollision 関数をオーバーライドさせて処理を継承先に委託するようにしています。 OnCollision 関数にあるキーワード virtual は仮想メソッドと呼ばれるものでこれをつけることで継承先で関数のオーバーライドができます。 C# によるプログラミング入門 : 多態性 // 衝突時に実行される内容をオーバーライドして設定できる protected virtual void OnCollision(CollidableObject obj) { } 当たり判定を持つクラスへの切り替え ざっとですが基本的なコライダの使い方を解説しました。 次は継承先での処理を作っていきましょう。 まずは各クラスを CollidableObject から継承させるようにします。 Player クラス - public class Player : SpriteNode + public class Player : CollidableObject Enemy クラス - public class Enemy : SpriteNode + public class Enemy : CollidableObject Bullet クラス - class Bullet : SpriteNode + class Bullet : CollidableObject さらにコンストラクタも書き換えていきます。 冒頭でも少し触れましたが Enemy クラスと Bullet クラスの RemoveMyselfIfOutOfWindow 関数は親クラスである CollidableObject に移したのでついでに削除しましょう。 また， CollidableObject の OnUpdate に処理を書いたので， base.OnUpdate を呼び出しましょう。 Player クラス using Altseed2; namespace Tutorial { // プレイヤーのクラス public class Player : CollidableObject { // コンストラクタ - public Player(Vector2F position) + public Player(MainNode mainNode, Vector2F position) : base(mainNode, position) { - // 座標を設定 - Position = position; + // 衝突判定を行うように設定 + doSurvey = true; // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; + // コライダの半径を設定 + collider.Radius = Texture.Size.Y / 2; } // フレーム毎に実行 protected override void OnUpdate() { // 移動を実行 Move(); // ショットを実行 Shot(); + // CollidableObjectのOnUpdate呼び出し + base.OnUpdate(); } ...略... } } Enemy クラス using Altseed2; namespace Tutorial { // 敵の基礎となるクラス public class Enemy : CollidableObject { // 倒された時に加算されるスコアの値 protected int score; // プレイヤーへの参照 protected Player player; // コンストラクタ - public Enemy(Player player, Vector2F position) + public Enemy(Player player, Vector2F position) : base(player.mainNode, position) { + // 衝突判定を行うように設定 + doSurvey = true; - // 座標を設定 - Position = position; // プレイヤーへの参照を設定 this.player = player; } // フレーム毎に実行 protected override void OnUpdate() { // CollidableObjectのOnUpdateを実行 base.OnUpdate(); + // 画面外に出たら自身を削除 + RemoveMyselfIfOutOfWindow(); } - private void RemoveMyselfIfOutOfWindow() - { - var halfSize = Texture.Size / 2; - if (Position.X < -halfSize.X - || Position.X > Engine.WindowSize.X + halfSize.X - || Position.Y < -halfSize.Y - || Position.Y > Engine.WindowSize.Y + halfSize.Y) - { - // 自身を削除 - Parent?.RemoveChildNode(this); - } - } } } Bullet クラス using Altseed2; namespace Tutorial { // 弾のクラス public class Bullet : CollidableObject { // フレーム毎に進む距離 private Vector2F velocity; // コンストラクタ - public Bullet(Vector2F position, Vector2F velocity) + public Bullet(MainNode mainNode, Vector2F position, Vector2F velocity) : base(mainNode, position) { + // 衝突判定を行わないように設定 + doSurvey = false; - // 座標を設定 - Position = position; // 弾速を設定 this.velocity = velocity; // 表示位置をプレイヤーや敵より奥に設定 ZOrder--; } // フレーム毎に実行 protected override void OnUpdate() { // 座標を速度分進める Position += velocity; + // CollidableObjectのOnUpdateを呼び出す + base.OnUpdate(); // 画面外に出たら自身を削除 RemoveMyselfIfOutOfWindow(); } - private void RemoveMyselfIfOutOfWindow() - { - var halfSize = Texture.Size / 2; - if (Position.X < -halfSize.X - || Position.X > Engine.WindowSize.X + halfSize.X - || Position.Y < -halfSize.Y - || Position.Y > Engine.WindowSize.Y + halfSize.Y) - { - // 画面外に出たら自身を削除 - Parent?.RemoveChildNode(this); - } - } } } ここでコンストラクタの後ろに base というキーワードが出てきました。これは親クラスのコンストラクタ呼び出しという意味です。今回だと ColliderObject のコンストラクタを呼び出します。 ColliderObject のコンストラクタでは MainNode と position が必要なため base の後の引数で受け渡します。 base についての詳しい解説はこちらを参照してください。 C# によるプログラミング入門 : 継承 また、 ColliderObject のコンストラクタで座標を設定する処理があるので子クラスでは座標を設定するコードは消しています。 Bullet の修正に併せて EnemyBullet と PlayerBullet のコードも修正していきましょう。 これらはコンストラクタの引数変更と半径を設定させるだけで大丈夫です EnemyBullet クラス + public EnemyBullet(MainNode mainNode, Vector2F position, Vector2F velocity) : base(mainNode, position, velocity) - public EnemyBullet(Vector2F position, Vector2F velocity) : base(position, velocity) { // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Bullet_Red.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; + // 半径を設定 + collider.Radius = Texture.Size.X / 2; } PlayerBullet クラス + public PlayerBullet(MainNode mainNode, Vector2F position) : base(mainNode, position, new Vector2F(10f, 0.0f)) - public PlayerBullet(Vector2F position) : base(position, new Vector2F(10f, 0.0f)) { // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Bullet_Blue.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; + // 半径を設定 + collider.Radius = Texture.Size.X / 2; } 次に Enemy クラスの変更に併せてその派生クラスである ChaseEnemy クラスと RadialShotEnemy クラスと StraightShotEnemy クラスと Meteor クラスを書き換えていきます。先ほど EnemyBullet クラスの引数を変更したので Shot 関数の EnemyBullet を生成するコードもついでに書き換えましょう。 ChaseEnemy クラス public ChaseEnemy(Player player, Vector2F position, float speed) : base(player, position) { // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/UFO.png\"); // 中心座標を設定 CenterPosition = ConentSize / 2; + // 半径を設定 + collider.Radius = Texture.Size.X / 2; // 移動速度を設定 this.speed = speed; // 自身が倒された時に加算されるスコアを設定 score = 10; } RadialShotEnemy クラス public RadialShotEnemy(Player player, Vector2F position, int shotAmount) : base(player, position) { // 撃ち出すショットの個数を設定 this.shotAmount = shotAmount; // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/UFO.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; + // 半径を設定 + collider.Radius = Texture.Size.X / 2; // スコアを設定 score = 30; } // 弾を撃つ private void Shot(Vector2F velocity) { // 敵弾を画面に追加 + Parent.AddChildNode(new EnemyBullet(mainNode, Position, velocity)); - Parent.AddChildNode(new EnemyBullet(Position, velocity)); } StraightShotEnemy クラス public StraightShotEnemy(Player player, Vector2F position) : base(player, position) { // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/UFO.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; + // 半径を設定 + collider.Radius = Texture.Size.X / 2; // 倒された時に加算されるスコアを設定 score = 20; } // 弾を撃つ private void Shot(Vector2F velocity) { // 敵弾を画面に追加 + Parent.AddChildNode(new EnemyBullet(mainNode, Position, velocity)); - Parent.AddChildNode(new EnemyBullet(Position, velocity)); } Meteor クラス public Meteor(Player player, Vector2F position, Vector2F velocity) : base(player, position) { // 速度の設定 this.velocity = velocity; // テクスチャの設定 Texture = Texture2D.LoadStrict(\"Resources/Meteor.png\"); // 中心座標の設定 CenterPosition = ContentSize / 2; + // 半径の設定 + collider.Radius = Texture.Size.X / 2; // スコアの設定 score = 1; } さらに Player クラスで PlayerBullet を使用していたのでこちらも修正が必要になります。 Player クラスの Shot 関数 // ショット private void Shot() { // Zキーでショットを放つ if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) { + Parent.AddChildNode(new PlayerBullet(mainNode, Position)); - Parent.AddChildNode(new PlayerBullet(Position)); } } 最後に MainNode クラスを修正します。まず、 Player クラスの呼び出しの変更が必要です。さらにもう一つ変更が必要です。もし MainNode が消去されてもコライダがコレクションに残っている場合、使われていないコライダがコレクションに保存され続けるとになります。この場合、ゲームのリトライなどを行うとリトライ前のコライダが残ってしまい、バグなどを引き起こす恐れがあるのでコライダの消去を行います。 HashSet クラスの中身消去は Clear 関数でできます。 MainNode クラス protected override void OnAdded() { // ================================================================ // 省略 // ================================================================ // プレイヤーを設定 + player = new Player(this, new Vector2F(100, 360)); - player = new Player(new Vector2F(100, 360)); // ================================================================ // 省略 // ================================================================ } + // エンジンから削除されたときに実行 + protected override void OnRemoved() + { + // 衝突判定を全てリセット + CollidableObject.objects.Clear(); + } これでひと段落と思いきや、衝突時の処理をまだ書いていないので衝突してもまだ何も起こりません。次にそれぞれのクラスで衝突した時の処理を書いていきたいところですが、先に衝突したときのエフェクトを作りましょう。 Effectを作成するクラス 衝突したときに出すエフェクトである DeathEffect クラスを作ります。 DeathEffect のコードは以下のようになります。 using Altseed2; namespace Tutorial { // 死亡時エフェクト public class DeathEffect : SpriteNode { // カウンタ private int count = 0; // コンストラクタ public DeathEffect(Vector2F position) { // 座標を設定 Position = position; // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Explosion.png\"); // 中心座標を設定 CenterPosition = new Vector2F(32f, 32f); // 表示位置をプレイヤーや敵よりも手前に設定 ZOrder++; // テクスチャの描画範囲を設定 Src = new RectF(new Vector2F(), new Vector2F(Texture.Size.X / 9, Texture.Size.Y)); } // フレーム毎に実行 protected override void OnUpdate() { // 表示されるテクスチャのサイズを取得 var size = new Vector2F(Texture.Size.X / 9, Texture.Size.Y); // 表示されるテクスチャの左上の座標を計算する var pos = new Vector2F(size.X * (count / 2 % 9), size.Y); // 描画範囲を設定 Src = new RectF(pos, size); // カウントを進める count++; // カウントが18以上で自身を削除 if (count >= 18) { Parent.RemoveChildNode(this); } } } } どのように実装されているかというと以下のような画像の一部を表示して表示位置をずらしてあげることでアニメーションのような効果を出しています。 コード中で使われている Src について説明します。今までは Texture に設定された画像全てを描画していましたが、今回は画像の一部だけを切り取って描画する必要があります。 そこで、 Src を使用します。 Src は SpriteNode クラスの持つフィールドで、 Src に値を設定すると画像の中で指定された範囲のみが描画されるようになります。 Src に値を設定する方法ですが、第一引数は表示したい範囲の左上の座標を、第二引数はその座標から表示する範囲を指定します // 描画範囲を設定 Src = new RectF(pos, size); 設定する変数 size と pos は count という毎フレーム1ずつ増える整数の変数を作って計算します。今回は2フレームごとに画像をずらすような式にしてあります。上に示した画像は爆破の画像が横に9枚並んでいるもので、2フレーム×9=18なので count が18になった場合 Parent.RemoveChildNode(this); により自身を削除してエフェクトの再生を終了します。 // 表示されるテクスチャのサイズを取得 var size = new Vector2F(Texture.Size.X / 9, Texture.Size.Y); // 表示されるテクスチャの左上の座標を計算する var pos = new Vector2F(size.X * (count / 2 % 9), size.Y); // 描画範囲を設定 Src = new RectF(pos, size); // カウントを進める count++; // カウントが18以上で自身を削除 if (count >= 18) { Parent.RemoveChildNode(this); } 爆破のエフェクトが完成したので衝突時の処理を書いていきましょう。 OnCollideの実装 CollidableObject では衝突したときに OnCollide 関数を呼び出すように実装しましたね。なので子クラスで OnCollide 関数の中身を記述してあげればよいです。 衝突時に処理するクラスは Player と Enemy と PlayerBullet と EnemyBullet の4クラスになります。 これら4つの OnCollide 関数を以下に載せます。 Player クラス // 衝突時に実行 protected override void OnCollision(CollidableObject obj) { // 衝突対象が敵か敵の弾だったら if (obj is Enemy || obj is EnemyBullet) { // 自身を親から削除 Parent.RemoveChildNode(this); } } PlayerBullet クラス // 衝突時に実行 protected override void OnCollision(CollidableObject obj) { // 衝突対象が敵だったら自身を削除 if (obj is Enemy) { Parent?.RemoveChildNode(this); } } Enemy クラス // 衝突時に実行 protected override void OnCollision(CollidableObject obj) { // 衝突対象が自機弾だったら if (obj is PlayerBullet) { // 死亡時エフェクトを再生 Parent.AddChildNode(new DeathEffect(Position)); // 自身を削除 Parent.RemoveChildNode(this); } } EnemyBullet クラス // 衝突時に実行 protected override void OnCollision(CollidableObject obj) { // 衝突対象がプレイヤーだったらBulletのOnCollisionを実行して削除 if (obj is Player) { Parent?.RemoveChildNode(this); } } ここで is というキーワードがありますね。これは is演算子 と呼ばれるものです。この is というのは変数 obj がどの型を継承しているのか判断するために使えます。一例ですが、 if (obj is Enemy) と書けば、 obj が Enemy クラスか、その派生クラスの時に処理をすることができます。 余談ですが似たような機能に as演算子 というものがあります。こちらは戻り値が bool ではなく型変換したものになります。 is演算子 と as演算子 について詳しく知りたい方は以下を参照してください。 C# によるプログラミング入門 : 多態性 Meteorクラス改変 今、 Meteor クラスの衝突処理は Enemy クラスの OnCollide が呼ばれるので、 Player の弾に当たると消滅します。これで完成してもよいのですが、 Meteor というからには岩石で硬いはずなので Player の弾ごとき3回くらいまでなら耐えると思います。 そのように改変しましょう。 Meteor クラス using Altseed2; namespace Tutorial { // 隕石 public class Meteor : Enemy { // フレーム毎の移動速度 private Vector2F velocity; + // HP + private int HP = 3; // コンストラクタ、OnUpdate略 + protected override void OnCollision(CollidableObject obj) + { + // 衝突したのが自機弾だったら + if (obj is PlayerBullet) + { + // HPを1減らす + HP--; + // HPが0になったらEnemyクラスのOnCollisionを呼び出して削除 + if (HP == 0) + { + base.OnCollision(obj); + } + } + } + } } HPというフィールドを追加して、プレイヤーの弾に当たる度にHPを1減らしていき、HPが0になったら消滅するというシンプルな処理です。 このように Enemy クラスでオーバーライドした OnCollision をさらにオーバーライドすると親クラスの OnCollision は呼ばれなくなり、子クラスの処理に切り替わります。 長い工程を経て衝突判定と衝突時の処理が完成しました。実行してみると敵に衝突したり、自弾が敵に衝突したときにエフェクトが出て画面から消えることが確認できると思います。 まとめ 今回は衝突判定をつけてみました。ようやくゲームらしさが増してきましたね。 Altseed2 では CircleCollider 以外にも多角形のコライダである PolygonCollier クラスや四角形のコライダである RectangleCollider クラスがあります。もし、厳密さが必要な形のオブジェクトに衝突判定をつけたい場合はそちらを使ってみてください。 次章では音を鳴らしてみます。"
  },
  "Tutorials/Chap7/index.html": {
    "href": "Tutorials/Chap7/index.html",
    "title": "7章 : 音を鳴らしてみよう | Altseed2",
    "keywords": "7章 : 音を鳴らしてみよう 前章では、当たり判定を実装しました。 この章では、ゲームに不可欠な音を追加します。 ゲームには、オブジェクトの動きに合わせたサウンドエフェクト(SE)やゲームの雰囲気を作り出すBGMが必要です。 以下では、SEやBGMを再生する処理を実装します。 SEを鳴らす 今回は、以下のSEを再生します。 プレイヤーのショット音 プレイヤーの死亡時サウンド 敵共通の死亡時サウンド まっすぐな弾を発射する敵のショット音 放射ショットの敵のショット音 プレイヤーのショット音を追加 Player.cs に以下のソースコードを追加します。 using Altseed2; namespace Tutorial { // プレイヤーのクラス public class Player : CollidableObject { + // ショット時の効果音 + private Sound shotSound; // コンストラクタ public Player(MainNode mainNode, Vector2F position) : base(mainNode, position) { // 衝突判定を行うように設定 doSurvey = true; // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; // コライダの半径を設定 collider.Radius = Texture.Size.Y / 2; + // ショット音を読み込む + shotSound = Sound.LoadStrict(\"Resources/shot1.wav\", true); } // 衝突時に実行 protected override void OnCollision(CollidableObject obj) { // 衝突対象が敵か敵の弾だったら if (obj is Enemy || obj is EnemyBullet) { // 自身を親から削除 Parent.RemoveChildNode(this); } } // フレーム毎に実行 protected override void OnUpdate() { // 移動を実行 Move(); // ショットを実行 Shot(); // CollidableObjectのOnupdate呼び出し base.OnUpdate(); } // 移動を行う private void Move() { // 現在のX座標を取得する var x = Position.X; // 現在のY座標を取得する var y = Position.Y; // ↑キーでY座標を減少 if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) { y -= 2.5f; } // ↓キーでY座標を増加 if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) { y += 2.5f; } // →キーでX座標を増加 if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) { x += 2.5f; } // ←キーでX座標を減少 if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) { x -= 2.5f; } // テクスチャのサイズの半分を取得する var halfSize = Texture.Size / 2; // X座標が画面外に行かないように調整 x = MathHelper.Clamp(x, Engine.WindowSize.X - halfSize.X, halfSize.X); // Y座標が画面外に行かないように調整 y = MathHelper.Clamp(y, Engine.WindowSize.Y - halfSize.Y, halfSize.Y); // 調整された座標を設定 Position = new Vector2F(x, y); } // ショット private void Shot() { // Zキーでショットを放つ if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) { Parent.AddChildNode(new PlayerBullet(mainNode, Position)); + // ショット音を鳴らす + Engine.Sound.Play(shotSound); } } } } // ショット時の効果音 private Sound shotSound; Altseed2では、音源データを Sound クラスインスタンスに格納します。 また、ファイルから音源データを読み込む場合は、以下のように Sound.LoadStrict メソッドを用います。 // ショット音を読み込む shotSound = Sound.LoadStrict(\"Resources/shot1.wav\", true); 第一引数には、音源データファイルへのパスします。 そして、第二引数には、音源データを事前に解凍するか否かを指定します。 一般的に、短い音をたくさん鳴らすようなSEの場合は、事前に解凍します。 一方、BGMのような長い音源に対しては、事前に解凍せず、逐次解凍するようにします。 そして、読み込んだ音源データを再生するには、以下のように Engine.Sound.Play メソッドを呼び出す必要があります。 // ショット音を鳴らす Engine.Sound.Play(shotSound); 引数として、上で作成した Sound クラスインスタンスを渡します。 この段階でビルドし、実行するとZキーでショットを放った瞬間に音が鳴ると思います。 プレイヤーの死亡時サウンドを追加 ショット音と同様に Player.cs に以下のソースコードを追加します。 using Altseed2; namespace Tutorial { // プレイヤーのクラス public class Player : CollidableObject { // ショット時の効果音 private Sound shotSound; // コンストラクタ public Player(MainNode mainNode, Vector2F position) : base(mainNode, position) { // 衝突判定を行うように設定 doSurvey = true; // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/Player.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; // コライダの半径を設定 collider.Radius = Texture.Size.Y / 2; // ショット音を読み込む shotSound = Sound.LoadStrict(\"Resources/shot1.wav\", true); } // 衝突時に実行 protected override void OnCollision(CollidableObject obj) { // 衝突対象が敵か敵の弾だったら if (obj is Enemy || obj is EnemyBullet) { + // 死亡音を読み込む + var deathSound = Sound.LoadStrict(\"Resources/Explosion.wav\", true); + + // 死亡音を再生 + Engine.Sound.Play(deathSound); + // 自身を親から削除 Parent.RemoveChildNode(this); } } // フレーム毎に実行 protected override void OnUpdate() { // 移動を実行 Move(); // ショットを実行 Shot(); // CollidableObjectのOnupdate呼び出し base.OnUpdate(); } // 移動を行う private void Move() { // 現在のX座標を取得する var x = Position.X; // 現在のY座標を取得する var y = Position.Y; // ↑キーでY座標を減少 if (Engine.Keyboard.GetKeyState(Key.Up) == ButtonState.Hold) { y -= 2.5f; } // ↓キーでY座標を増加 if (Engine.Keyboard.GetKeyState(Key.Down) == ButtonState.Hold) { y += 2.5f; } // →キーでX座標を増加 if (Engine.Keyboard.GetKeyState(Key.Right) == ButtonState.Hold) { x += 2.5f; } // ←キーでX座標を減少 if (Engine.Keyboard.GetKeyState(Key.Left) == ButtonState.Hold) { x -= 2.5f; } // テクスチャのサイズの半分を取得する var halfSize = Texture.Size / 2; // X座標が画面外に行かないように調整 x = MathHelper.Clamp(x, Engine.WindowSize.X - halfSize.X, halfSize.X); // Y座標が画面外に行かないように調整 y = MathHelper.Clamp(y, Engine.WindowSize.Y - halfSize.Y, halfSize.Y); // 調整された座標を設定 Position = new Vector2F(x, y); } // ショット private void Shot() { // Zキーでショットを放つ if (Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) { Parent.AddChildNode(new PlayerBullet(mainNode, Position)); // ショット音を鳴らす Engine.Sound.Play(shotSound); } } } } 敵共通の死亡時サウンドを追加 すべての敵共通で再生するため、 Enemy.cs に以下のソースコードを追加します。 using Altseed2; namespace Tutorial { // 敵の基礎となるクラス public class Enemy : CollidableObject { // 倒された時に加算されるスコアの値 protected int score; // プレイヤーへの参照 protected Player player; // コンストラクタ public Enemy(Player player, Vector2F position) : base(player.mainNode, position) { // 衝突判定を行うように設定 doSurvey = true; // プレイヤーへの参照を設定 this.player = player; } // 衝突時に実行 protected override void OnCollision(CollidableObject obj) { // 衝突対象が自機弾だったら if (obj is PlayerBullet) { // スコアを加算 mainNode.score += score; // 死亡時エフェクトを再生 Parent.AddChildNode(new DeathEffect(Position)); // 自身を削除 Parent.RemoveChildNode(this); + // 死亡時サウンドを読み込み + var deathSound = Sound.LoadStrict(\"Resources/Explosion.wav\", true); + + // 死亡時サウンドを再生 + Engine.Sound.Play(deathSound); } } // フレーム毎に実行 protected override void OnUpdate() { // CollidableObjectのOnUpdateを実行 base.OnUpdate(); // 画面外に出たら自身を削除 RemoveMyselfIfOutOfWindow(); } } } まっすぐな弾を発射する敵のショット音を追加 StraightShotEnemy.cs に以下のソースコードを追加します。 using Altseed2; using System; namespace Tutorial { // まっすぐな弾を発射する敵 public class StraightShotEnemy : Enemy { // カウンタ private int count = 0; + // ショット時の効果音 + private Sound shotSound; // コンストラクタ public StraightShotEnemy(Player player, Vector2F position) : base(player, position) { // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/UFO.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; // 半径を設定 collider.Radius = Texture.Size.X / 2; // 倒された時に加算されるスコアを設定 score = 20; + // ショット時の効果音を読み込む + shotSound = Sound.LoadStrict(\"Resources/shot2.wav\", true); } // フレーム毎に実行 protected override void OnUpdate() { // カウントが150の倍数で実行 if (count % 150 == 0) { // プレイヤーに対するベクトルの単位ベクトルを取得 var velocity = (player.Position - Position).Normal; // ベクトルの長さを調整(弾速になる) velocity *= 5; // 弾を追加 Shot(velocity); } // 座標を設定 Position -= new Vector2F(MathF.Sin(MathHelper.DegreeToRadian(count)) * 3.0f, 0); // EnemyのOnUpdateを実行 base.OnUpdate(); // カウントを進める count++; } // 弾を撃つ private void Shot(Vector2F velocity) { // 敵弾を画面に追加 Parent.AddChildNode(new EnemyBullet(mainNode, Position, velocity)); + // ショット音を再生 + Engine.Sound.Play(shotSound); } } } 放射ショットの敵のショット音を追加 RadialShotEnemy.cs に以下のソースコードを追加します。 using Altseed2; namespace Tutorial { // 放射ショットの敵 public class RadialShotEnemy : Enemy { // カウンタ変数 private int count = 0; // 撃ち出すショットの個数 private int shotAmount; + // ショット時の効果音 + private Sound shotSound; // フレーム毎の速度 private Vector2F velocity; // コンストラクタ public RadialShotEnemy(Player player, Vector2F position, int shotAmount) : base(player, position) { // 撃ち出すショットの個数を設定 this.shotAmount = shotAmount; // テクスチャを読み込む Texture = Texture2D.LoadStrict(\"Resources/UFO.png\"); // 中心座標を設定 CenterPosition = ContentSize / 2; // 半径を設定 collider.Radius = Texture.Size.X / 2; // スコアを設定 score = 30; + // ショット時の効果音を読み込む + shotSound = Sound.LoadStrict(\"Resources/shot2.wav\", true); } // フレーム毎に実行 protected override void OnUpdate() { // カウントが250の倍数だったら if (count % 250 == 0) { // 計算用のローカル変数 var half = shotAmount / 2; for (int i = 0; i < shotAmount; i++) { // 現時点の座標からプレイヤーに向かうベクトルの単位ベクトルを取得する var vector = (player.Position - Position).Normal; // ベクトルを速度分掛ける vector *= 7.0f; // ベクトルを傾ける vector.Degree += 30 * (i - half); // ショットを放つ Shot(vector); } } // カウント÷100の余りが0～49だったら if (count % 100 < 50) { // カウント÷100の余りが0だったら if (count % 100 == 0) { // 進むベクトルを設定 velocity = (player.Position - Position).Normal * 3.0f; } // 速度分ベクトルを設定 Position += velocity; } // EnemyクラスのOnUpdateを呼び出す base.OnUpdate(); // カウントを進める count++; } // 弾を撃つ private void Shot(Vector2F velocity) { // 敵弾を画面に追加 Parent.AddChildNode(new EnemyBullet(mainNode, Position, velocity)); + // ショット音を再生 + Engine.Sound.Play(shotSound); } } } 以上を追加し、ビルドするとSEが適切なタイミングで再生されると思います。 BGMを鳴らす 次は、BGMを再生する処理を追加しましょう。 メインステージのBGMであるため、 MainNode.cs に以下のソースコードを追加します。 using Altseed2; using System.Collections.Generic; namespace Tutorial { // メインステージのクラス public class MainNode : Node { // カウンタ private int count = 0; // 敵を格納するキュー private Queue<Enemy> enemies = new Queue<Enemy>(); // キャラクターを表示するノード private Node characterNode = new Node(); // プレイヤーの参照 private Player player; // エンジンに追加された時に実行 protected override void OnAdded() { // キャラクターノードを追加 AddChildNode(characterNode); // UIを表示するノード var uiNode = new Node(); // UIノードを追加 AddChildNode(uiNode); // 背景に使用するテクスチャ var backTexture = new SpriteNode(); // 背景のテクスチャを読み込む backTexture.Texture = Texture2D.LoadStrict(\"Resources/Background.png\"); // 表示位置を奥に設定 backTexture.ZOrder = -100; // 背景テクスチャを追加 AddChildNode(backTexture); // プレイヤーを設定 player = new Player(this, new Vector2F(100, 360)); // キャラクターノードにプレイヤーを追加 characterNode.AddChildNode(player); // ウェーブを初期化する InitWave(); + // BGMを初期化する + InitBGM(); } // エンジンから削除されたときに実行 protected override void OnRemoved() { // 衝突判定を全てリセット CollidableObject.objects.Clear(); } + // BGMを初期化 + private void InitBGM() + { + // BGMを読み込む + var bgm = Sound.LoadStrict(\"Resources/BGM.wav\", false); + + // BGMのプレイ開始 + Engine.Sound.Play(bgm); + } // ウェーブの初期化 private void InitWave() { // enemies.Enqueue～でウェーブに敵を追加 // 追加した順番に敵が出現する enemies.Enqueue(new ChaseEnemy(player, new Vector2F(700, 160), 2.0f)); enemies.Enqueue(new StraightShotEnemy(player, new Vector2F(600, 620))); enemies.Enqueue(new Meteor(player, new Vector2F(910, 400), new Vector2F(-4.0f, 0.0f))); enemies.Enqueue(new RadialShotEnemy(player, new Vector2F(400, 160), 3)); } // フレーム毎に実行 protected override void OnUpdate() { // ステージの更新 UpdateStage(); // カウントを進める count++; } // 敵召還関連 private void UpdateStage() { // カウントが100の倍数だったら if (count % 100 == 0) { // 敵が残っていたら画面に追加 if (enemies.Count > 0) { characterNode.AddChildNode(enemies.Dequeue()); } } } } } BGMに関する初期化をするメソッド InitBGM を実装し、 メインステージが始まった時点で再生するため、 OnAdded で呼び出します。 BGMを再生する場合も、基本的はSEと変わらず、 Sound クラスインスタンスを用います。 しかし、このままではうまくいきません。 今回、BGMを再生するために、以下の処理が必要となります。 ループ処理 再生している音の制御(一時停止、終了) ループ処理 InitBGM メソッドに以下の処理を追加しましょう。 using Altseed2; using System.Collections.Generic; namespace Tutorial { // メインステージのクラス public class MainNode : Node { // カウンタ private int count = 0; // 敵を格納するキュー private Queue<Enemy> enemies = new Queue<Enemy>(); // キャラクターを表示するノード private Node characterNode = new Node(); // プレイヤーの参照 private Player player; // エンジンに追加された時に実行 protected override void OnAdded() { // キャラクターノードを追加 AddChildNode(characterNode); // UIを表示するノード var uiNode = new Node(); // UIノードを追加 AddChildNode(uiNode); // 背景に使用するテクスチャ var backTexture = new SpriteNode(); // 背景のテクスチャを読み込む backTexture.Texture = Texture2D.LoadStrict(\"Resources/Background.png\"); // 表示位置を奥に設定 backTexture.ZOrder = -100; // 背景テクスチャを追加 AddChildNode(backTexture); // プレイヤーを設定 player = new Player(this, new Vector2F(100, 360)); // キャラクターノードにプレイヤーを追加 characterNode.AddChildNode(player); // ウェーブを初期化する InitWave(); // BGMを初期化する InitBGM(); } // エンジンから削除されたときに実行 protected override void OnRemoved() { // 衝突判定を全てリセット CollidableObject.objects.Clear(); } // BGMを初期化 private void InitBGM() { // BGMを読み込む var bgm = Sound.LoadStrict(\"Resources/BGM.wav\", false); + // BGMをループするように設定 + bgm.IsLoopingMode = true; + + // ループ開始位置を設定 + bgm.LoopStartingPoint = 11.33f; + + // ループ終了位置を設定 + bgm.LoopEndPoint = 33.93f; // BGMのプレイ開始 Engine.Sound.Play(bgm); } // ウェーブの初期化 private void InitWave() { // enemies.Enqueue～でウェーブに敵を追加 // 追加した順番に敵が出現する enemies.Enqueue(new ChaseEnemy(player, new Vector2F(700, 160), 2.0f)); enemies.Enqueue(new StraightShotEnemy(player, new Vector2F(600, 620))); enemies.Enqueue(new Meteor(player, new Vector2F(910, 400), new Vector2F(-4.0f, 0.0f))); enemies.Enqueue(new RadialShotEnemy(player, new Vector2F(400, 160), 3)); } // フレーム毎に実行 protected override void OnUpdate() { // ステージの更新 UpdateStage(); // カウントを進める count++; } // 敵召還関連 private void UpdateStage() { // カウントが100の倍数だったら if (count % 100 == 0) { // 敵が残っていたら画面に追加 if (enemies.Count > 0) { characterNode.AddChildNode(enemies.Dequeue()); } } } } } BGMをループさせるには、 Sound クラスインスタンスの IsLoopingMode プロパティを true にします。 そして、音源の任意の区間をループさせる場合、 Sound クラスインスタンスの LoopStartingPoint プロパティで区間の始点 Sound クラスインスタンスの LoopEndPoint プロパティで区間の終点 を指定する必要があります。 再生している音の制御(一時停止、終了) MainNode.cs に以下のソースコードを変更します。 using Altseed2; using System.Collections.Generic; namespace Tutorial { // メインステージのクラス public class MainNode : Node { + // BGMのID + private int? bgmID = null; + // カウンタ private int count = 0; // 敵を格納するキュー private Queue<Enemy> enemies = new Queue<Enemy>(); // キャラクターを表示するノード private Node characterNode = new Node(); // プレイヤーの参照 private Player player; // エンジンに追加された時に実行 protected override void OnAdded() { // キャラクターノードを追加 AddChildNode(characterNode); // UIを表示するノード var uiNode = new Node(); // UIノードを追加 AddChildNode(uiNode); // 背景に使用するテクスチャ var backTexture = new SpriteNode(); // 背景のテクスチャを読み込む backTexture.Texture = Texture2D.LoadStrict(\"Resources/Background.png\"); // 表示位置を奥に設定 backTexture.ZOrder = -100; // 背景テクスチャを追加 AddChildNode(backTexture); // プレイヤーを設定 player = new Player(this, new Vector2F(100, 360)); // キャラクターノードにプレイヤーを追加 characterNode.AddChildNode(player); // ウェーブを初期化する InitWave(); // BGMを初期化する InitBGM(); } // エンジンから削除されたときに実行 protected override void OnRemoved() { // 衝突判定を全てリセット CollidableObject.objects.Clear(); } // BGMを初期化 private void InitBGM() { // BGMを読み込む var bgm = Sound.LoadStrict(\"Resources/BGM.wav\", false); // BGMをループするように設定 bgm.IsLoopingMode = true; // ループ開始位置を設定 bgm.LoopStartingPoint = 11.33f; // ループ終了位置を設定 bgm.LoopEndPoint = 33.93f; // BGMのプレイ開始 + bgmID = Engine.Sound.Play(bgm); - Engine.Sound.Play(bgm); } // ウェーブの初期化 private void InitWave() { // enemies.Enqueue～でウェーブに敵を追加 // 追加した順番に敵が出現する enemies.Enqueue(new ChaseEnemy(player, new Vector2F(700, 160), 2.0f)); enemies.Enqueue(new StraightShotEnemy(player, new Vector2F(600, 620))); enemies.Enqueue(new Meteor(player, new Vector2F(910, 400), new Vector2F(-4.0f, 0.0f))); enemies.Enqueue(new RadialShotEnemy(player, new Vector2F(400, 160), 3)); } // フレーム毎に実行 protected override void OnUpdate() { // ステージの更新 UpdateStage(); // カウントを進める count++; } // 敵召還関連 private void UpdateStage() { // カウントが100の倍数だったら if (count % 100 == 0) { // 敵が残っていたら画面に追加 if (enemies.Count > 0) { characterNode.AddChildNode(enemies.Dequeue()); } } } } } 再生している音は、 Engine.Sound.Play メソッドの戻り値である int 型のIDによって、制御できます。 今回は、BGMはずっと再生させておくため、制御はしませんが、 今後、BGMを制御する場合に備えて、 MainNode クラスの bgmID フィールドに格納しておきましょう。 以上を反映させて、ビルドを行うとBGMが再生されると思います。 まとめ 本章では、ゲームに音を加えることによって、よりゲームらしくなったかと思います。 みなさんのゲームでも、どんどん効果音をつけていってください。 次の章では、ゲーム性を高める上で重要な得点を表示させていきましょう。"
  },
  "Tutorials/Chap8/index.html": {
    "href": "Tutorials/Chap8/index.html",
    "title": "8章 : 得点を表示してみよう | Altseed2",
    "keywords": "8章 : 得点を表示してみよう 前章では音を鳴らすところまで進みました。 今回は5章で設定したスコア( score )を、画面に表示してみましょう！ まずは、スコアを表示させるための TextNode を作り、それを表示するところまでやってみます。 これが表示できたら、あとは表示するテキストをスコアに切り替えます。 テキストを表示 まずは、スコア変数とスコア表示用の TextNode を追加していきます。 以下のコードを追加してください。 using Altseed2; using System.Collections.Generic; namespace Tutorial { // メインステージのクラス public class MainNode : Node { // BGMのID private int? bgmID = null; // カウンタ private int count = 0; // 敵を格納するキュー private Queue<Enemy> enemies = new Queue<Enemy>(); // キャラクターを表示するノード private Node characterNode = new Node(); // プレイヤーの参照 private Player player; + // スコアを表示するノード + private TextNode scoreNode; + // スコア + public int score; ...略... 二つの TextNode 用の変数を書いたら、 次は敵を倒したときにスコア加算が行われるようにします。 以下のコードを追加してください。 using Altseed2; namespace Tutorial { // 敵の基礎となるクラス public class Enemy : CollidableObject { ...略... // 衝突時に実行 protected override void OnCollision(CollidableObject obj) { // 衝突対象が自機弾だったら if (obj is PlayerBullet) { + // スコアを加算 + mainNode.score += score; // 死亡時エフェクトを再生 Parent.AddChildNode(new DeathEffect(Position)); // 自身を削除 Parent.RemoveChildNode(this); // 死亡時サウンドを読み込み var deathSound = Sound.LoadStrict(\"Resources/Explosion.wav\", true); // 死亡時サウンドを再生 Engine.Sound.Play(deathSound); } } ...略... } } 次はこの TextNode の設定していきます。 using Altseed2; using System.Collections.Generic; namespace Tutorial { // メインステージのクラス public class MainNode : Node { ...略... // エンジンに追加された時に実行 protected override void OnAdded() { // キャラクターノードを追加 AddChildNode(characterNode); // UIを表示するノード var uiNode = new Node(); // UIノードを追加 AddChildNode(uiNode); // 背景に使用するテクスチャ var backTexture = new SpriteNode(); // 背景のテクスチャを読み込む backTexture.Texture = Texture2D.LoadStrict(\"Resources/Background.png\"); // 表示位置を奥に設定 backTexture.ZOrder = -100; // 背景テクスチャを追加 AddChildNode(backTexture); // プレイヤーを設定 player = new Player(this, new Vector2F(100, 360)); // キャラクターノードにプレイヤーを追加 characterNode.AddChildNode(player); + // スコアを表示するノードを設定 + scoreNode = new TextNode(); + // スコア表示に使うフォントを読み込む + scoreNode.Font = Font.LoadDynamicFontStrict(\"Resources/GenYoMinJP-Bold.ttf\"); + // スコア表示に使う文字のサイズを設定 + scoreNode.FontSize = 30; + // スコア表示の位置を設定 + scoreNode.Position = new Vector2F(); + // スコア表示の文字を設定 + scoreNode.Text = \"スコア\"; + + // UIノードにスコア表示ノードを追加 + uiNode.AddChildNode(scoreNode); // ウェーブを初期化する InitWave(); // BGMを初期化する InitBGM(); } ...略... } } 設定した内容は、 TextNode インスタンスの代入 フォントの読み込みと設定 表示位置を設定 uiNode に追加 の4点です。 この4つの設定をスコアのテキストにしています。 ここで一度実行してみます。 「スコア」が画面上部に表示されているのが確認できました。 ここまできたら次は、実際のスコアを表示してみましょう。 実際のスコアを表示 スコアは score に格納されていますね。 これらをテキストに設定していきます。 では、以下のコードを追加・削除してください。 using Altseed2; using System.Collections.Generic; namespace Tutorial { // メインステージのクラス public class MainNode : Node { ...略... // エンジンに追加された時に実行 protected override void OnAdded() { // キャラクターノードを追加 AddChildNode(characterNode); // UIを表示するノード var uiNode = new Node(); // UIノードを追加 AddChildNode(uiNode); // 背景に使用するテクスチャ var backTexture = new SpriteNode(); // 背景のテクスチャを読み込む backTexture.Texture = Texture2D.LoadStrict(\"Resources/Background.png\"); // 表示位置を奥に設定 backTexture.ZOrder = -100; // 背景テクスチャを追加 AddChildNode(backTexture); // プレイヤーを設定 player = new Player(this, new Vector2F(100, 360)); // キャラクターノードにプレイヤーを追加 characterNode.AddChildNode(player); // スコアを表示するノードを設定 scoreNode = new TextNode(); // スコア表示に使うフォントを読み込む scoreNode.Font = Font.LoadDynamicFontStrict(\"Resources/GenYoMinJP-Bold.ttf\"); // スコア表示に使う文字のサイズを設定 scoreNode.FontSize = 30; // スコア表示の位置を設定 scoreNode.Position = new Vector2F(); - // スコア表示の文字を設定 - scoreNode.Text = \"スコア\"; // UIノードにスコア表示ノードを追加 uiNode.AddChildNode(scoreNode); // ウェーブを初期化する InitWave(); // BGMを初期化する InitBGM(); } ...略... // フレーム毎に実行 protected override void OnUpdate() { + // スコア表示の更新 + scoreNode.Text = \"Score : \" + score; // ステージの更新 UpdateStage(); // カウントを進める count++; } ...略... } } まず、先ほど追加した仮テキストを代入する箇所を削除します。 次に、それぞれのテキスト表示を更新する箇所ですが、 scoreNode.Text = \"Score : \" + score; このようになっています。 これは、 \"Score : \" と score 変数を合体させて、 \"Score : 210\" という形式で表示しようとしています。 この処理を毎フレーム実行することで、現在のスコアを表示することができるようになる、ということです。 では実行してみます 左上の方に「Score」が表示できてますね。 さて、これで現在のスコアを表示できるようになりました。 次回は自機がダメージを受けたときの処理を書いていきます！ コード全体 最後に、今回修正を加えた、今回の MainNode 全体を載せておきます。困ったときは見比べたりコピペしてみてください。 using Altseed2; using System.Collections.Generic; namespace Tutorial { // メインステージのクラス public class MainNode : Node { // BGMのID private int? bgmID = null; // カウンタ private int count = 0; // 敵を格納するキュー private Queue<Enemy> enemies = new Queue<Enemy>(); // キャラクターを表示するノード private Node characterNode = new Node(); // プレイヤーの参照 private Player player; // スコアを表示するノード private TextNode scoreNode; // スコア public int score; // エンジンに追加された時に実行 protected override void OnAdded() { // キャラクターノードを追加 AddChildNode(characterNode); // UIを表示するノード var uiNode = new Node(); // UIノードを追加 AddChildNode(uiNode); // 背景に使用するテクスチャ var backTexture = new SpriteNode(); // 背景のテクスチャを読み込む backTexture.Texture = Texture2D.LoadStrict(\"Resources/Background.png\"); // 表示位置を奥に設定 backTexture.ZOrder = -100; // 背景テクスチャを追加 AddChildNode(backTexture); // プレイヤーを設定 player = new Player(this, new Vector2F(100, 360)); // キャラクターノードにプレイヤーを追加 characterNode.AddChildNode(player); // スコアを表示するノードを設定 scoreNode = new TextNode(); // スコア表示に使うフォントを読み込む scoreNode.Font = Font.LoadDynamicFontStrict(\"Resources/GenYoMinJP-Bold.ttf\"); // スコア表示に使う文字のサイズを設定 scoreNode.FontSize = 30; // スコア表示の位置を設定 scoreNode.Position = new Vector2F(); // UIノードにスコア表示ノードを追加 uiNode.AddChildNode(scoreNode); // ウェーブを初期化する InitWave(); // BGMを初期化する InitBGM(); } // エンジンから削除されたときに実行 protected override void OnRemoved() { // 衝突判定を全てリセット CollidableObject.objects.Clear(); } // BGMを初期化 private void InitBGM() { // BGMを読み込む var bgm = Sound.LoadStrict(\"Resources/BGM.wav\", false); // BGMをループするように設定 bgm.IsLoopingMode = true; // ループ開始位置を設定 bgm.LoopStartingPoint = 11.33f; // ループ終了位置を設定 bgm.LoopEndPoint = 33.93f; // BGMのプレイ開始 bgmID = Engine.Sound.Play(bgm); } // ウェーブの初期化 private void InitWave() { // enemies.Enqueue～でウェーブに敵を追加 // 追加した順番に敵が出現する enemies.Enqueue(new ChaseEnemy(player, new Vector2F(700, 160), 2.0f)); enemies.Enqueue(new StraightShotEnemy(player, new Vector2F(600, 620))); enemies.Enqueue(new Meteor(player, new Vector2F(910, 400), new Vector2F(-4.0f, 0.0f))); enemies.Enqueue(new RadialShotEnemy(player, new Vector2F(400, 160), 3)); } // フレーム毎に実行 protected override void OnUpdate() { // スコア表示の更新 scoreNode.Text = \"Score : \" + score; // ステージの更新 UpdateStage(); // カウントを進める count++; } // 敵召還関連 private void UpdateStage() { // カウントが100の倍数だったら if (count % 100 == 0) { // 敵が残っていたら画面に追加 if (enemies.Count > 0) { characterNode.AddChildNode(enemies.Dequeue()); } } } } }"
  },
  "Tutorials/Chap9/index.html": {
    "href": "Tutorials/Chap9/index.html",
    "title": "9章 : タイトル・ゲームオーバー画面を作ってみよう | Altseed2",
    "keywords": "9章 : タイトル・ゲームオーバー画面を作ってみよう ここまでの実装でシューティングとしてほぼほぼ完成形になりました。 あと一息，タイトル画面や死亡時のゲームオーバー画面を作ればもうゲームとして成立してしまいます。 タイトル画面の追加 タイトルノードの実装 まず以下のコードを追加してタイトル画面を作りましょう。 + using Altseed2; + + namespace Tutorial + { + // タイトル画面 + public class TitleNode : Node + { + // 画面が遷移中かどうか + private bool fading = false; + + // エンジンに追加された時に実行 + protected override void OnAdded() + { + // タイトル + var titleText = new TextNode(); + // タイトルのフォントを読み込む + titleText.Font = Font.LoadDynamicFontStrict(\"Resources/GenYoMinJP-Bold.ttf\"); + // タイトルの文字のサイズを設定 + titleText.FontSize = 100; + // タイトルの文字を設定 + titleText.Text = \"Tutorial STG\"; + // タイトルの座標を設定 + titleText.Position = new Vector2F(Engine.WindowSize.X / 2, 100f); + // タイトルの中心座標を設定 + titleText.CenterPosition = titleText.ContentSize / 2; + + // タイトルを追加 + AddChildNode(titleText); + + // 画面下に表示される案内 + var announce = new TextNode(); + // 案内のフォントを読み込む + announce.Font = Font.LoadDynamicFontStrict(\"Resources/GenYoMinJP-Bold.ttf\"); + // 案内の文字のサイズを設定 + announce.FontSize = 50; + // 案内の文字を設定 + announce.Text = \"Press Z to start\"; + // 案内の座標を設定 + announce.Position = new Vector2F(Engine.WindowSize.X / 2, 600f); + // 案内の中心座標を設定 + announce.CenterPosition = announce.ContentSize / 2; + + // 案内を追加 + AddChildNode(announce); + + // 背景のテクスチャ + var backTexture = new SpriteNode(); + // 背景のテクスチャを読み込む + backTexture.Texture = Texture2D.LoadStrict(\"Resources/image.png\"); + // 背景の表示位置を奥に設定 + backTexture.ZOrder = -1; + + // 背景を追加 + AddChildNode(backTexture); + } + + // フレーム毎に実行 + protected override void OnUpdate() + { + // 画面が遷移中でなく，Zキーが押された時に実行 + if (!fading && Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) + { + // エンジンから自身を削除 + Engine.RemoveNode(this); + + // エンジンにメイン画面を追加 + Engine.AddNode(new MainNode()); + + // 画面遷移中のフラグを立てる + fading = true; + } + } + } + } 基本的に実装は今迄行ってきたような， SpriteNode や TextNode を用いた画像/文字の描画です。 ここで注意する点が2つあります。 1つ目は // エンジンから自身を削除 Engine.RemoveNode(this); // エンジンにメイン画面を追加 Engine.AddNode(new MainNode()); の部分です。 第4章にて， Program.cs で Engine.AddNode(Node) は書きましたね。 ここでは， タイトル画面でZキーを押したときメインのシューティング画面に変更する処理 を行っています。 タイトル画面にいるときは，ノードの親子関係はこのようになっています。 此処における Root は， Engine 内で定義されている全てのノードの祖先となるノードです。 TitleNode の子ノードとして，タイトルのテキストや案内の文字，背景のテクスチャがあります。 この状態で Engine.RemoveNode(TitleNode) を行うとノードの親子関係はこのようになります。 Root と TitleNode の親子関係が解消され， TitleNode に登録されているテキストやテクスチャがウィンドウに描画されなくなります。 Root.RemoveNode(TitleNode) とやっていることに違いはありません。 次に Engine.AddNode(MainNode) を行う事でノードの親子関係は次のようになります。 Root の子に MainNode が追加され， MainNode での実装が実行されます。 前の章で実装してきたシューティングゲーム本体の内容ですね。 此処で大事なのは， Engine.Rootの子孫になったノードに描画や更新処理が適用される という事です。 描画や更新をしたくないノードは Remove して，描画や更新を実行したいノードを Add するようにしましょう。 2つ目は // 画面が遷移中かどうか private bool fading = false; の部分です。 この変数は，タイトル画面でZキーを押したときに true に変更されます。 // 画面が遷移中でなく，Zキーが押された時に実行 if (!fading && Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) { そして， true になるとこのif文の条件の様に，もう一度Zキーを押してもif文の内容が実行されなくなります。 これは，Zキー連打によって MainNode が Root に複数追加されるのを防ぎたいという事です。 タイトルノードへの遷移を追加 タイトルを実装したので，実際にゲームを始めた時に最初に表示されるようにしてみましょう。 Program.cs のコードを次のように書き換えてみましょう。 namespace Tutorial { class Program { [STAThread] static void Main(string[] args) { // エンジンを初期化 Engine.Initialize(\"Tutorial\", 960, 720); + // タイトル画面をエンジンに追加 + Engine.AddNode(new TitleNode()); - // メイン画面をエンジンに追加 - Engine.AddNode(new MainNode()); // メインループ while (Engine.DoEvents()) { …以下略… これで最初に表示されるノードが MainNode から TitleNode に変わりました。 ゲームオーバー画面の追加 次は死亡時にゲームオーバー画面を表示してみましょう。 TitleNode と同様に実装します。 + using Altseed2; + + namespace Tutorial + { + // ゲームオーバー画面 + public class GameOverNode : Node + { + // 画面が遷移中かどうか + private bool fading = false; + + // エンジンに追加された時に実行 + protected override void OnAdded() + { + // タイトル + var titleText = new TextNode(); + // タイトルのフォントを読み込む + titleText.Font = Font.LoadDynamicFontStrict(\"Resources/GenYoMinJP-Bold.ttf\"); + // タイトルの文字のサイズを設定 + titleText.FontSize = 100; + // タイトルの文字を設定 + titleText.Text = \"Game Over\"; + // タイトルの座標を設定 + titleText.Position = new Vector2F(Engine.WindowSize.X / 2, 100f); + // タイトルの中心座標を設定 + titleText.CenterPosition = titleText.ContentSize / 2; + // タイトルを追加 + AddChildNode(titleText); + + // 画面下に表示される案内 + var announce = new TextNode(); + // 案内のフォントを読み込む + announce.Font = Font.LoadDynamicFontStrict(\"Resources/GenYoMinJP-Bold.ttf\"); + // 案内の文字のサイズを設定 + announce.FontSize = 50; + // 案内の文字を設定 + announce.Text = \"Press Z to go title\"; + // 案内の座標を設定 + announce.Position = new Vector2F(Engine.WindowSize.X / 2, 600f); + // 案内の中心座標を設定 + announce.CenterPosition = announce.ContentSize / 2; + // 案内を追加 + AddChildNode(announce); + } + + // フレーム毎に実行 + protected override void OnUpdate() + { + // 画面が遷移中でなく，Zキーが押された時に実行 + if (!fading && Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) + { + // エンジンから自身を削除 + Engine.RemoveNode(this); + + // エンジンにタイトル画面を追加 + Engine.AddNode(new TitleNode()); + + // 画面遷移中のフラグを立てる + fading = true; + } + } + } + } 次に， MainNode に，ゲームオーバーへの遷移メソッドを実装します。 using Altseed2; using System.Collections.Generic; namespace Tutorial { // メインステージのクラス public class MainNode : Node { ...略... // スコアを表示するノード private TextNode scoreNode; + // 他画面へ遷移しているかどうか + private bool fading = false; // スコア public int score; ...略... + // ゲームオーバー画面に遷移 + public void ToGameOver() + { + // BGMをフェードアウト + if (bgmID.HasValue) + { + Engine.Sound.FadeOut(bgmID.Value, 1.0f); + + // BGMが止まったのでIDをnullに + bgmID = null; + } + + // 画面遷移中でないなら遷移処理を実行 + if (!fading) + { + // 自身をエンジンから削除 + Engine.RemoveNode(this); + + // エンジンにゲームオーバー画面を追加 + Engine.AddNode(new GameOverNode()); + + // 遷移中フラグを縦立てる + fading = true; + } + } // 敵召還関連 private void UpdateStage() ...略... } } これで， ToGameOver() メソッドを呼び出すことでゲームオーバー画面に遷移できるようになりました。 ゲームオーバーの呼び出しはプレイヤーが死亡したとき，つまりプレイヤーが敵/敵弾に衝突したときに呼び出せば良いですね。 それでは，以下のように Player.cs にて呼び出してみましょう。 using Altseed2; namespace Tutorial { // プレイヤーのクラス public class Player : CollidableObject { ...略... // 衝突時に実行 protected override void OnCollision(CollidableObject obj) { // 衝突対象が敵か敵の弾だったら if (obj is Enemy || obj is EnemyBullet) { // 死亡音を読み込む var deathSound = Sound.LoadStrict(\"Resources/Explosion.wav\", true); // 死亡音を再生 Engine.Sound.Play(deathSound); // 自身を親から削除 Parent.RemoveChildNode(this); + // ゲームオーバーに遷移 + mainNode.ToGameOver(); } } ...略... これでプレイヤーが敵/敵弾に衝突したときにゲームオーバー画面が呼び出されるようになりました。 // BGMをフェードアウト if (bgmID.HasValue) { Engine.Sound.FadeOut(bgmID.Value, 1.0f); // BGMが止まったのでIDをnullに bgmID = null; } この部分ではBGMのフェードアウトを行っています。 SoundMixer.FadeOut(int id, float seconds) は，指定した音を指定した秒数でフェードアウトするというものです。 BGMが再生中，つまり bgmID がnullじゃないとき(= bgmID.HasValue が true のとき)にフェードアウトを行い， bgmID を null にします。ここで bgmID を null にすることで bgmID.HasValue が false となるため，フェードアウト処理は一度だけしか行われません。 クリア画面の追加 クリア画面も追加してみましょう。 TitleNode や GameOverNode と同じ要領でクリア画面も作ってみましょう。 + using Altseed2; + + namespace Tutorial + { + // クリア画面 + public class LevelCompletedNode : Node + { + // 画面遷移中かどうか + private bool fading = false; + + // エンジンに追加された時に実行 + protected override void OnAdded() + { + // タイトル + var titleText = new TextNode(); + // タイトルのフォントを読み込む + titleText.Font = Font.LoadDynamicFontStrict(\"Resources/GenYoMinJP-Bold.ttf\"); + // タイトルの文字のサイズを設定 + titleText.FontSize = 100; + // タイトルの文字を設定 + titleText.Text = \"Clear!\"; + // タイトルの座標を設定 + titleText.Position = new Vector2F(Engine.WindowSize.X / 2, 100f); + // タイトルの中心座標を設定 + titleText.CenterPosition = titleText.ContentSize / 2; + // タイトルを追加 + AddChildNode(titleText); + + // 画面下の案内 + var announce = new TextNode(); + // 案内のフォントを読み込む + announce.Font = Font.LoadDynamicFontStrict(\"Resources/GenYoMinJP-Bold.ttf\"); + // タイトルの文字のサイズを設定 + announce.FontSize = 50; + // 案内のテキストを設定 + announce.Text = \"Press Z to go title\"; + // 案内の座標を設定 + announce.Position = new Vector2F(Engine.WindowSize.X / 2, 600f); + // 案内の中心座標を設定 + announce.CenterPosition = announce.ContentSize / 2; + //案内を追加 + AddChildNode(announce); + } + + // フレーム毎に実行 + protected override void OnUpdate() + { + // 画面遷移中でなく，かつZキーが押された時に実行 + if (!fading && Engine.Keyboard.GetKeyState(Key.Z) == ButtonState.Push) + { + // エンジンから自身を削除 + Engine.RemoveNode(this); + + // エンジンにタイトル画面を追加 + Engine.AddNode(new TitleNode()); + + // 画面遷移中のフラグを立てる + fading = true; + } + } + } + } 同様に， MainNode.cs にもクリア画面への遷移を追加してみましょう。 using Altseed2; using System.Collections.Generic; namespace Tutorial { // メインステージのクラス public class MainNode : Node { ...略... // 敵召還関連 private void UpdateStage() { // カウントが100の倍数だったら if (count % 100 == 0) { // 敵が残っていたら画面に追加 if (enemies.Count > 0) { characterNode.AddChildNode(enemies.Dequeue()); } else { + // もし画面遷移中でなければ実行 + if (!fading) + { + // BGMをフェードアウト + if (bgmID.HasValue) + { + Engine.Sound.FadeOut(bgmID.Value, 1.0f); + + // BGMが止まったのでIDをnullに + bgmID = null; + } + + // エンジンから自身を削除 + Engine.RemoveNode(this); + + // クリア画面をエンジンに追加 + Engine.AddNode(new LevelCompletedNode()); + + // 画面遷移中フラグを立てる + fading = true; + } } } } } } これで，ウェーブをクリアしたときに自動的にBGMがフェードアウトされ，クリア画面に遷移します。"
  },
  "Tutorials/index.html": {
    "href": "Tutorials/index.html",
    "title": "Altseed2 チュートリアル | Altseed2",
    "keywords": "Altseed2 チュートリアル このチュートリアルでは、ゲームエンジン「Altseed2」を使ってシューティングゲームを開発していきます。 プログラミングをやったことがない人でも、このチュートリアルを通してある程度のクオリティのシューティングゲームを作れるようになります。 このチュートリアルでは、開発に使用するプログラミング言語として C#を用います。 C#の文法自体は本文中でも軽く説明しますが、ある程度 C#の知識を身につけておくと読みやすくなるでしょう。 C#のより詳しい解説は、 C#によるプログラミング入門 にわかりやすく纏まっています。 C#の文法や機能について不明な点があった場合は、是非一読してみてください。 また、C#の学習を円滑なものにするため、各章の冒頭に新たに導入される C#の機能とその解説へのリンクを記載しています。 C#の機能をもっと知りたい、本文を読んでもよく分からなかったという場合は、そちらをご参照ください。 なお、このチュートリアルは、Windowsユーザ及び Mac ユーザを想定しています。"
  }
}